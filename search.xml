<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年1月29日工作学习总结</title>
    <url>/2018/01/29/2018nian1yue29rigongzuoxuexizongjie/</url>
    <content><![CDATA[<p>学习总结 </p>
<h1 id="一、html元素分类"><a href="#一、html元素分类" class="headerlink" title="一、html元素分类"></a>一、html元素分类</h1><p>按默认样式分类 </p>
<ol>
<li>块级元素 div,  p </li>
<li>行内元素 span em strong </li>
<li>inline-block select<br>按内容分类 见html5官网 <h1 id="二、HTML元素嵌套关系"><a href="#二、HTML元素嵌套关系" class="headerlink" title="二、HTML元素嵌套关系"></a>二、HTML元素嵌套关系</h1>块级元素可以包含行内元素 块级元素不一定能包含块级元素，比如p不能包含div </li>
</ol>
<p>行内元素一般不包含块级元素，a 比较特殊 </p>
<h1 id="三、css-hack"><a href="#三、css-hack" class="headerlink" title="三、css hack"></a>三、css hack</h1><p>替代方案：特性检测<br>替代方案：针对性加class<br>案例checkbox</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;checkbox&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot;&gt;</span><br><span class="line">&lt;label&gt;i am label&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>案例tabs 案例tree 案例幻灯片<br>今日问题1： 元素的margin问题<br>问题2： h1,h2,h3,…,h6的使用规范<br>问题3： 网站初始样式规范</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>2023年的朋友圈：五年后的你和现在变化有多大（转载）</title>
    <url>/2018/01/25/2023niandepengyouquanwunianhoudenihexianzaibianhuayouduodazhuanzai/</url>
    <content><![CDATA[<p>这两天我看到有个热点，让大家发一条自己五年后的朋友圈，你在哪，干嘛，发什么都可以，这个游戏之所以火，居然不是因为大家参与多，而是很多人想参与的时候发现脑子空白，然后转发给别人。 有天，我和一个姐姐聊天时，她就问我：你想过五年后要活成什么样没有？ 然后我说了一大堆形容词，什么笃定自持之类。 她含笑摇头：太虚。你想想，五年后，你应该穿什么衣服，什么发型，开的什么车，年收入多少，在哪里，做什么，和谁在一起。 我一怔。那一刻，我居然开始支支吾吾起来。 原来，每个人对自己都有期待，但是，我们少有人把自己安排妥当到这个地步。 这个姐姐告诉我，五年前，她给自己描绘了一个画面：她要穿驼色Max Mara大衣，简约长裤，拎黑色大包，黑发，淡妆，和合作伙伴在城市的某个角落喝一杯咖啡，谈公司规划。不为生活费而发愁，只为更好的理想而生活。 这简直和那天站在我面前的她不差分毫，我要感动哭了好么。 常说活成自己想要的样子？我们连那个自己长什么样都不知道。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gfkhPgqKTYUIur2WeWa96VmqFGC2PhPHL3diaPjL7h6j28WOfwFhD1HGQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 可五年来，她给了自己一个模子，然后生生逼着自己一步一步地嵌进了那个画框。 如果你期望那一天是瘦的，那么从现在的每一天开始，都要为那个自己少吃一点；如果你希望那个自己穿着最喜欢的那个牌子，那么现在，你就要为了买下那个牌子而赚钱。 <strong>每一天，都要朝那个样子走过去。更重要的是，每一天，都要为那个自己做点什么。</strong> 不得不说，这件事，对我是有震撼的，甚至逐渐改变了我做事的方式。 我以前，是一个多么不喜欢做计划的人。认为随遇而安才是美好姿态，任岁月推我走才是人间正道，可现在，我不想那样了。 今年起，我甚至拥有了人生第一本手账。 原来，一个人对自己的期望要做到这样细致，才不会一不留神就到回头望的地步，却发现自己从未改变过。 我才发现，以前的自己不敢做计划，是因为大部分时候都内心清楚，我会忘记那个目标；更重要的，我害怕失败，我懒，我不想为那个白日梦具体到某一天都要和自己死磕。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxMVibFVHhQBTRcD8CkuVjC9EtNT4hXVMhe1uT8jAicGyzXB4RNQncY34DyabgRfeDc4hfSpSI8DCgA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 国内最好的女演员之一周迅，她曾写过一篇文章《想想十年后的自己》： 十八岁之前，我是个不知道自己想要什么的人，那时我每天就在浙江艺术学校里跟着同学唱唱歌，跳跳舞。偶尔有导演来找我拍戏，我就会很兴奋地去拍，无论多小的角色。 如果没有老师跟我的那次谈话，那么也许直到今天，仍然没有人知道周迅是谁。 那是1993年5月的一天，教我专业课的赵老师突然找我谈话：“周迅，你能告诉我，你对于未来的打算吗？”我愣住了。 我不明白老师怎么突然问我如此严肃的问题，更不知道该怎么回答。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gfhm3SruiamHrwksepjuppricbOo3Uo1C7Xj5ibmgPWzh9KLHUv2no2kJNA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 老师问我：“现在的生活你满意吗？” 我摇摇头。 老师笑了：“不满意的话证明你还有救。你现在就想想，十年以后你会是什么样？” 老师的话音很轻，但是落在我心里却变得很沉重。我脑海里顿时开始风起云涌。 沉默许久，我看着老师的眼睛，忽然就很坚定地说：“我希望十年后的自己成为最好的女演员，同时可以发行一张属于自己的音乐专辑。” 老师问我：“你确定了吗？” 我慢慢地咬紧着嘴唇回答“Yes”，而且拉了很长的音。 老师接着说：“好，既然你确定了，我们就把这个目标倒着算回来。十年以后，你28岁，那时你是一个红透半边天的大明星，同时出了一张专辑。” “那么你27岁的时候，除了接拍各种名导演的戏以外，一定还要有一个完整的音乐作品，可以拿给很多很多的唱片公司听，对不对？” “25岁的时候，在演艺事业上你就要不断进行学习和思考。另外在音乐方面一定要有很棒的作品开始录音了。” “23岁就必须接受各种培训和训练，包括音乐上和肢体上的。” “20岁的时候就要开始作曲，作词。在演戏方面就要接拍大一点的角色了。” 老师的话说得很轻松，但是我却感到一阵恐惧。 这样推下来，我应该马上着手为自己的理想做准备了，可是我现在却什么都不会，什么都没想过，仍然为小丫鬟小舞女之类的角色沾沾自喜。我觉得有一种强大的压力忽然朝自己袭来。 老师平静地笑着说：“周迅，你是一棵好苗子，但是你对人生缺少规划，散漫而且混乱。我希望你能在空闲的时候，想想十年以后的自己，到底要过什么样的生活，到底要实现什么样的目标。如果你确定了目标，那么希望你从现在就开始做。” 一年以后，我从艺校毕业了，老师的话从那天开始一直刻在了我的心底：想想十年后的自己。是的，当我意识到这是一个问题的时候，我发现我整个人都觉醒了。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gf585lmqW3e8r3HsSic7NfQJ9DDcicS37MdYN9StSm0JwBeB5iaHS7icHnHA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 从学校毕业后，我忙于接拍各种各样的影视剧。 我始终记得，十年后我要做最成功的明星，所以对角色我开始很认真地筛选。后来我拍了《那时花开》，拍了《大明宫词》，我渐渐被大家接受，也慢慢地尝到了成功的快乐。 2003年4月，恰好是老师和我谈话后的十周年，我不知道这是偶然还是必然，我居然真的拥有了属于自己的第一张专辑——《夏天》。 翻翻周迅的获奖记录，也基本上就是从2003年以后开始发力的。2009年，她出演了《风声》，获得了金马奖的提名。在十年后的今天，依旧被当做经典和标杆被致敬。 <strong>我们每个人，能看到的，都是别人最后成功的结果。而很少能去看他们成功之前，到底用了什么样的方法，选了什么样的路径，让自己一路登顶。</strong> 在文末，周迅说：“其实你也和我一样。如果你能及时地问自己一句‘十年后我会怎么样’，你就会发现，你的人生在不知不觉间发生变化。时刻想着十年后的自己，你会朝着自己的梦想越走越近。” <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxMVibFVHhQBTRcD8CkuVjC9c4FfkUxenXc2kVvLNEiavgdttzUfVNiaMoCHLCWlwCcnun93A64DrhYA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 人与人的差距，真的只要五年，五年前那些看起来一无所有的人现在可能走在时代社会的前列，而五年前有些光鲜体面的工作可能会毁了你一生。 因为五年时间社会变化太快了。 五年前，曾经那么火的诺基亚被收购，用了不到五年，说完就完； 五年前，谁要是给我说“现金将变得可有可无，拿着手机出门，就能搞定一切”，我都会觉得Ta神经病； 五年前，我们还用着iphone4，现在9都快出来了…… 这个世界，你跟不上，立马就会被淘汰。 前段时间有个很火的新闻，河北唐山市的地方政府将地方的各个路桥收费站取消，结果这些收费站的人去找领导讨说法。 其中一位大姐说：我今年36岁了，我的青春都交给收费站了，我现在啥也不会，也没人喜欢我们，我也学不了什么东西了。 而且这位大姐说得振振有词，我却觉得很可怕，这位大姐可能一直还生活在五六年前被人羡慕的眼光中，可能从来没有想过五年后的自己是什么样，在这样的时代说出我学不会了，就意味着被这个时代抛弃了，那些一成不变的人，注定是一成不变地死去。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gfCuHuecBpRULPan8Zd7XfYwC7x7xoG8asufFHvlLL7K3liaiaTicbYxyGw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 网上看到一句话：长得不好看也没有好身世的人，要想在这个残酷的世界杀出一条血路，就只有一样武器了，那就是主动。 <strong>面包不会自己跑进厨房，爱情不会自己跑到你的床上，机会不会蹲守在你人生的路口，人民币更不可能自己钻进你的钱包。</strong> 你只有主动去找它们。畏缩，退缩，犹豫，等待，不可能等到任何东西，只是在等死而已。 生活就是在温水煮青蛙，如果这只青蛙一直觉得头上那片天空就是天空，如果这只青蛙幻想自己是王子却没有跳出这口井的勇气，可能一辈子就这么过完了，你甘心吗？ <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxMVibFVHhQBTRcD8CkuVjC9GONibSia8Js0m3EbT2VVsy0aAHbibw49ov8d6xYz5hMQadc8MDskRwqog/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 王尔德曾经说过，我们都深处泥潭，只是有人看到了星辰。可有些人，就是能挣脱泥潭，让自己生活在星辰中。 看看那些真正牛逼哄哄的女人们，在面临动荡和变化，又是怎么自我进化的？ 一开始，她们是部门最肯吃苦耐劳的那个人，早出晚归，给领导提包倒茶，给办公室扛纯净水修马桶，干一切别人不干的事。 后来，她们是办公室最肯动脑子的那一群人，她们会指出方案上明显的常识错误，她们试图理解同事为什么今天情绪那么不好，她们关注更好的理财方式，她们日夜写案子，在哺乳期背着奶上班，成为最辛苦的那一批职业女性—— 她们像杂草一样在这个城市野蛮生长，她们每一天都在为未来的某个自己做点什么，她们的狠劲，使得身边的伴侣也丝毫不敢松懈。因为稍不注意，他们就会失去她们。 终于有一天，好像人生开挂了。 每天手机响个不停，仿佛业务就那么自动找上门来。她开始有时间和朋友出去喝下午茶，顺便谈谈工作。钱，好像就不那么缺了。 她有钱有闲还有自由，成为那些老家女同学们眼里羡慕的人。属于她的稳定到来了——稳定的能力，带给她哪里都能找到饭吃的资源。 <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gfSOo7Grl6hlCOEI9MicpN7l2Yicozd2Xc2K8RIlXDurDxBod4t63r6woA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 以前我有个同事，之前辞职回家带娃，等孩子长大了再找工作时已经30岁了，很多同事都是95后。 她从前台做起，工作琐碎而繁杂，但是她就有本事把收发快递这种事，做得井井有条，公司从上到下都觉得她做事特别放心。 回家后，别人看美剧韩剧，她就看书，上辅导班学英语。终于有一次，有个国外的客户来电话，她在和人沟通时，恰好市场副总路过，发现她的口语好得不行，再加上之前工作的好口碑，直接调去做了副总助理，从此一路平步青云。 你有没有期待过，30岁时自己应该过着怎样的生活？ 还在租房吗，还在单身吗？还在做着这份让你看不到太多希望的工作吗？ 如果现在的生活，让你心生抱怨，几年之后你还要继续这样过吗？ 那些过得越来越好的人，真是他们幸运吗？还是我们在睡觉打游戏看韩剧的时候，他们在健身保养学英语？ 真的是他们能力更强吗？还是我们只把期待停留在脑子里，而他们却突破自己不停尝试第一次？ 其实也不用羡慕他们。 <strong>细想想，每一个突破了自己的人，多的就是一份尝试第一次的勇气。</strong> <img src="https://mmbiz.qpic.cn/mmbiz_png/JicllfJ31xoxJjCO4yRicz4kic1B2sxs0gfaaEgZ7mSPAS7v1dDqHlj0ZPo97nGcC7kDH4HIUbaJ33RqderVMicDaQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt=""> 那些瘦下来的人，第一次跑步也会累得像狗； 那些皮肤好的人，第一次睡美容觉也得割舍想要熬夜看的剧； 那些英语好的人，第一次开口对话也紧张得要死。     想想五年后的自己，该为她做点什么了。   转载自微信公众号：hugo</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>CSS-animation</title>
    <url>/2021/06/04/CSS-animation/</url>
    <content><![CDATA[<p>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</p>
<h2 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h2><p>指定要绑定到选择器的关键帧的名称</p>
<h2 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h2><p>动画指定需要多少秒或毫秒完成</p>
<h2 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h2><p>设置动画将如何完成一个周期</p>
<h2 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h2><p>设置动画在启动前的延迟间隔。</p>
<h2 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h2><p>定义动画的播放次数。</p>
<table>
<thead>
<tr>
<th>value</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>n</td>
<td>一个数字，定义应该播放多少次动画</td>
</tr>
<tr>
<td>infinite</td>
<td>指定动画应该播放无限次（永远）</td>
</tr>
</tbody></table>
<h2 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h2><p>指定是否应该轮流反向播放动画。</p>
<h2 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h2><p>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</p>
<h2 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h2><p>指定动画是否正在运行或已暂停。</p>
<h2 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0%</span>   &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="number">25%</span>  &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">    <span class="number">50%</span>  &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS-flex</title>
    <url>/2021/06/07/CSS-flex/</url>
    <content><![CDATA[<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>规定灵活项目的方向</p>
<p>flex-direction: row|row-reverse|column|column-reverse|initial|inherit;</p>
<table>
<thead>
<tr>
<th align="left">value</th>
<th align="left">description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">row</td>
<td align="left">默认值。灵活的项目将水平显示，正如一个行一样。</td>
</tr>
<tr>
<td align="left">row-reverse</td>
<td align="left">与 row 相同，但是以相反的顺序。</td>
</tr>
<tr>
<td align="left">column</td>
<td align="left">灵活的项目将垂直显示，正如一个列一样。</td>
</tr>
<tr>
<td align="left">column-reverse</td>
<td align="left">与 column 相同，但是以相反的顺序。</td>
</tr>
</tbody></table>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>规定flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</p>
<p>flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;</p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是 flex-direction 和 flex-wrap 属性的复合属性。默认值为row nowrap。</p>
<p>flex-flow: flex-direction flex-wrap|initial|inherit;</p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<p>justify-content: flex-start | flex-end | center | space-between | space-around;</p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义项目在交叉轴上如何对齐。</p>
<p>align-items: flex-start | flex-end | center | baseline | stretch;</p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>用于设置或检索弹性盒子的扩展比率。</p>
<p>flex-grow: number|initial|inherit;</p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</p>
<p>flex-shrink: number|initial|inherit;</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>用于设置或检索弹性盒伸缩基准值</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex: flex-grow flex-shrink flex-basis|auto|initial|inherit;</p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Laravel报错解决方案</title>
    <url>/2019/02/18/Laravel%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="Malformed-UTF-8-characters-possibly-incorrectly-encoded"><a href="#Malformed-UTF-8-characters-possibly-incorrectly-encoded" class="headerlink" title="Malformed UTF-8 characters, possibly incorrectly encoded"></a>Malformed UTF-8 characters, possibly incorrectly encoded</h2><p>使用百度地图的 echart 中的地图压缩算法对 geojson 进行压缩完成后，使用 larevel 返回，会报这个错误</p>
<p>参考文档<br><a href="https://www.e-learn.cn/content/wangluowenzhang/169226">https://www.e-learn.cn/content/wangluowenzhang/169226</a></p>
<h2 id="could-not-find-driver"><a href="#could-not-find-driver" class="headerlink" title="could not find driver"></a>could not find driver</h2><p>打开 php 的数据库扩展（如：pgsql ）</p>
]]></content>
      <tags>
        <tag>question</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下使用mysql</title>
    <url>/2019/07/13/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8mysql/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>去官网下载安装</li>
<li>使用 homebrew 安装</li>
</ol>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql.server start</span><br></pre></td></tr></table></figure>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>homebrew安装默认是没有密码的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac环境变量设置</title>
    <url>/2021/06/04/Mac%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export 变量名=变量值:变量值</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8123/</span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure>
<p>等号前后不能有空格<br>用冒号分隔多个值</p>
<h3 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unset 变量名</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> ALL_PROXY</span><br></pre></td></tr></table></figure>
<h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在原有 PATH 上增加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;</span><br></pre></td></tr></table></figure>
<h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看某一个，在变量名前加 $ 符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 查看所有</span></span><br><span class="line"><span class="built_in">env</span></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>Mac禁止向日葵开机启动</title>
    <url>/2021/06/16/Mac%E7%A6%81%E6%AD%A2%E5%90%91%E6%97%A5%E8%91%B5%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Library/LaunchAgents</span><br><span class="line">sudo vim com.oray.sunlogin.agent.plist</span><br><span class="line">sudo vim com.oray.sunlogin.startup.plist</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Library/LaunchDaemons</span><br><span class="line">sudo vim com.oray.sunlogin.helper.plist</span><br><span class="line">sudo vim com.oray.sunlogin.plist</span><br></pre></td></tr></table></figure>
<p>这里，是进入到系统的启动项文件存放目录，然后用vim直接修改向日葵的启动配置。</p>
<p>每次运行vim后，按i进入编辑模式，然后把<key>Disabled</key>从<false/>改为<true/>，这样就禁用了该启动项，然后按Esc退出编辑模式，继续按:wq保存并退出。</p>
<p>编辑好了这四个文件后，再重新启动机器，烦人的向日葵控制端终于消失了！</p>
<p>作者：smartshallot</p>
<p>链接：<a href="https://www.jianshu.com/p/a20efbcc61dd">https://www.jianshu.com/p/a20efbcc61dd</a></p>
<p>来源：简书</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>Python 虚拟环境</title>
    <url>/2020/07/13/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>pip install virtualenvwrapper-win</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>mkvirtualenv spider</p>
<p>mkvirtualenv -p (特定版本python) spider</p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>deactivate</p>
<h3 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h3><p>workon spider</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除目录就可以<br>windows下默认在 C:/Users/xxx/Envs</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>V8是如何执行一段JavaScript代码的</title>
    <url>/2022/07/25/V8%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5JavaScript%E4%BB%A3%E7%A0%81%E7%9A%84/</url>
    <content><![CDATA[<h2 id="代码如何执行"><a href="#代码如何执行" class="headerlink" title="代码如何执行"></a>代码如何执行</h2><p>使用高级语言编写的代码需要先编译为机器码（二进制代码）再执行</p>
<p>执行方式有如下两种</p>
<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><p>代码 =》 解析器 =》 中间代码 =》 编译器 =》 机器码 =》 执行结果</p>
<p>把代码一次性编译为机器码，然后执行</p>
<h3 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h3><p>代码 =》 解析器 =》 中间代码 =》 解释器 =》 执行结果</p>
<p>编译一行代码，执行一行代码，一边编译一边执行</p>
<h2 id="为何需要虚拟机"><a href="#为何需要虚拟机" class="headerlink" title="为何需要虚拟机"></a>为何需要虚拟机</h2><p>java 和 javascript 等语言需要虚拟机，是为了跨平台，抹平平台差异。</p>
<h2 id="为何需要中间代码"><a href="#为何需要中间代码" class="headerlink" title="为何需要中间代码"></a>为何需要中间代码</h2><p>中间代码一般为字节码</p>
<p>因为把源码编译为机器码占用太多空间，热代码需要缓存下来，避免重复编译。而使用字节码可以节省空间。</p>
<p>当然字节码还能提升代码启动速度、降低代码负责度</p>
<p><a href="https://time.geekbang.org/column/article/211682?cid=100048001">V8是如何执行一段JavaScript代码的？</a></p>
<p><a href="https://time.geekbang.org/column/article/224206#null">字节码（一）：V8为什么又重新引入字节码？</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>Apache 配置虚拟目录、虚拟主机</title>
    <url>/2017/09/14/apache-peizhixunimuluxunizhuji/</url>
    <content><![CDATA[<p>修改httpd.conf的配置 通过whereis httpd找到这个文件 我的在/etc/httpd/conf下 </p>
<h2 id="一、虚拟目录"><a href="#一、虚拟目录" class="headerlink" title="一、虚拟目录"></a>一、虚拟目录</h2><p>找到<IfModule>这块，加入下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 虚拟目录，访问D盘下面的web目录</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    # 设置缺省载入页面</span><br><span class="line">    DirectoryIndex index.html index.htm index.php</span><br><span class="line">    # 设置站点别名，别名与访问路径是相关的，取任何名称都可以（除特殊）</span><br><span class="line">    Alias /myweb &quot;D:/web&quot;</span><br><span class="line">    &lt;Directory D:/web&gt;</span><br><span class="line">    # 设置访问权限</span><br><span class="line">        Order allow,deny</span><br><span class="line">	Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>修改完成后重启Apache服务器 在浏览器中输入：<a href="http://localhost/myweb/xx.php">http://localhost/myweb/xx.php</a> 来访问 D:/web 下的文件 </p>
<h2 id="二、虚拟主机"><a href="#二、虚拟主机" class="headerlink" title="二、虚拟主机"></a>二、虚拟主机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置我们自己的虚拟主机</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    #修改文档根路径</span><br><span class="line">    DocumentRoot &quot;D:/Program Files (x86)/myenv/apache2.2.25/htdocs&quot;</span><br><span class="line">    #主机名称</span><br><span class="line">    ServerName myvirtualhost.com</span><br><span class="line">    #欢迎页面</span><br><span class="line">    DirectoryIndex index.html</span><br><span class="line">    &lt;Directory &quot;D:/Program Files (x86)/myenv/apache2.2.25/htdocs&quot;&gt;</span><br><span class="line">	Options -Indexes FollowSymLinks</span><br><span class="line">	AllowOverride None</span><br><span class="line">	Order allow,deny</span><br><span class="line">	Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    #错误日志存放位置</span><br><span class="line">    ErrorLog &quot;logs/myvirtualhost.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/myvirtualhost.com-access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>版权声明：本文为CSDN博主「u010175124」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u010175124/article/details/18220495">https://blog.csdn.net/u010175124/article/details/18220495</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 配置虚拟主机三种方式</title>
    <url>/2017/09/28/apache-peizhixunizhujisanzhongfangshi/</url>
    <content><![CDATA[<p>一、基于IP 1. 假设服务器有个IP地址为192.168.1.10，使用ifconfig在同一个网络接口eth0上绑定3个IP：</p>
<p>[root@localhost root]# ifconfig eth0:1 192.168.1.11 [root@localhost root]# ifconfig eth0:2 192.168.1.12 [root@localhost root]# ifconfig eth0:3 192.168.1.13</p>
<p>2. 修改hosts文件，添加三个域名与之一一对应：</p>
<p>192.168.1.11   <a href="http://www.test1.com">www.test1.com</a> 192.168.1.12   <a href="http://www.test2.com">www.test2.com</a> 192.168.1.13   <a href="http://www.test3.com">www.test3.com</a></p>
<p>3. 建立虚拟主机存放网页的根目录，如在/www目录下建立test1、test2、test3文件夹，其中分别存放1.html、2.html、3.html</p>
<p>/www/test1/1.html /www/test2/2.html /www/test3/3.html</p>
<p>4. 在httpd.conf中将附加配置文件httpd-vhosts.conf包含进来，接着在httpd-vhosts.conf中写入如下配置：  </p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>&lt;VirtualHost 192.168.1.11:80&gt; ServerName <a href="http://www.test1.com">www.test1.com</a> DocumentRoot /www/test1/ &lt;Directory “/www/test1”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow From All </Directory> </VirtualHost> &lt;VirtualHost 192.168.1.12:80&gt; ServerName <a href="http://www.test1.com">www.test1.com</a> DocumentRoot /www/test2/ &lt;Directory “/www/test2”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow From All </Directory> </VirtualHost> &lt;VirtualHost 192.168.1.13:80&gt; ServerName <a href="http://www.test1.com">www.test1.com</a> DocumentRoot /www/test3/ &lt;Directory “/www/test3”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow From All </Directory> </VirtualHost></p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>5. 大功告成，测试下每个虚拟主机，分别访问<a href="http://www.test1.com、www.test2.com、www.test3.com">www.test1.com、www.test2.com、www.test3.com</a>   二、基于主机名 1. 设置域名映射同一个IP，修改hosts：</p>
<p>192.168.1.10  <a href="http://www.test1.com">www.test1.com</a> 192.168.1.10  <a href="http://www.test2.com">www.test2.com</a> 192.168.1.10  <a href="http://www.test3.com">www.test3.com</a></p>
<p>2. 跟上面一样，建立虚拟主机存放网页的根目录</p>
<p>/www/test1/1.html /www/test2/2.html /www/test3/3.html</p>
<p>3. 在httpd.conf中将附加配置文件httpd-vhosts.conf包含进来，接着在httpd-vhosts.conf中写入如下配置：</p>
<p>　　为了使用基于域名的虚拟主机，必须指定服务器IP地址（和可能的端口）来使主机接受请求。可以用NameVirtualHost指令来进行配置。 如果服务器上所有的IP地址都会用到， 你可以用*作为NameVirtualHost的参数。在NameVirtualHost指令中指明IP地址并不会使服务器自动侦听那个IP地址。 这里设定的IP地址必须对应服务器上的一个网络接口。　　下一步就是为你建立的每个虚拟主机设定<VirtualHost>配置块，<VirtualHost>的参数与NameVirtualHost指令的参数是一样的。每个<VirtualHost>定义块中，至少都会有一个ServerName指令来指定伺服哪个主机和一个DocumentRoot指令来说明这个主机的内容存在于文件系统的什么地方。 如果在现有的web服务器上增加虚拟主机，必须也为现存的主机建造一个<VirtualHost>定义块。其中ServerName和DocumentRoot所包含的内容应该与全局的保持一致，且要放在配置文件的最前面，扮演默认主机的角色。</p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>NameVirtualHost *:80 &lt;VirtualHost *:80&gt;</p>
<p>ServerName * DocumentRoot /www/ </VirtualHost> &lt;VirtualHost *:80&gt; ServerName <a href="http://www.test1.com">www.test1.com</a> DocumentRoot /www/test1/ &lt;Directory “/www/test1”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow from all </Directory> </VirtualHost>  </p>
<p>&lt;VirtualHost *:80&gt; ServerName <a href="http://www.test2.com">www.test2.com</a> DocumentRoot /www/test2/ &lt;Directory “/www/test2”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow from all </Directory> </VirtualHost></p>
<p>&lt;VirtualHost *:80&gt; ServerName <a href="http://www.test3.com">www.test3.com</a> DocumentRoot /www/test3/ &lt;Directory “/www/test3”&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny Allow from all </Directory> </VirtualHost></p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 4. 大功告成，测试下每个虚拟主机，分别访问<a href="http://www.test1.com、www.test2.com、www.test3.com">www.test1.com、www.test2.com、www.test3.com</a>  </p>
<p>三、基于端口</p>
<ol>
<li>修改配置文件</li>
</ol>
<p>将原来的 Listen 80 改为 Listen 80 Listen 8080 2. 更改虚拟主机设置：</p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>&lt;VirtualHost 192.168.1.10:80&gt; DocumentRoot /var/www/test1/ ServerName <a href="http://www.test1.com">www.test1.com</a> </VirtualHost> &lt;VirtualHost 192.168.1.10:8080&gt; DocumentRoot /var/www/test2 ServerName <a href="http://www.test2.com">www.test2.com</a> </VirtualHost></p>
<p><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>转载至<a href="http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html">http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>apache 允许其他主机访问</title>
    <url>/2019/02/21/apache-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>1.允许其他主机访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    &lt;Directory &quot;F:/wamp/www/test&quot;&gt;</span><br><span class="line">        Options FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all      #允许来自所有主机的访问</span><br><span class="line">        Require all granted #2.4以上需要加这一句</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    ServerAdmin 826096331@qq.com</span><br><span class="line">    DocumentRoot &quot;F:/wamp/www/test&quot;</span><br><span class="line">    ServerName www.test.com</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">    ServerAlias test.com</span><br><span class="line">    ErrorLog &quot;logs/test.bin-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/test.bin-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>作者：u013032788<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/u013032788/article/details/51395622">https://blog.csdn.net/u013032788/article/details/51395622</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>apache配置mime</title>
    <url>/2019/08/05/apache%E9%85%8D%E7%BD%AEmime/</url>
    <content><![CDATA[<h1 id="配置文件里"><a href="#配置文件里" class="headerlink" title="配置文件里"></a>配置文件里</h1><p>AddType application/wasm .wasm</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>arcgis layer.when 和 view.when 以及 MapImageLayer</title>
    <url>/2019/02/17/arcgis-layer-when-%E5%92%8C-view-when/</url>
    <content><![CDATA[<p>MapImageLayer加载完之后需要view.goto(layer.fullExtent)才能显示</p>
<p>arcgis js 中 layer.when 和 view.when的执行顺序</p>
<p>当无baseMap时，layer.when先执行，view.when后执行，在view.when中执行view.goto，MapImageLayer正常显示</p>
<p>当有baseMap时，baseMap加载需要时间，加载完baseMap再加载layer，view.when先执行，layer.when后执行</p>
<p>当baseMap为天地图时，view.goto有问题，使用view.extent = layer.fullExtent; MapImageLayer有时候会不显示</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>axios发送application/x-www-form-urlencoded类型的请求</title>
    <url>/2020/05/21/axios%E5%8F%91%E9%80%81application-x-www-form-urlencoded%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>axios 默认发送 json<br>想要发送 application/x-www-form-urlencoded 类型的数据<br>可以使用 qs 这个 node module 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import qs from &#x27;qs&#x27;;</span><br><span class="line">const data = &#123; name:&#x27;xxx&#x27; , age:&#x27;25&#x27;&#125;;  // 我们传的是 js 对象</span><br><span class="line">const options = &#123;</span><br><span class="line">  method: &#x27;POST&#x27;,</span><br><span class="line">  headers: &#123; &#x27;content-type&#x27;: &#x27;application/x-www-form-urlencoded&#x27; &#125;,</span><br><span class="line">  data: qs.stringify(data),   // 用 qs 将js对象转换为字符串 &#x27;name=edward&amp;age=25&#x27;</span><br><span class="line">  url: &#x27;http://www.xxx.com&#x27;</span><br><span class="line">&#125;; </span><br><span class="line">axios(options);</span><br></pre></td></tr></table></figure>


<p>参考地址：<br><a href="https://www.cnblogs.com/edwardwzw/p/11694903.html">https://www.cnblogs.com/edwardwzw/p/11694903.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>axios跨域</title>
    <url>/2019/03/12/axios%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>参考文档<br><a href="https://www.cnblogs.com/wancheng7/p/8987694.html">https://www.cnblogs.com/wancheng7/p/8987694.html</a><br><a href="https://www.cnblogs.com/cap-rq/p/10149789.html">https://www.cnblogs.com/cap-rq/p/10149789.html</a></p>
]]></content>
      <tags>
        <tag>question</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>保时捷panamera行政加长版官方宣传片</title>
    <url>/2018/01/25/baoshijiepanameraguanfangxuanchuanpian/</url>
    <content><![CDATA[<h1 id="一、30秒配音版（中文字幕）"><a href="#一、30秒配音版（中文字幕）" class="headerlink" title="一、30秒配音版（中文字幕）"></a>一、30秒配音版（中文字幕）</h1><iframe height=498 width=610 src="//player.bilibili.com/player.html?aid=8792900&cid=14502121&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><a href="https://www.bilibili.com/video/av8792900/">https://www.bilibili.com/video/av8792900/</a></p>
<h1 id="二、1-16配音版（中文字幕）"><a href="#二、1-16配音版（中文字幕）" class="headerlink" title="二、1:16配音版（中文字幕）"></a>二、1:16配音版（中文字幕）</h1><p>保时捷panamera官方宣传片 courage changes everything(一往无前) 时长1:16配音版（中文字幕） </p>
<div style="width: 610px; ">
<iframe  src='http://player.youku.com/embed/XMTYxNjA0MTk2NA==' style='' frameborder=0 'allowfullscreen'></iframe>
</div>
http://player.youku.com/embed/XMTYxNjA0MTk2NA== 



<h1 id="三、2-11（配音版）"><a href="#三、2-11（配音版）" class="headerlink" title="三、2:11（配音版）"></a>三、2:11（配音版）</h1><p>保时捷全新Panamera Turbo &amp; Panamera 4S 时长 2:11（配音版） </p>
<h1 id="四、7-09秒（合集）"><a href="#四、7-09秒（合集）" class="headerlink" title="四、7:09秒（合集）"></a>四、7:09秒（合集）</h1><p>保时捷全新Panamera 合集 时长：7:09秒 </p>
<p><a href="https://www.bilibili.com/video/av5465368/">https://www.bilibili.com/video/av5465368/</a></p>
]]></content>
      <categories>
        <category>AD</category>
      </categories>
      <tags>
        <tag>AD</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>不错的物理科普书</title>
    <url>/2017/09/12/bucuodekepushu/</url>
    <content><![CDATA[<p>《宇宙的琴弦》作者：B·格林</p>
<p>《时间的形状：相对论史话》 作者：汪洁 </p>
<p>《上帝掷骰（tou）子吗：量子物理史话》 作者：曹天元   </p>
<p>《七堂极简物理课》作者：卡洛 罗韦力 这个讲的比较简单 </p>
<p>《猫、爱因斯坦和密码学：我也能看懂的量子通信》 作者：秦罡（gang）</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>buglist</title>
    <url>/2019/02/17/buglist/</url>
    <content><![CDATA[<p>1.windows10 word excel等的预览功能导致文件夹卡死<br>2.windows10点击右下角下图标，输入法切换时导致小图标抖动</p>
]]></content>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>草在结它的种子，风在摇它的叶子，我们站着，不说话，就十分美好</title>
    <url>/2017/11/30/caozaijietadezhongzifengzaiyaotadeyeziwomenzhanzhebushuohuajiushifenmeihao/</url>
    <content><![CDATA[<h1 id="《门前》——顾城"><a href="#《门前》——顾城" class="headerlink" title="《门前》——顾城"></a>《门前》——顾城</h1><p>我多么希望，有一个门口<br>早晨，阳光照在草上<br>我们站着<br>扶着自己的门扇<br>门很低，但太阳是明亮的<br>草在结它的种子<br>风在摇它的叶子<br>我们站着，不说话<br>就十分美好<br>有门，不用开开<br>是我们的，就十分美好<br>早晨，黑夜还要流浪<br>我们把六弦琴交给他<br>我们不走了<br>我们需要土地<br>需要永不毁灭的土地<br>我们要乘着它<br>度过一生<br>土地是粗糙的，有时狭隘<br>然而，它有历史<br>有一份天空，一份月亮<br>一份露水和早晨<br>我们爱土地<br>我们站着<br>用木鞋挖着泥土<br>门也晒热了<br>我们轻轻靠着，十分美好<br>墙后的草<br>不会再长大了<br>它只用指尖，触了触</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>centos 下chmod</title>
    <url>/2017/08/31/centos-chmod/</url>
    <content><![CDATA[<p>chmod也可以用数字来表示权限如 chmod 777 file<br>语法为：chmod abc file<br>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。</p>
<p>给文件夹及文件夹里面的所有文件加权限<br>chmod -R 777 folder</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>centos下压缩解压.zip文件</title>
    <url>/2017/08/31/centos-zip/</url>
    <content><![CDATA[<p>以下命令均在 /home 目录下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home <span class="comment">#进入/home目录</span></span><br></pre></td></tr></table></figure>


<p>1、把 /home 目录下面的 mydata 目录压缩为 mydata.zip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r mydata.zip mydata <span class="comment">#压缩mydata目录</span></span><br></pre></td></tr></table></figure>

<p>2、把 /home 目录下面的 mydata.zip 解压到 mydatabak 目录里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip mydata.zip -d mydatabak</span><br></pre></td></tr></table></figure>

<p>3、把 /home 目录下面的 abc 文件夹和 123.txt 压缩成为 abc123.zip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure>

<p>4、把 /home 目录下面的 wwwroot.zip 直接解压到 /home 目录里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip wwwroot.zip</span><br></pre></td></tr></table></figure>

<p>5、把 /home 目录下面的 abc12.zip、abc23.zip、abc34.zip 同时解压到 /home 目录里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip abc\*.zip</span><br></pre></td></tr></table></figure>

<p>6、查看把 /home 目录下面的 wwwroot.zip 里面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -v wwwroot.zip</span><br></pre></td></tr></table></figure>

<p>7、验证 /home 目录下面的 wwwroot.zip 是否完整</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -t wwwroot.zip</span><br></pre></td></tr></table></figure>

<p>8、把 /home 目录下面 wwwroot.zip 里面的所有文件解压到第一级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -j wwwroot.zip</span><br></pre></td></tr></table></figure>
<p>=====================================================<br>主要参数<br>-c：将解压缩的结果<br>-l：显示压缩文件内所包含的文件<br>-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换<br>-t：检查压缩文件是否正确<br>-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其它文件解压缩到目录中<br>-v：执行是时显示详细的信息<br>-z：仅显示压缩文件的备注文字<br>-a：对文本文件进行必要的字符转换<br>-b：不要对文本文件进行字符转换<br>-C：压缩文件中的文件名称区分大小写<br>-j：不处理压缩文件中原有的目录路径<br>-L：将压缩文件中的全部文件名改为小写<br>-M：将输出结果送到more程序处理<br>-n：解压缩时不要覆盖原有的文件<br>-o：不必先询问用户，unzip执行后覆盖原有文件<br>-P&lt;密码&gt;：使用zip的密码选项<br>-q：执行时不显示任何信息<br>-s：将文件名中的空白字符转换为底线字符<br>-V：保留VMS的文件版本信息<br>-X：解压缩时同时回存文件原来的UID/GID</p>
<p>原文链接<br><a href="https://www.cnblogs.com/inzens/articles/4968898.html">https://www.cnblogs.com/inzens/articles/4968898.html</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装ssl证书</title>
    <url>/2017/09/28/centosanzhuangsslzhengshu/</url>
    <content><![CDATA[<p>一为apache启用ssl，首先我们需要为Apache安装mod_ssl模块提供TLS/SSL功能： https是通过mod_ssl实现的，因此检查并安装mod_ssl：</p>
<p>1</p>
<p>[iyunv@Centos ~]# ls /etc/httpd/modules/ | grep “mod_ssl”   #默认没有安装mod_ssl # yum list all mod_ssl   #查看mod_ssl的安装包信息 yum install -y mod_ssl  #安装mod_ssl</p>
<p>检查mod_ssl是安装结果</p>
<p>1 2</p>
<p>rpm -qc mod_ssl /etc/httpd/conf.d/ssl.conf      #mod_ssl的配置文件存放位置</p>
<p>接下来我们修改httpd的SSL配置</p>
<p>1</p>
<p>cd /etc/httpd/conf.d #进入HTTPD的SSL配置目录 vim ssl.conf #编辑SSL配置文件</p>
<pre><code>转载至https://www.iyunv.com/thread-84322-1-1.html     总结： 1.安装mod_ssl模块 2.vim ssl.conf #编辑SSL配置文件 文件路径以及名称可能不一样 我的路径以及名称/etc/httpd/conf.d/ssl.conf</code></pre>]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>centos搭建ftp</title>
    <url>/2017/11/20/centosdajianftp/</url>
    <content><![CDATA[<p>目前Linux大部分部署的FTP服务器都是vsftpd，至于为什么，暂时没什么必要深究。 1.安装vsftpd</p>
<pre><code># yum check-update
# yum -y install vsftpd</code></pre><p>2.配置参数</p>
<pre><code># vi /etc/vsftpd/vsftpd.conf</code></pre><p>修改为如下参数</p>
<pre><code>anonymous_enable=NO
chroot_local_user=YES
allow_writeable_chroot=YES
pasv_enable=YES
pasv_min_port=40000
pasv_max_port=40100</code></pre><p>关于参数具体意思：</p>
<p><a href="http://blog.csdn.net/bluishglc/article/details/42398811">vsftpd 配置:chroot_local_user与chroot_list_enable详解</a></p>
<p>3.重启ftp</p>
<pre><code># systemctl restart vsftpd.service
# systemctl enable vsftpd.service</code></pre><p>4.修改防火墙配置</p>
<pre><code># firewall-cmd --permanent --add-service=ftp
# firewall-cmd --reload
# setsebool -P ftp_home_dir on</code></pre><p>5.为ftp创建一个用户test1（指定目录为/home/www，不允许远程登录shell）</p>
<pre><code># useradd -d /home/www -m test1 -s /sbin/nologin
# cd /home/www
# chmod -R 777 *</code></pre><p>6.为ftp用户设置一个密码</p>
<pre><code># passwd test1</code></pre><p>这样搭建的ftp默认只能按照主动方式连接，连接时请修改一下ftp设置 阿里云服务器记得开启21端口</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>centos下php安装扩展</title>
    <url>/2020/07/03/centos%E4%B8%8Bphp%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>centos7.5<br>使用宝塔安装php7.3<br>宝塔安装的 php 没有 fileinfo 扩展</p>
<h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><h4 id="下载扩展"><a href="#下载扩展" class="headerlink" title="下载扩展"></a>下载扩展</h4><p>可以单独下载扩展，也可以下载整个php</p>
<p>下载整个php：把版本换为你需要的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget -O php-7.3.19.tar.gz http://cn2.php.net/get/php-7.3.19.tar.gz/from/this/mirror</span><br></pre></td></tr></table></figure>

<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># tar -zxvf php-7.3.19.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="进入扩展目录"><a href="#进入扩展目录" class="headerlink" title="进入扩展目录"></a>进入扩展目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd php-7.3.19/ext/fileinfo/</span><br></pre></td></tr></table></figure>

<h4 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h4><ol>
<li>在扩展目录 (fileinfo) 下运行你安装的 php bin 目录下的 phpize </li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[fileinfo]# /www/server/php/73/bin/phpize</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[fileinfo]# ./configure --with-php-config=/www/server/php/73/bin/php-config</span><br></pre></td></tr></table></figure>
<h4 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="更改配置文件-php-ini"><a href="#更改配置文件-php-ini" class="headerlink" title="更改配置文件 php.ini"></a>更改配置文件 php.ini</h4><p>把 extension=fileinfo 前面的分号去掉<br>也可以使用命令，类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo &quot;extension = oauth.so&quot; &gt;&gt; /www/server/php/73/etc/php.ini</span><br></pre></td></tr></table></figure>
<h4 id="重载php"><a href="#重载php" class="headerlink" title="重载php"></a>重载php</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/init.d/php-fpm-73 reload</span><br></pre></td></tr></table></figure>
<h4 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># php -m|grep -i fileinfo</span><br></pre></td></tr></table></figure>


<p>参考文章1：<a href="https://blog.csdn.net/qivan/article/details/64439911">https://blog.csdn.net/qivan/article/details/64439911</a><br>参考文章2：<a href="https://www.php.cn/topic/bt/429078.html">https://www.php.cn/topic/bt/429078.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>centos关闭防火墙</title>
    <url>/2019/03/11/centos%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p>参考文档<br>防火墙设置<br>查看所有打开的端口： firewall-cmd –zone=public –list-ports<br>启动： systemctl start firewalld<br>关闭： systemctl stop firewalld<br>查看状态： systemctl status firewalld<br>开机禁用  ： systemctl disable firewalld<br>开机启用  ： systemctl enable firewalld</p>
<p>关闭selinux</p>
<p>#修改配置文件 vi /etc/selinux/config</p>
<p>#SELINUX=enforcing #注释掉</p>
<p>#SELINUXTYPE=targeted #注释掉</p>
<p>SELINUX=disabled #增加</p>
<p>:wq! #保存退出</p>
<p>#使配置立即生效 setenforce 0</p>
<p>iptables</p>
<p>参考文档<br><a href="https://www.cnblogs.com/moxiaoan/p/5683743.html">https://www.cnblogs.com/moxiaoan/p/5683743.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>centos服务自动启动</title>
    <url>/2019/12/24/centos%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><h2 id="service-命令"><a href="#service-命令" class="headerlink" title="service 命令"></a>service 命令</h2><p><code>service start/stop/status/restart servicename</code></p>
<h2 id="systemctl-命令"><a href="#systemctl-命令" class="headerlink" title="systemctl 命令"></a>systemctl 命令</h2><p><code>systemctl start/stop/status/restart servicename</code></p>
<h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><h2 id="chkconfig-命令"><a href="#chkconfig-命令" class="headerlink" title="chkconfig 命令"></a>chkconfig 命令</h2><p>添加到 chkconfig 列表<br><code>chkconfig --add servicename</code><br>开启/关闭<br><code>chkconfig servicename on/off</code><br>查询当前所有自动启动的服务<br><code>chkconfig --list</code><br>查询指定的服务<br><code>chkconfig --list servicename</code></p>
<h2 id="systemctl-命令-1"><a href="#systemctl-命令-1" class="headerlink" title="systemctl 命令"></a>systemctl 命令</h2><p><code>systemctl enable/disable servicename</code></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>钗头凤·红酥手</title>
    <url>/2017/09/19/chaitoufenghongsushou/</url>
    <content><![CDATA[<h1 id="钗头凤·红酥手"><a href="#钗头凤·红酥手" class="headerlink" title="钗头凤·红酥手"></a>钗头凤·红酥手</h1><p>【作者】陆游 【朝代】宋</p>
<p>红酥手。黄滕酒。满城春色宫墙柳。东风恶。欢情薄。一怀愁绪，几年离索。错错错。</p>
<p>春如旧。人空瘦。泪痕红浥鲛绡透。桃花落。闲池阁。山盟虽在，锦书难托。莫莫莫。</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>纯CSS绘制三角形（各种角度）</title>
    <url>/2018/01/10/chuncsshuizhisanjiaoxinggezhongjiaodu/</url>
    <content><![CDATA[<p>CSS三角形绘制方法，学会了这个，其它的也就简单。</p>
<p>我们的网页因为 CSS 而呈现千变万化的风格。这一看似简单的样式语言在使用中非常灵活，只要你发挥创意就能实现很多比人想象不到的效果。特别是随着 CSS3 的广泛使用，更多新奇的 CSS 作品涌现出来。 今天给大家带来 CSS 三角形绘制方法 <img src="http://files.jb51.net/file_images/article/201310/201310290941121.jpg?201392994443" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-up { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290941322.jpg?201392994757" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-down { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290941433.jpg?201392994835" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-left { width: 0; height: 0; border-top: 50px solid transparent; border-right: 100px solid red; border-bottom: 50px solid transparent; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290941534.jpg?20139299495" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-right { width: 0; height: 0; border-top: 50px solid transparent; border-left: 100px solid red; border-bottom: 50px solid transparent; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290942025.jpg?201392994926" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-topleft { width: 0; height: 0; border-top: 100px solid red; border-right: 100px solid transparent; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290942136.jpg?201392994948" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-topright { width: 0; height: 0; border-top: 100px solid red; border-left: 100px solid transparent; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290942227.jpg?20139299509" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-bottomleft { width: 0; height: 0; border-bottom: 100px solid red; border-right: 100px solid transparent; }</p>
<p><img src="http://files.jb51.net/file_images/article/201310/201310290942328.jpg?201392995028" alt=""></p>
<p>复制代码代码如下:</p>
<p>#triangle-bottomright { width: 0; height: 0; border-bottom: 100px solid red; border-left: 100px solid transparent; }</p>
<p>转载自<a href="http://www.jb51.net/article/42513.htm">http://www.jb51.net/article/42513.htm</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>composer的安装</title>
    <url>/2020/08/06/composer%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="下载安装脚本"><a href="#下载安装脚本" class="headerlink" title="下载安装脚本"></a>下载安装脚本</h4><ol>
<li>使用命令下载，并重命名为 composer-setup.php<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br></pre></td></tr></table></figure></li>
<li>浏览器下载，并重命名为 composer-setup.php<br>直接访问以下地址<br><a href="https://install.phpcomposer.com/installer">https://install.phpcomposer.com/installer</a></li>
</ol>
<h4 id="执行安装过程"><a href="#执行安装过程" class="headerlink" title="执行安装过程"></a>执行安装过程</h4><p>此步骤会生成 composer.phar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php composer-setup.php</span><br></pre></td></tr></table></figure>
<h4 id="删除安装脚本"><a href="#删除安装脚本" class="headerlink" title="删除安装脚本"></a>删除安装脚本</h4><p>可以手动删除，也可以使用以下命令删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -r &quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span><br></pre></td></tr></table></figure>

<h4 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h4><p>将上述步骤生成的 composer.phar 文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用 Composer 了！</p>
<h4 id="全局安装（windows"><a href="#全局安装（windows" class="headerlink" title="全局安装（windows)"></a>全局安装（windows)</h4><ol>
<li>将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。</li>
<li>在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。<br><code>@php &quot;%~dp0composer.phar&quot; %*</code></li>
<li>最后重新打开一个命令行窗口试一试执行 composer –version 看看是否正确输出版本号。</li>
</ol>
<p>参考<br><a href="https://pkg.phpcomposer.com/#how-to-install-composer">https://pkg.phpcomposer.com/#how-to-install-composer</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>从今天开始学习爱自己</title>
    <url>/2017/09/25/congjintiankaishixuexiaiziji/</url>
    <content><![CDATA[<p>2017年9月25日15:44:09</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2017/09/27/css3/</url>
    <content><![CDATA[<h1 id="一、边框"><a href="#一、边框" class="headerlink" title="一、边框"></a>一、边框</h1><p>border-radius:100%;<br>box-shadow:x偏移量，y偏移量，阴影模糊，阴影扩展，颜色，内外<br>border-image:url() 70 repeat; </p>
<h1 id="二、颜色相关"><a href="#二、颜色相关" class="headerlink" title="二、颜色相关"></a>二、颜色相关</h1><p>rgba    如：background:rgba(255,255,255,0.5);<br>颜色渐变（线性渐变（linear）、<strong>径向渐变(radial)</strong>） 线性渐变 linear-gradient(方向，颜色（两个至多个））<br>例如：background-image:linear-gradient(to right,red,orange,yellow,green,blue,indigo,violet); </p>
<h1 id="三、文字与字体"><a href="#三、文字与字体" class="headerlink" title="三、文字与字体"></a>三、文字与字体</h1><p>文本溢出text-overflow <strong>text-overflow</strong>只是用来说明文字溢出时用什么方式显示，要实现溢出时产生<strong>省略号</strong>的效果，还须定义<strong>强制文本在一行内显示</strong>（white-space:nowrap）及<strong>溢出内容为隐藏</strong>（overflow:hidden），只有这样才能实现<strong>溢出文本显示省略号</strong>的效果，代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: ellipsis; </span><br><span class="line"><span class="attribute">overflow</span>: hidden; </span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>
<p>多行之后显示省略号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; // 两行之后显示省略号</span><br></pre></td></tr></table></figure>

<p>同时，<strong>word-wrap</strong>也可以用来设置<strong>文本行为</strong>，当前行超过指定容器的边界时是否断开转行。 嵌入字体@font-face<br>例如 @font-face { font-family: “MOOC Font”; src: url(“<a href="http://www.imooc.com/Amaranth-BoldItalic.otf&quot;">http://www.imooc.com/Amaranth-BoldItalic.otf&quot;</a>); } 直接使用font-family: “MOOC Font”;   text-shadow: X-Offset Y-Offset blur color;</p>
<p>X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；</p>
<p>Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；</p>
<p>Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</p>
<p>Color：是指阴影的颜色，其可以使用rgba色。</p>
<h1 id="四、与背景相关的样式"><a href="#四、与背景相关的样式" class="headerlink" title="四、与背景相关的样式"></a>四、与背景相关的样式</h1><p>background-origin</p>
<p>设置元素背景图片的<strong>原始起始位置</strong>。 语法：</p>
<p>background-origin ： border-box | padding-box | content-box;</p>
<p>参数分别表示背景图片是从<strong>边框</strong>，还是<strong>内边距（默认值）</strong>，或者是<strong>内容区域</strong>开始显示。</p>
<p>background-clip</p>
<p>用来将背景图片做适当的<strong>裁剪</strong>以适应实际需要。 语法：</p>
<p>background-clip ： border-box | padding-box | content-box | no-clip</p>
<p>参数分别表示从<strong>边框、</strong>或<strong>内填充</strong>，或者<strong>内容区域</strong>向外裁剪背景。<strong>no-clip</strong>表示不裁切，和<strong>参数border-box</strong>显示同样的效果。<code>backgroud-clip</code>默认值为<strong>border-box</strong>。</p>
<p> background-size</p>
<p>设置背景图片的大小，以<strong>长度值</strong>或<strong>百分比</strong>显示，还可以通过<strong>cover</strong>和<strong>contain</strong>来对图片进行伸缩。 语法：</p>
<p>background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</p>
<p>取值说明： <strong>1、auto</strong>：默认值，不改变背景图片的原始高度和宽度； <strong>2、&lt;长度值&gt;</strong>：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来<strong>等比缩放</strong>； <strong>3、&lt;百分比&gt;</strong>：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上； <strong>4、cover</strong>：顾名思义为<strong>覆盖</strong>，即将背景图片等比缩放以<strong>填满整个容器</strong>； <strong>5、contain</strong>：容纳，即将背景图片等比缩放至<strong>某一边紧贴容器边缘为止</strong>。</p>
<p>multiple backgrounds</p>
<p>多重背景，也就是CSS2里<strong>background</strong>的属性外加<strong>origin</strong>、<strong>clip</strong>和<strong>size</strong>组成的新background的多次叠加，缩写时为用<strong>逗号</strong>隔开的每组值；用分解写法时，如果有多个背景图片，而其他属性只有一个（例如background-repeat只有一个），表明所有背景图片应用该属性值。 语法缩写如下：</p>
<p>background ： [background-color] | [background-image] | [background-position][/background-size] | [background-repeat] | [background-attachment] | [background-clip] | [background-origin],…</p>
<p><strong>注意：</strong></p>
<ol>
<li>用逗号隔开每组 background 的缩写值；</li>
<li>如果有 size 值，需要紧跟 position 并且用 “/“ 隔开；</li>
<li>如果有多个背景图片，而其他属性只有一个（例如 background-repeat 只有一个），表明所有背景图片应用该属性值。</li>
<li>background-color 只能设置一个。</li>
</ol>
<p>导航综合练习 .nav li{background:linear-gradient(to bottom,#dd2926,#a82724,#dd2926) no-repeat right / 1px 15px;}   </p>
<h1 id="五、CSS3选择器"><a href="#五、CSS3选择器" class="headerlink" title="五、CSS3选择器"></a>五、CSS3选择器</h1><h1 id="六、变形与动画"><a href="#六、变形与动画" class="headerlink" title="六、变形与动画"></a>六、变形与动画</h1><h1 id="七、布局样式相关"><a href="#七、布局样式相关" class="headerlink" title="七、布局样式相关"></a>七、布局样式相关</h1><p>盒子模型content-box  border-box</p>
<p>box-sizing: border-box;</p>
<p>box-sizing: content-box;</p>
<p><a href="https://www.imooc.com/article/18400">十天精通CSS3学后笔记</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>导航滚动悬浮</title>
    <url>/2017/11/08/daohanggundongxuanfu/</url>
    <content><![CDATA[<p>做两个导航，第二个隐藏 下拉到一定位置，显示第二个，position:fixed $(function(){ $(window).scroll(function () {$(window).scroll(function () { var top = $(document).scrollTop(); var m=$(“.nav”); if (top &gt; m.offset().top) { m.next().css(‘display’,’block’) }else{ m.next().css(‘display’,’none’) } }) }</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>deno学习笔记</title>
    <url>/2020/05/18/deno%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ol>
<li>原生支持 ts</li>
<li>原生支持 import</li>
<li>可以直接 import 一个线上包</li>
<li>原生支持 promise 不用写 async</li>
<li>安全性，需要授权</li>
</ol>
<iframe src="//player.bilibili.com/player.html?aid=795633468&bvid=BV14C4y1H76e&cid=192362111&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height=498 width=610> </iframe>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>自我价值感从何而来</title>
    <url>/2017/09/25/diziwojiazhi/</url>
    <content><![CDATA[<p>我们很容易认为，一个人自我价值感高，是因为这个人够优秀，即他有很多优点和成就。一个人自我价值感低，是因为他的缺点与不足。这是一个最常见的误解。其实，我们很容易发现，自己身边的一些人，尽管外在条件看起来很优秀，但他就是自卑。这是因为，自我价值感的高低，尽管与外在的条件有些关系，但最主要的，还是源自获得的爱的多少。不管一个人外在条件多么出色，只要他曾有严重的爱的缺失，那么他一定会严重自卑。相反，不管一个人看似多么平常，只要他曾有充分的爱，那么他就会非常自信。看上去，自卑似乎是因为某方面的缺陷或缺点，但实质上，这是对自己不能获得爱的忧虑。 并且，自我价值感的形成，<strong>有一个关键期，就是1岁前</strong>。瑞士心理学家维雷娜·卡斯特在她的力作《克服焦虑》中写道： 我们认为，对6个月内的婴儿就必须表现出爱和关注，这样婴儿才会感觉舒适并且得到很好的发展。如果孩子因太少受到关注而不安吵闹的时候，亲近对象总是不能适当地给以抚慰，那么就会削弱孩子最初的信心，而这种信心正是形成足够稳定的自我价值感的基础。 一般认为，在最初的这6个月内，如果对孩子没有必要的爱与关注，如果不向孩子表明他是一个值得爱的人，那么孩子对这个世界的信任就会形成不稳定的基本状态。心理学家马拉泰斯塔认为，稳定的关系能力——也包括足够稳定的自我价值感——主要取决于在1岁前能否与抚养者交换快乐的感受。 对于这个观点，有一个例证。美国历史上最有名的连环炸弹杀手泰迪·卡辛克斯基，6个月大时因病住院，期间没有亲人陪伴和抚慰。结果，他出院以后，就从一个快乐的孩子变成了一个自闭的孩子。在卡辛克斯基一家中，弟弟大卫成长为一个颇有同情心的男子，而智商超过160的哥哥泰迪却在孤独中越陷越深，最终成为一名连环炸弹杀手。 其实，不止是1岁前的孩子特别需要爱与关注。心理学的研究还发现，一个2～3岁的孩子，如果和最重要的抚养者有两个星期以上的分离，也会造成难以逆转的心理创伤。 虽然大多数父母都很爱自己的孩子，但是，盲目爱自己孩子的父母很多，能够正确爱自己孩子的父母，不多。 典型的失败的父母：迈克尔.杰克逊的父亲，小甜甜布兰妮的妈妈，在他们的培养下，孩子的事业是成功的，但人生是失败的，生活是一败涂地，毫无幸福感可言的。 </p>
<h1 id="四种不完全的爱："><a href="#四种不完全的爱：" class="headerlink" title="四种不完全的爱："></a>四种不完全的爱：</h1><h2 id="1、“有条件的爱”"><a href="#1、“有条件的爱”" class="headerlink" title="1、“有条件的爱”"></a><strong>1、“有条件的爱”</strong></h2><p>有的家长为孩子做了很多事，一心想要孩子出人头地，美其名为“要他将来有出息”，但是隐藏的潜意识可能是：“别让爸妈丢脸，你要为我争光，让我以你为荣。”类似的无意识的心声还有：“我要你实现我未曾实现的理想，达到我不曾达到的成就。我要你在这个世界上扬眉吐气，从而我也可以由你而扬眉吐气。”“不要让我失望。我为你牺牲了这么多。”“我爱你，而且也会一直爱你，只要你听话，按我说的去做。” </p>
<h2 id="2、“不完全接纳的爱”"><a href="#2、“不完全接纳的爱”" class="headerlink" title="2、“不完全接纳的爱”"></a><strong>2、“不完全接纳的爱”</strong></h2><p>孩子成功时，父母很高兴，很爱孩子；失败时，父母很失望，不停地数落、唠叨、甚至痛骂小孩。   </p>
<h2 id="3、“过度溺爱”"><a href="#3、“过度溺爱”" class="headerlink" title="3、“过度溺爱”"></a><strong>3、“过度溺爱”</strong></h2><p>从小，就照顾过度。长大了，还是包办很多事。孩子在家，只管玩，只管学习，其他事都不要他承担。这样的孩子，一方面很无能，自理能力、与人交往能力、社会独立性都很差，到社会上一看，才发现自己什么都不会做、不敢做，于是很自卑；另一方面，很自私，很冷漠，不会付出，不会爱别人。所以，常常看到一个家中，有一个能干强悍的妈妈，一个懦弱有气无力的儿子。 包办型溺爱的父母，他们其实剥夺了孩子自我探索的机会，不懂得尊重孩子的独立人格。那么，无论他们的安排多么完美，他们的孩子都会有一种感觉，他们好像不是为自己而活，学习也是为爸妈学习。所以，学习的主动性、克服困难的决心，都很弱。责任心也很差。因为，每个人只有为自己而活的时候，才是最有力量的。有的人，走路、做事都有气无力，没精打采，明显就没有生命力的样子。 </p>
<h2 id="4、“忽视孩子精神世界的爱”"><a href="#4、“忽视孩子精神世界的爱”" class="headerlink" title="4、“忽视孩子精神世界的爱”"></a><strong>4、“忽视孩子精神世界的爱”</strong></h2><p>父母看起来也很爱孩子，孩子要什么买什么，物质上很大方。这样的家庭，看起来也是很和睦的，因为父母可能都很朴实，善良，都是好人。但是，由于父母本身的精神世界就不够开阔宏大，只会朴实地过日子，所以在这样的家庭中，很少会交流内心的情绪，思想，很难给孩子一个精神指引，世界观、价值观的确立。孩子有什么精神世界的困扰，只有自己默默忍受，在黑暗中困难的摸索。由于在家庭中，交流模式就很封闭，所以这样的孩子，在外界交往中，封闭的可能性很大。如果内外交流都不畅，这个孩子的发展，就处于危险之中。如果，在同龄人中，还有很好的可以无话不谈的朋友，这个孩子，至少还可以从同龄人中，学习相关知识。 比较完美的父母应该是什么样子？比较完美的父母，是无条件接纳你的父母；比较完美的父母，是关注你的情绪，给你情绪上的支持和认同的父母；比较完美的父母，是会关注你的精神状态，能够给予精神指引的人。儿女敢于跟这样的父母分享大部分，甚至所有的事情；不担心父母会批评他，有条件的爱他，或是惩罚性的不爱他； 心理健康的孩子应该是什么样子？有安全感，自我接纳，不过分夸耀自己也不过分苛责自己。有自尊心，有进取心。 理智，现实，客观，能容忍生活中挫折的打击，无过度的幻想。有良好的人际关系，有爱人的能力和被爱的能力。有自己的个性，不过分寻求社会赞许。这样的孩子看起来，不退缩、不孤僻、不愁眉苦脸。这样的孩子，是自我价值感比较强的孩子。 </p>
<h1 id="自我价值感从何而来？"><a href="#自我价值感从何而来？" class="headerlink" title="自我价值感从何而来？"></a><strong>自我价值感从何而来？</strong></h1><p>1、人们往往从外在去寻找自我价值感。但，它不完全来自于外在的成功，根源在内心，来自于父母无条件的接纳。 正因为父母无条件的接纳，于是“无论我怎样表现，他们都爱我，我都是有价值的”观念因此而树立。长大以后，这个孩子不惧怕失败，敢于尝试。没有被完全接纳过的孩子，也会只接纳自己好的一面，不接纳自己不好的一面。这样的孩子，会有什么样的表现呢？不敢冒险，不敢大胆尝试。主要是因为自己只接纳成功，不接纳自己可能的失败。挑剔别人，容易看到别人的缺点。追求完美。成功时，快乐的时间很短；不成功时，情绪低落的时间很长。 </p>
<p>2、在情绪上没有得到足够关注的孩子，自我价值感是很低的。 从小，你的喜怒哀乐都没有人“共鸣”过，没有人和你一起快乐，陪伴你的悲伤，合理的释放你的愤怒，在精神上，你其实是孤独的。于是你会认为自己是没有太多价值的——情绪没人理会，当然没有价值！ 为什么会这样？小小的你并不知道这是大人的过错，你只会认为，自己不够好。于是在潜意识里形成这样的观念：“我不够好，我是不值得别人关注的，我是没有价值的”。 自己不够好的潜意识，会使我们有什么样的表现呢？在公众场合，不敢大声说话，不敢发表自己的意见，不能尽情地展示自己，畏首畏尾，怕出丑。在人际交往上很被动。很少主动、大声与别人打招呼，（万一别人不理会我，怎么办？）我们会先观察，如果别人对我微笑，我就回应微笑；如果别人不理我，我也不理他！      做事时，疑虑很多。不敢全情投入，不敢喜怒形于色，一边做一边内心疑虑着：“这样做，别人会不会接受？这样做，好不好？”所以，故意显得面无表情，显得很不在乎的样子，显得我根本没有把你、把你们放在心上。甚至，显得很冷漠很酷的样子。其实，内心波澜起伏，脆弱易伤。   </p>
<p>转载自百度经验：<a href="https://jingyan.baidu.com/article/0320e2c1ee2f6d1b86507b46.html">https://jingyan.baidu.com/article/0320e2c1ee2f6d1b86507b46.html</a></p>
]]></content>
      <categories>
        <category>psychology</category>
      </categories>
      <tags>
        <tag>低自我价值</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的基本使用</title>
    <url>/2020/07/03/docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h3><ol>
<li>docker pull 获取 image</li>
<li>docker build 创建 image</li>
<li>docker images 列出 images</li>
<li>docker tag  旧镜像名  新镜像名 </li>
<li>docker rmi 删除 image</li>
<li>docker commit 保存改动为新的 image</li>
<li>docker run 运行 container</li>
<li>docker inspect 容器名称 查看容器IP</li>
<li>docker ps 列出 containers</li>
<li>docker stop 停止 containers</li>
<li>docker rm 删除 container</li>
<li>docker cp 在 host 和 container 之间拷贝文件<br><img src="https://img.mukewang.com/5efdebd800014a8619201080.jpg" alt="docker 命令1"><br><img src="https://img.mukewang.com/5efdec250001eb8419201080.jpg" alt="docker 命令2"></li>
</ol>
<h3 id="Dockerfile-语法"><a href="#Dockerfile-语法" class="headerlink" title="Dockerfile 语法"></a>Dockerfile 语法</h3><p><img src="https://img.mukewang.com/5efdeeec00018f3e19201080.jpg" alt="Dockerfile 语法1"><br><img src="https://img.mukewang.com/5efdef1b0001ff5b19201080.jpg" alt="Dockerfile 语法2"></p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>bridge 网络<br>host 网络</p>
<p>参考：<a href="https://www.jb51.net/article/149173.htm">https://www.jb51.net/article/149173.htm</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>docker进入容器</title>
    <url>/2019/12/06/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>
<p>docker run 也可以</p>
<p>OPTIONS说明：</p>
<p>-d :分离模式: 在后台运行</p>
<p>-i :即使没有附加也保持STDIN 打开</p>
<p>-t :分配一个伪终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 1f2f04275f80 redis-cli</span><br></pre></td></tr></table></figure>

<p>退出容器<br>exit</p>
<p>参考<br><a href="https://blog.csdn.net/weixin_38982591/article/details/103989153">https://blog.csdn.net/weixin_38982591/article/details/103989153</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dom之scroll</title>
    <url>/2021/07/01/dom%E4%B9%8Bscroll/</url>
    <content><![CDATA[<p>参考：<br><a href="https://www.cnblogs.com/wangyihong/p/8056859.html">https://www.cnblogs.com/wangyihong/p/8056859.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>dreamlist</title>
    <url>/2019/02/18/dreamlist/</url>
    <content><![CDATA[<p>todolist</p>
<p>1.治疗鼻咽炎<br>2.治疗近视<br>3.脱毛</p>
<p>shoping list</p>
<p>1.vans<br>2.眼霜<br>3.mbp<br>4.revengexstorm</p>
]]></content>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>editorconfig 常用配置</title>
    <url>/2021/12/13/editorconfig-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">end_of_line = lf</span><br><span class="line">indent_size = 2</span><br><span class="line">indent_style = space</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>elegant</title>
    <url>/2019/02/18/elegant/</url>
    <content><![CDATA[<p>elegant</p>
<p>英 [ˈelɪgənt]   美 [ˈɛlɪɡənt]<br>adj.<br>（人或其举止）优美的;漂亮的;简炼的;简洁的</p>
<p>adj.<br>1<br>(of people or their behaviour 人或其举止) 优美的；文雅的<br>attractive and showing a good sense of style</p>
<p>同义词： stylish<br>She was tall and elegant.</p>
<p>她身材修长，优雅大方。</p>
<p>2<br>(of clothes, places and things 衣服、地方及物品) 漂亮雅致的；陈设讲究的；精美的<br>attractive and designed well</p>
<p>同义词： stylish<br>an elegant dress</p>
<p>高雅的连衣裙</p>
<p>an elegant room/restaurant</p>
<p>雅致的房间 / 餐厅</p>
<p>3<br>(of a plan or an idea 计划或想法) 简练的；简洁的；简明的<br>clever but simple</p>
<p>an elegant solution to the problem</p>
<p>解决这个问题的简要方法</p>
<p>来源于：百度翻译</p>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>english</tag>
      </tags>
  </entry>
  <entry>
    <title>emmet快捷键</title>
    <url>/2021/07/01/emmet%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="快速选择相同项目"><a href="#快速选择相同项目" class="headerlink" title="快速选择相同项目"></a>快速选择相同项目</h3><p>Ctrl + D</p>
<h3 id="回退一次选择"><a href="#回退一次选择" class="headerlink" title="回退一次选择"></a>回退一次选择</h3><p>Ctrl + U</p>
<h3 id="跳过选中的项目"><a href="#跳过选中的项目" class="headerlink" title="跳过选中的项目"></a>跳过选中的项目</h3><p>Ctrl + K</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>fiddler学习笔记</title>
    <url>/2020/05/22/fiddler%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-2-两种模式"><a href="#1-2-两种模式" class="headerlink" title="1.2 两种模式"></a>1.2 两种模式</h2><ol>
<li>streaming 流模式 （浏览器模式）实时的</li>
<li>buffering 缓冲模式 把所有的数据准备好之后才返回给客户端 可以控制最后的服务器响应</li>
</ol>
<p><img src="https://img4.mukewang.com/5ec780180001c60b12800720.jpg" alt="fiddler 使用场景"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.write()</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure>
<h2 id="1-3-使用场景"><a href="#1-3-使用场景" class="headerlink" title="1.3 使用场景"></a>1.3 使用场景</h2><p><img src="https://img2.mukewang.com/5ec781f00001b90b12800720.jpg" alt="fiddler 使用场景"></p>
<h2 id="2-1-工具条常用功能"><a href="#2-1-工具条常用功能" class="headerlink" title="2.1 工具条常用功能"></a>2.1 工具条常用功能</h2><ol>
<li>备注</li>
<li>重放</li>
<li>清除</li>
<li>调试</li>
<li>模式切换</li>
<li>解析</li>
<li>保持会话</li>
<li>过滤请求（只看chrome）</li>
</ol>
<h2 id="2-2-状态栏操作"><a href="#2-2-状态栏操作" class="headerlink" title="2.2 状态栏操作"></a>2.2 状态栏操作</h2><ol>
<li>capturing 是否工作</li>
<li>过滤会话</li>
<li>会话数量</li>
<li>会话详细地址</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>捕获HTTPS（参考教程）</li>
<li>捕获chrome浏览器，安装插件 SwithyOmega</li>
<li>不能捕获js，可能是缓存的问题，勾选禁用缓存</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20190627112123574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwNjg3MDI=,size_16,color_FFFFFF,t_70" alt="捕获js"></p>
<p>课程地址<br><a href="https://www.imooc.com/learn/37">https://www.imooc.com/learn/37</a><br>教程地址<br><a href="https://kb.cnblogs.com/page/130367/#introduce">https://kb.cnblogs.com/page/130367/#introduce</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>font-weight</title>
    <url>/2022/01/28/font-weight/</url>
    <content><![CDATA[<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>font-weight可取值：100～900和normal、bold、bolder、lighter。</p>
<p>字体所拥有的字重的数量实际上很少存在满足有9个字重刚好跟100～900的CSS字重一一对应的情况，通常字体拥有的字重数量为4至6个。</p>
<p>不必担心，起码400和700对应的字重至少是每种字体必备的，譬如常见的 Arial、Helvetica、Georgia等等，只有400(normal)和700(bold)。</p>
<h2 id="normal、bold"><a href="#normal、bold" class="headerlink" title="normal、bold"></a>normal、bold</h2><p>400 等同于 normal，而 700 等同于 bold。</p>
<h2 id="bolder、lighter"><a href="#bolder、lighter" class="headerlink" title="bolder、lighter"></a>bolder、lighter</h2><p>bolder、lighter表示其字重值是基于从其父元素继承而来的字重计算所得的，与normal、bold所代表的字重并无关系。  </p>
<p>参考<br>作者：人不中二枉少年<br>链接：<a href="https://www.jianshu.com/p/f9c6f9729fbb">https://www.jianshu.com/p/f9c6f9729fbb</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>FTP主动模式和被动模式的区别</title>
    <url>/2017/11/20/ftpzhudongmoshihebeidongmoshidequbie/</url>
    <content><![CDATA[<p><a href="http://www.cnblogs.com/xiaohh/p/4789813.html">http://www.cnblogs.com/xiaohh/p/4789813.html</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>给神经症者的几点自助建议（转载）</title>
    <url>/2018/04/03/geishenjingzhengzhedejidianzizhujianyi/</url>
    <content><![CDATA[<p>神经症不是最严重的心理问题，但却是很痛苦的。神经症患者虽然长期生活在痛苦中，却一般不会自杀，这和抑郁症不同。神经症者对自己有很高的期待，无法接受现实的自己，因此内心充满了矛盾和冲突，总是在和自己战斗。神经症者缺乏安全感和归属感，对爱的渴望无限“贪婪”，过分索取的结果是耗尽自己的支持系统，于是安全感和归属感更加缺失。神经症者过分关注自己的情绪，因此深受自己的负面情绪的影响，从而严重影响自己的社会功能，有时即使是很简单的事情也缺乏行动力。神经症者在人际交往中敏感脆弱，渴望关注又害怕关注，显得别扭，容易受挫而变得回避交往，表面显得冷漠孤僻，事实上非常渴望别人对其热情和亲密。神经症者活在自己的内心里，对外面的世界漠不关心，却又时时关注别人的反应，以为每个人都在关注自己。</p>
<p><img src="https://pic1.zhimg.com/80/v2-e938ce08e32314c761939eadd472e043_hd.jpg" alt=""></p>
<p>无法接受自己的完美主义者 神经症者都是完美主义者。他无法接受现实中那个有缺点的自己，无法与自己和平相处，他把自己当成敌人和对手，总是处于战斗状态。他的思维方式是非此即彼的，全或无，他想找到一种方法，一劳永逸地解决问题，却永远也找不到。他不允许自己犯错误，不能容忍一种有缺陷有遗憾的生活和人生。他的自我是分裂的，既自负又自卑。“他希望自己无能为力……但与此同时又……坚持认为自己是无所不能的。他倾向于感到自己无足轻重，一文不值，但如果别人不把他当天才看待，他又会勃然大怒。”（卡伦·霍妮《我们时代的神经症人格》） 神经症者内心有许多“不合理信念”。“我应该是一个重要人物”或者“我一定要成为一个重要人物”只是其中之一。他的理想和目标极其远大，但现实的脚步却远远跟不上。他本来是有许多潜力和天赋的，但由于他把大量的时间和精力花在与内心的交战上，这就严重限制和磨损了他的才能的发挥，也就限制了他的成就。尽管如此，由于他的偏执，他还是会在某些方面变得比许多其他人优秀。这也许构成了他自恋的资本和维持他的高自我要求的基础，但他对自己的期待实在太高，因此他永远无法找到自信。缺乏行动和成就的支撑，理想主义者就立即变成空想主义者。 因此，我们对神经症者的第一个建议就是：学会接受自己，无条件地接纳自我。不再把自我的价值建立在“表现”和“成就”的基础上。他总觉得：我表现不好，所以我没有价值；我不够优秀，所以我没有价值。必须纠正这些信念。“我在故我好”，只要你活着，你就是有价值的，你的价值跟你表现无关，跟你的成就无关。为什么要因为“有缺点、没成就、表现不好、不够优秀”就拒绝接受自己呢？如果你爱一个人，你会因为这些原因而拒绝接受TA吗？你不会，对吗？那样很“势利”，很“现实”，不是吗？那不是“真爱”，更不是“理想主义”，不是吗？那么，好好爱自己吧！从今天开始，无条件地接受自己，喜欢自己，爱自己，爱那个“有缺点，没成就，表现不好，不够优秀”的自己，这才是真正的“理想主义”。 在接受自己的基础上来改善自己、超越自己。接受自己，不等于安于现状，从此不必再努力。接受自己，是承认和接受事实，客观地评价和认识自己，不回避不幻想，不用一个完美的幻象来代替现实中的自己；接受自己，是从根本上重新定义自己的价值，不再把自我价值和自信建立在那些易变、脆弱的外界事物上。接受自己，你会活得坦然和自信，不再为自己的表现而焦虑，因为你的表现与你的价值无关。在这种心平气和的状态下，你的潜力可以得到更充分的发挥，你的时间和精力可以更多地花在自己的目标上，而不是与内心的战斗上，于是你更容易取得进步和成就。 我们对神经症者的第二个建议是：合理地期待自己，找到“理想自我”和“现实自我”之间的平衡点。他对自己的期待和要求是非常高的，这与他的客观现实形成严重的分裂状态，因此他长期生活在焦虑中，即使他取得了一些成就和进步，他也很难获得成功的喜悦，因此他的生活就鲜有快乐。自我实现是人类的正常需要，因此想取得成就甚至想成为“不平凡”的人，都是正常的想法，但如果偏执而极端地认为“我应该成为重要人物”、“我一定要成为重要人物”就错了。世界按照自己的规律在运转，这是不以人的意志为转移的，社会的规则是在竞争中自然形成的，无论从历史事实或是从数学中的“正态分布”规律来看，能够成为“重要人物”的人都是少之又少，而且成为“重要人物”是时代、才华、机遇等因素机缘巧合的结果，并非单靠个人努力可以实现，更不是你有这样的（哪怕是强烈的、偏执的甚至疯狂的）动机和期待就会变成现实。从这个意义上，那些脱离自己的能力和潜力而设定的所谓“远大理想”纯粹是浪费时间，而且让自己更加痛苦，反倒是设定一些合理的能够实现的目标更容易成功，也更能够增加自己的幸福感。 我们必须深刻认识这一点：世界是不以人的意志为转移的。你所有的愿望、梦想、理想、蓝图、战略都只是你脑袋里主观的“想法”，和“承诺”一样是完全的空头支票，并不是客观现实，而且越是“远大”的理想，就越没有意义。并不会因为你有比别人更远大的理想，你就真的取得比别人更大的成就（如果是这样那就真是“心想事成”了，那么大家都不要工作都来做梦好了），反倒是那些很少做梦脚踏实地的人，那些懂得“期望减半，努力加倍”的人能够走得更远。只要想一想就明白，我们真正能够把握的只有“今天”。 那么，什么样的理想和期待才是合适的呢？对此我们强烈建议：做最好的自己。把名人、伟人当榜样而不是“偶像”，学习他们的优秀品质但不要把他们的成就当成自己人生的标杆。事实上，无论我们把谁当标杆，终其一生我们能够努力成为的依然只是“最好的自己”。马斯洛对人类最高层次的需要“自我实现”是这样定义的：人倾向于充分地发挥他的潜能，不断地成为他能够成为的那个人。注意这里的用词：“能够成为的那个人”而不是“应该成为的那个人”，这意味着一个人的最高成就就是完全充分地发挥他的潜力，努力成为他能够成为的那个“最好的自己”，除此之外，再“远大”的理想都是空想。放弃“偶像”的成就标杆，把“做最好的自己”当做人生的信念和努力方向，你就能够设定出适合自己的理想和目标，能够不断超越自己。这样，理想才真正成为引领你的人生的灯塔，而不是成为压迫你的人生的一座大山。 我们对神经症者的第三个建议是：允许自己犯错误，不再做“完人”。李开复在《世界因你不同》里提到：谷歌是一个允许犯错误的公司。有一次，公司的一个副总裁犯了一个严重错误导致公司损失几百万美元，公司的最高领导竟然对她说：“我很高兴你犯了这个错误，因为我希望这个公司是个跑太快、做太多的公司，而不是一个做太少、太小心的公司。跑太快、做太多不免会犯错。如果不犯错，反而意味着我们没有冒足够的风险!” 任正非说过：“在人生的路上，我希望大家不要努力去做完人。一个人把自己一生的主要精力用于去改造缺点，等你改造完了对人类有什么贡献呢？”“没犯错就可以当干部吗？有些人没犯过一次错误，因为他一件事情都没做。” 人际敏感的社交焦虑者 神经症者是人际敏感的社交焦虑者。他的思维十分纤细，神经过敏，加上性格偏执，容易“受伤”，把别人无意或善意的言行理解为恶意。他渴望别人对他亲密和热情，害怕别人对他冷淡和冷落。他害怕别人“不理他”。他不喜欢主动和人打招呼，害怕别人不理他；他离开一个场合时不喜欢和人告别，害怕别人“没听见”。如果他发短信给别人而没得到回复，他会心情很难受，如果是找人帮忙的短信，那么他会更加受伤，并从此远离那个人。对别人的任何行为，他心里都会无法控制地反复回忆和揣摩，而且他是“内归因”的，当别人没有回复他时，他会想自己是不是做错了什么，别人才“不理他”，才对他“不好”。如果他在路上跟人打招呼而别人没有理他，他会认为那个人一定是不高兴，对他有意见，进而思考“他为什么不高兴”，是不是什么时候得罪他了。总之，他的神经是脆弱的，很容易受伤而导致情绪不良，这给他（以及周围的人）造成了沉重的负担，这导致他越来越讨厌和回避社交，也让其他人要小心翼翼与之相处，以免一不小心“伤害”到他。 神经症者是自我中心的。他被自己的感受轰炸得应付不过来，哪还有精力去体会别人的感受。“一律以自己的感受为出发点和归宿点，最终陷入作茧自缚。”他的生活是“情绪中心”的。他很看重自己的情绪，过分关注自己的感受，对现实的目标和问题反而有意无意地忽视。由于这种关注，更放大了情绪的影响，因此在很大程度上，他的行为是被情绪控制的，所以虽然他处处为自己考虑，“但是所作所为又都与自己的根本利益背道而驰。”神经过敏加上情绪中心，让他的情绪经常处于不良状态，加上他对自己的苛刻要求（“我怎么可以情绪不好呢？太不像话了！”），于是社交焦虑甚至恐惧就不可避免了。 神经症者在成长过程中缺乏关爱，没有建立好牢固的链接关系，所以他非常渴望爱，这种对爱的渴望是强烈的、贪婪的。这导致他不自觉地依赖那些对他好的人，而这种依赖通常给他人带来某些负担。他渴望被接纳，害怕被遗弃，为了获得接纳甚至不惜代价去讨好别人，这种依赖要么让人厌烦，要么被人利用。总之，他很难如愿以偿地获得他想要的那种全然的无限的爱。神经症者“的人格一直停留在儿童阶段，他们是没有长大的孩子，害怕遗弃，害怕分离……”他感觉父母亏欠了他，长大后他就通过“得病”来“讨债”，向父母讨债，向别人讨债，向世界讨债。 神经症者智力很好，喜欢阅读，喜欢自我分析，他似乎懂得很多道理，但总是走不出自己的怪圈。他无法真正改变的原因之一是因为他的问题能够带给他一些“好处”和“特权”：获得别人的关注、同情和关爱，放弃某些属于自己的责任等等。他的内心是有很多想法和欲望的，但他总要掩藏起来，让人觉得他是纯洁的，拼命压抑的结果就是导致内心更多的冲突和恐惧，而外在的行为给人感觉别扭。 在社交场合，神经症者既害怕关注又渴望关注。由于焦虑，他害怕别人关注他，但内心对爱是如此渴望，他又非常渴望关注，因此在不同程度上他是一个表演者。“自我虐待和自我摧残常常是他们的保留节目，他们借此来展示自己的伤口，借此来赢得人们的同情和怜悯”，“表演是他们获得关爱的唯一方式和手段，他们活得很累，可他们又不愿意改变，因为没有了表演他们什么都没有。” 总之，神经症者在社交中是不可爱和不受欢迎的。社交对他来说是痛苦的事情。“不认识到神经症中包含着这种令人瘫痪无力的绝望感，就不可能理解任何严重的神经症。……在所有那些古怪的虚荣、自负、要求和敌意后面，有一个正在受苦的人。他感到自己已被永远排除在一切使生活值得一过的欢乐和享受之外，他意识到即使他得到了他希望得到的一切，也不可能真正享受它。……一个象这样完全被关闭在幸福的大门之外，不可能获得任何欢乐的人，他要是不对那不属于他的世界充满仇恨，那他倒真的成了一个名副其实的天使了。”（卡伦·霍妮《我们时代的神经症人格》） 我们给神经症者的第四个建议是：学会独立，放弃依赖。要做到这点，我们需要审视和纠正自己头脑中的不合理信念：别人应该爱我，应该支持我、关心我、喜欢我，应该对我好。如果你这样想，你自然会处处遭到挫折，感到伤害，因为不可能每个人都对你好，都支持和喜欢你。正确的信念是：我希望别人对我好，但我不知道不可能每个人都对我好，因此，如果有人不喜欢我或忽视我，我也不会觉得“受伤”，因为别人没有义务对我好，没有别人的喜欢，我也一样能够活得很好，这没什么。哈哈说：“难道我不应该先把爱弥补回来，再学会独立和坚强么？”不，你应该先学会独立和坚强，学会依靠自己。记住，别人没有义务来爱你。 我们给神经症者的第五个建议是：以目标为中心，不要关注自己的情绪。把注意力集中在自己的目标上，集中在自己正在做的事情上，你就没有心思去想自己的问题，负面情绪就不容易产生，即使产生了也不容易扩散、放大，也就不容易影响和控制你的行为。不要太关注自己的感受，感受什么都不是，只是一种情绪。“凡正事不足者，必症事有余，凡正事足者，症事溜之大吉。” 森田疗法告诉我们：顺其自然，为所当为。“对于出现的情绪和症状不在乎，要着眼于自己的目的去做应该做的事情。‘对待不安应既来之则安之’，‘情绪要顺其自然’，仍然去做应该做的事情。而不是如果出现了不安就听凭这种不安去支配行动。自己的情绪好也罢，坏也罢，惟有行动要一如既往地坚持下去。” 神经症者始终缺乏安全感，因此他总在试图“控制”，通过控制来获得安全感。他一生都在追求金钱、权力和成就。“神经症病人往往倾向于服从他人的意志，但与此同时他又坚持认为世界应该适应自己。他倾向于感到自己受奴役，但与此同时又坚持认为他支配他人的权力应该是无庸质疑的。”（卡伦·霍妮《我们时代的神经症人格》）在这里，我们再一次看到了他内心的不合理信念：坚持认为世界应该适应自己。而这是不可能实现的，因此，他就总是活在焦虑中。 即使是自己，也并非完全能够控制。许又新教授在《“相对不随意”在心理治疗中的应用》中说：“在感到疲劳而坐在沙发里闭目养神时，常常免不了出现各种互不相关的杂乱思想……健康人听其自然，也就相安无事，有焦虑气质的人力图控制它，反而强烈地感到控制不住而烦躁。……可以说，控制不住是控制过分造成的结果。” 我们对神经症者的最后一个建议是：培养自己的兴趣，过充实的生活。如果你希望先彻底解决自己的“问题”然后再开始好好生活，那么你可能永远无法开始你想要的生活。学会忘记自己的“问题”，不再把“治好自己”当成生活中的首要事情，而是积极地投入到自己的目标和兴趣中去，通过小事积累自信，通过兴趣增加快乐。“像健康人一样地生活就能健康起来。神经质者总是希望先消除症状（改善情绪），然后再恢复到健康的生活，这样做永远不能有健康人的生活。若对情绪不予理会，首先像健康人一样去行动，这样，情绪自然而然就变成了健康的情绪。” 转载自：<a href="https://zhuanlan.zhihu.com/p/30724208">https://zhuanlan.zhihu.com/p/30724208</a></p>
]]></content>
      <categories>
        <category>psychology</category>
      </categories>
  </entry>
  <entry>
    <title>git commit 规范</title>
    <url>/2020/05/18/git-commit-%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="Commit-message格式"><a href="#Commit-message格式" class="headerlink" title="Commit message格式"></a>Commit message格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;: &lt;subject&gt;</span><br></pre></td></tr></table></figure>
<p>注意冒号后面有空格。</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>用于说明 commit 的类别，只允许使用下面7个标识。</p>
<p>feat：新功能（feature）<br>fix：修补bug<br>docs：文档（documentation）<br>style： 格式 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号<br>build:  构造工具的或者外部依赖的改动，例如webpack，npm<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>revert: 执行git revert打印的message<br>test：增加测试<br>perf: 提高性能的改动<br>ci: 与CI（持续集成服务）有关的改动<br>chore：构建过程或辅助工具的变动<br>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。</p>
<h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>subject是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。<br>————————————————<br>版权声明：本文为CSDN博主「行者向阳」的原创文章，遵循CC 4.0 BY-SA版权协议。<br>原文链接：<a href="https://blog.csdn.net/y491887095/java/article/details/80594043">https://blog.csdn.net/y491887095/java/article/details/80594043</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git如何忽略已经加入版本控制的文件</title>
    <url>/2019/07/20/git-ignore/</url>
    <content><![CDATA[<p>如果文件已经加入版本控制，再加入.gitignore文件也还是会提交到版本控制。<br>这时需要首先确保文件已经加入.gitignore文件<br>然后使用如下命令：</p>
<ol>
<li>文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure></li>
<li>文件夹<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached foldername</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>不同操作系统下回车符不同导致的git warning</title>
    <url>/2019/07/10/giterror/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>windows下git报错warning: LF will be replaced by CRLF in ***. The file will have its original line endings in your working directory.</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>windows下和linux（mac)下换行符不一致导致的</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf false  //禁用自动转换    </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitmoji</title>
    <url>/2022/01/27/gitmoji/</url>
    <content><![CDATA[<p>Emoji    Raw Emoji Code    Description<br>🎉    :tada:    Initial Commit<br>✨    :sparkles:    when introducing New Features<br>🐎    :racehorse:    when improving performance<br>⚡    :zap:    when introducing Backward-InCompatible Features, maybe with @CHANGED Comment Tag<br>🚀    :rocket:    Anything related to Deployments/DevOps<br>📚    :books:    when writing docs<br>🎨    :art:    when improving the format/structure of the code<br>📝  :memo: Add or update documentation.<br>📝    :pencil:    when performing minor changes/fixing the code or language<br>🐛    :bug:    when reporting a bug, with @FIXMEComment Tag<br>🔨    :hammer:    when refactoring code<br>🔧  :wrench: Add or update configuration files.<br>💄    :lipstick:    when improving UI/Cosmetic<br>💅  :nail_care: style<br>🍻  :beers: Write code drunkenly.<br>📰    :newspaper:    when creating a new file<br>🚑    :ambulance:    when fixing a bug<br>🐧    :penguin:    when fixing something on Linux<br>🍎    :apple:    when fixing something on Mac OS<br>🏁    :checkered_flag:    when fixing something on Windows<br>🔥    :fire:    when removing code or files, maybe with @CHANGED Comment Tag<br>🚜    :tractor:    when change file structure. Usually together with 🎨<br>☔    :umbrella:    when adding tests<br>🔬    :microscope:    when adding code coverage<br>💚    :green_heart:    when fixing the CI build<br>🔒    :lock:    when dealing with security<br>⬆️    :arrow_up:    when upgrading dependencies<br>⬇️    :arrow_down:    when downgrading dependencies<br>⏩    :fast_forward:    when forward-porting features from an older version/branch<br>⏪    :rewind:    when backporting features from a newer version/branch<br>👕    :shirt:    when removing linter/strict/deprecation warnings<br>♿    :wheelchair:    when improving accessibility<br>🌐    :globe_with_meridians:    when dealing with globalization/internationalization/i18n/g11n<br>🚧    :construction:    WIP(Work In Progress) Commits, maybe with @REVIEW Comment Tag<br>💎    :gem:    New Release<br>🥚    :egg:    New Release with Python egg<br>🎡    :ferris_wheel:    New Release with Python wheel package<br>🔖    :bookmark:    Version Tags<br>🔈    :speaker:    when Adding Logging<br>🔇    :mute:    when Reducing Logging<br>💡    :bulb:    New Idea, with @IDEA Comment Tag<br>❄️    :snowflake:    changing Configuration, Usually together with 🐧 or 🎀 or 🚀<br>🎀    :ribbon:    Customer requested application Customization, with @HACK Comment Tag<br>🐘    :elephant:    PostgreSQL Database specific (Migrations, Scripts, Extensions, …)<br>🐬    :dolphin:    MySQL Database specific (Migrations, Scripts, Extensions, …)<br>🍃    :leaves:    MongoDB Database specific (Migrations, Scripts, Extensions, …)<br>🏦    :bank:    Generic Database specific (Migrations, Scripts, Extensions, …)<br>🐳    :whale:    Docker Configuration<br>🤝    :handshake:    when Merge files<br>🍒    :cherries:    when Commit Arise from one or more Cherry-Pick Commit(s)  </p>
<p>参考<br>链接：<a href="https://www.jianshu.com/p/0bfdf5c41696">https://www.jianshu.com/p/0bfdf5c41696</a><br><a href="https://gitmoji.dev/">https://gitmoji.dev/</a><br><a href="https://github.com/slashsBin/styleguide-git-commit-message">https://github.com/slashsBin/styleguide-git-commit-message</a>  </p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>git报错The following untracked working tree files would be overwritten by checkout</title>
    <url>/2019/12/04/git%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>解决方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -d -fx</span><br></pre></td></tr></table></figure>
<p>删除 一些 没有 git add 的 文件；</p>
<p>git clean 参数 </p>
<pre><code>-n 显示将要删除的文件和目录；

-x -----删除忽略文件已经对git来说不识别的文件

-d -----删除未被添加到git的路径中的文件

-f -----强制运行</code></pre><p>转载自：<a href="https://blog.csdn.net/u013452337/article/details/81360210">https://blog.csdn.net/u013452337/article/details/81360210</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git的基本使用</title>
    <url>/2020/04/30/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="branch-与-tag-重名"><a href="#branch-与-tag-重名" class="headerlink" title="branch 与 tag 重名"></a>branch 与 tag 重名</h2><p>heads/v21.08<br>tags/v21.08</p>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&#x27;&#x27;</span></span><br><span class="line">git <span class="built_in">log</span> -p xxx</span><br></pre></td></tr></table></figure>
<h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote [-v | --verbose]</span><br><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class="line">git remote remove &lt;name&gt;</span><br><span class="line">git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​</span><br><span class="line">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class="line">git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…​</span><br><span class="line">git remote prune [-n | --dry-run] &lt;name&gt;…​</span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br><span class="line"></span><br><span class="line">常用</span><br><span class="line">git remote add origin git@xxx.com:/home/git/test.git</span><br></pre></td></tr></table></figure>

<h2 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure>

<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><h2 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h2><p>git rm</p>
<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>git mv<br>相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv README.md README</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git add README</span><br></pre></td></tr></table></figure>

<h2 id="git-gc"><a href="#git-gc" class="headerlink" title="git gc"></a>git gc</h2><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="拉取分支"><a href="#拉取分支" class="headerlink" title="拉取分支"></a>拉取分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">// 以下命令相当于 git pull upstream x.x.x</span><br><span class="line">git fetch upstream x.x.x</span><br><span class="line">git log -p FETCH_HEAD </span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch xxx</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git checkout xxx</span><br><span class="line"><span class="comment">// 创建并切换（远程）分支</span></span><br><span class="line">git checkout -b dev（本地分支名） origin/dev（远程分支名）</span><br><span class="line"><span class="comment">// 在此之前确保有远程分支，git fetch 一下</span></span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>git merge xxx</p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除本地（先切换到其他分支）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d xxx</span><br><span class="line">git branch -D xxx <span class="comment"># 强制删除</span></span><br></pre></td></tr></table></figure>
<p>删除远程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete xxx</span><br></pre></td></tr></table></figure>
<h2 id="暂存修改"><a href="#暂存修改" class="headerlink" title="暂存修改"></a>暂存修改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash pop</span><br><span class="line">git stash list</span><br><span class="line">git stash show</span><br></pre></td></tr></table></figure>
<h2 id="！放弃修改"><a href="#！放弃修改" class="headerlink" title="！放弃修改"></a>！放弃修改</h2><h3 id="untracked-files"><a href="#untracked-files" class="headerlink" title="untracked files"></a>untracked files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -fd</span><br></pre></td></tr></table></figure>
<h3 id="未-add，撤消对文件的修改"><a href="#未-add，撤消对文件的修改" class="headerlink" title="未 add，撤消对文件的修改"></a>未 add，撤消对文件的修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- file</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<h3 id="已经-add，取消暂存的文件"><a href="#已经-add，取消暂存的文件" class="headerlink" title="已经 add，取消暂存的文件"></a>已经 add，取消暂存的文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD file</span><br><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure>
<h3 id="已经-commit"><a href="#已经-commit" class="headerlink" title="已经 commit"></a>已经 commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset <span class="comment"># 默认为 mixed 模式</span></span><br><span class="line">git reset --soft</span><br><span class="line">git reset --hard HEAD^ <span class="comment"># 注意：此操作会丢弃修改</span></span><br><span class="line">git reset --hard commitid <span class="comment"># 注意：此操作会丢弃修改</span></span><br></pre></td></tr></table></figure>
<p>强制提交 reset 操作至远端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>
<p>However, you should avoid doing this if anyone else is working with your remote repository and has pulled your changes.</p>
<p>In that case, it would be better to <code>revert</code> the commits that you don’t want, then pushing as normal.</p>
<h2 id="修改已提交的commit"><a href="#修改已提交的commit" class="headerlink" title="修改已提交的commit"></a>修改已提交的commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line">git commit --amend --reset-author</span><br></pre></td></tr></table></figure>
<h2 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">git config user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><img src="https://upload-images.jianshu.io/upload_images/4428238-fcad08ebe26933a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="git reset from jianshu"></p>
<h3 id="不加参数"><a href="#不加参数" class="headerlink" title="不加参数"></a>不加参数</h3><p>保留工作目录，并清空暂存区</p>
<p>reset 如果不加参数，那么默认使用 <code>--mixed</code> 参数。它的行为是：保留工作目录，并且清空暂存区。也就是说，工作目录的修改、暂存区的内容以及由 reset 所导致的新的文件差异，都会被放进工作目录。简而言之，就是「把所有差异都混合（mixed）放在工作目录中」。</p>
<h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p>重置stage区和工作目录</p>
<h3 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h3><p>保留工作目录，并把重置 HEAD 所带来的新的差异放进暂存区</p>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>git tag</p>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag v0.0.1  </span><br><span class="line">git push origin v0.0.1</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -d v0.0.1  </span><br><span class="line">git push origin --delete v0.0.1</span><br><span class="line">git push origin --delete heads/v0.0.1 <span class="comment"># tag 和 branch 同名</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/098d85a58bf1">Git 修改已提交的commit注释</a></p>
<p><a href="https://www.jianshu.com/p/c2ec5f06cf1a">Git Reset 三种模式</a></p>
<p><a href="https://www.cnblogs.com/liyong888/p/9822410.html">git 删除本地分支和删除远程分支</a>  </p>
<p><a href="https://www.cnblogs.com/yorkyang/p/9147309.html">git 分支命名规范</a></p>
<p><a href="https://www.jianshu.com/p/f381af75ab85">git commit和issue关联</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git简直就是来自未来的产品</title>
    <url>/2018/05/21/git%E7%AE%80%E7%9B%B4%E5%B0%B1%E6%98%AF%E6%9D%A5%E8%87%AA%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%BA%A7%E5%93%81/</url>
    <content><![CDATA[<p>我第一次了解git的时候，就被这个产品的逻辑给震撼到了，只想说，世间怎么会有这么完美的产品，</p>
<p>其实注册github的时候我对git并不是很了解，直到我开始学习使用git，才知道git原来是linux之父Linus Torvalds为了帮助管理 Linux 内核开发的。</p>
<p>Linux和git两个伟大的产品，竟然是出自一人之手，不得不佩服大神Linus Torvalds</p>
<p>详细的学习了git的使用之后真的是为它的优雅而倾倒，惊为天人，顶礼膜拜。</p>
<p>git就是来自未来的产品</p>
<p>2019/02/18更新</p>
<p>只是各种冲突，问题，对小白用户不是很友好，不知使用客户端操作是不是好一点</p>
]]></content>
      <categories>
        <category>thought</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于linux服务器用php发送邮件</title>
    <url>/2017/09/12/guanyulinuxfuwuqiyongphpfasongyoujian/</url>
    <content><![CDATA[<p>sendmail<br>yum/apt-get install sendmail<br>开启fsockopen函数<br>服务器如何开启php的fsockopen函数？<br><a href="https://jingyan.baidu.com/article/09ea3eded1d8bcc0aede3920.html">https://jingyan.baidu.com/article/09ea3eded1d8bcc0aede3920.html</a><br>yum install openssl openssl-devel<br>端口：25 阿里云已经禁用25端口 请改为：465并把协议换成ssl<br>详情查看文章：<a href="https://blog.hellozwh.com/?post=282">https://blog.hellozwh.com/?post=282</a></p>
<h4 id="一、PHP-mail-函数"><a href="#一、PHP-mail-函数" class="headerlink" title="一、PHP mail() 函数"></a>一、PHP mail() 函数</h4><p>PHP mail() 函数用于从脚本中发送电子邮件。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">  $to = &quot;someone@example.com&quot;; </span><br><span class="line">  $subject = &quot;Test mail&quot;; </span><br><span class="line">  $message = &quot;Hello! This is a simple email message.&quot;; </span><br><span class="line">  $from = &quot;someonelse@example.com&quot;; </span><br><span class="line">  $headers = &quot;From: $from&quot;; </span><br><span class="line">  mail($to,$subject,$message,$headers); </span><br><span class="line">  echo &quot;Mail Sent.&quot;; </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure>
<h4 id="二、php利用smtp类轻松的发送电子邮件"><a href="#二、php利用smtp类轻松的发送电子邮件" class="headerlink" title="二、php利用smtp类轻松的发送电子邮件"></a>二、php利用smtp类轻松的发送电子邮件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">  require\_once &quot;Smtp.class.php&quot;; </span><br><span class="line">  //******************** 配置信息 ******************************** </span><br><span class="line">  $smtpserver = &quot;smtp.126.com&quot;;//SMTP服务器 </span><br><span class="line">  $smtpserverport =25;//SMTP服务器端口 </span><br><span class="line">  $smtpusermail = &quot;new2008oh@126.com&quot;;//SMTP服务器的用户邮箱 </span><br><span class="line">  $smtpemailto = $\_POST\[&#x27;toemail&#x27;\];//发送给谁 </span><br><span class="line">  $smtpuser = &quot;new2008oh&quot;;//SMTP服务器的用户帐号(或填写new2008oh@126.com，这项有些邮箱需要完整的) </span><br><span class="line">  $smtppass = &quot;您的邮箱密码&quot;;//SMTP服务器的用户密码 </span><br><span class="line">  $mailtitle = $\_POST\[&#x27;title&#x27;\];//邮件主题 </span><br><span class="line">  $mailcontent = &quot;&lt;h1&gt;&quot;.$\_POST\[&#x27;content&#x27;\].&quot;&lt;/h1&gt;&quot;;//邮件内容 </span><br><span class="line">  $mailtype = &quot;HTML&quot;;//邮件格式（HTML/TXT）,TXT为文本邮件 </span><br><span class="line">  //************************ 配置信息 **************************** </span><br><span class="line">  $smtp = new Smtp($smtpserver,$smtpserverport,true,$smtpuser,$smtppass);// true 表示是否使用身份验证</span><br><span class="line">  $smtp-&gt;debug = false;//是否显示发送的调试信息 </span><br><span class="line">  $state = $smtp-&gt;sendmail($smtpemailto, $smtpusermail, $mailtitle, $mailcontent, $mailtype); </span><br><span class="line">  echo &quot;&lt;div style=&#x27;width:300px; margin:36px auto;&#x27;&gt;&quot;; </span><br><span class="line">  if($state==&quot;&quot;)&#123; </span><br><span class="line">    echo &quot;对不起，邮件发送失败！请检查邮箱填写是否有误。&quot;; </span><br><span class="line">    echo &quot;&lt;a href=&#x27;index.html&#x27;&gt;点此返回&lt;/a&gt;&quot;; </span><br><span class="line">    exit(); </span><br><span class="line">  &#125; </span><br><span class="line">  echo &quot;恭喜！邮件发送成功！！&quot;; </span><br><span class="line">  echo &quot;&lt;a href=&#x27;index.html&#x27;&gt;点此返回&lt;/a&gt;&quot;; </span><br><span class="line">  echo &quot;&lt;/div&gt;&quot;; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>新版 husky 的使用</title>
    <url>/2021/06/30/husky%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>新版 husky 实践</p>
<ol>
<li><p>安装 husky  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D husky</span><br></pre></td></tr></table></figure></li>
<li><p>在 packgae.json 中添加 prepare 脚本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>prepare 脚本会在 npm install（不带参数）之后自动执行。也就是说当我们执行 npm install 安装完项目依赖后会执行 husky install 命令，该命令会创建 .husky/ 目录并指定该目录为 git hooks 所在的目录。</p>
</li>
<li><p>添加 git hooks，运行一下命令创建 git hooks</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/pre-commit &quot;npm run test&quot;</span><br></pre></td></tr></table></figure>
<p>运行完该命令后我们会看到.husky/目录下新增了一个名为pre-commit的shell脚本。也就是说在在执行git commit命令时会先执行pre-commit这个脚本。pre-commit脚本内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line">   </span><br><span class="line">npm run test</span><br></pre></td></tr></table></figure>
<p>可以看到该脚本的功能就是执行npm run test这个命令</p>
</li>
</ol>
<p>参考：<br><a href="https://zhuanlan.zhihu.com/p/366786798">https://zhuanlan.zhihu.com/p/366786798</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>idealist</title>
    <url>/2019/02/18/idealist/</url>
    <content><![CDATA[<ol>
<li>maplist</li>
</ol>
]]></content>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>imagine</title>
    <url>/2018/07/10/imagine-1/</url>
    <content><![CDATA[<p>imagine    英[ɪˈmædʒɪn]<br>美[ɪˈmædʒɪn]<br>vt.    想像; 想，设想; 料想，猜想; 误认为;<br>vi.    想象; 猜想，推测;<br>[例句]He could not imagine a more peaceful scene<br>他想象不出比这更祥和的景象。<br>[其他]    第三人称单数：imagines 现在分词：imagining 过去式：imagined 过去分词：imagined</p>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>english</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境变量配置</title>
    <url>/2019/08/10/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="window10下环境变量配置"><a href="#window10下环境变量配置" class="headerlink" title="window10下环境变量配置"></a>window10下环境变量配置</h1><h2 id="新建JAVA-HOME"><a href="#新建JAVA-HOME" class="headerlink" title="新建JAVA_HOME"></a>新建JAVA_HOME</h2><p>变量名：JAVA_HOME<br>变量值：电脑上JDK安装的绝对路径</p>
<h2 id="新建-修改-CLASSPATH-变量"><a href="#新建-修改-CLASSPATH-变量" class="headerlink" title="新建/修改 CLASSPATH 变量"></a>新建/修改 CLASSPATH 变量</h2><p>变量名：CLASSPATH<br>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p>
<h2 id="修改Path-变量"><a href="#修改Path-变量" class="headerlink" title="修改Path 变量"></a>修改Path 变量</h2><p>新建两条路径：</p>
<p>%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin</p>
<p>参考文档<br><a href="https://www.runoob.com/w3cnote/windows10-java-setup.html">https://www.runoob.com/w3cnote/windows10-java-setup.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>拒绝别人，你好意思吗？｜《可爱的诅咒：圣母型人格自助方法》</title>
    <url>/2018/01/26/jujuebierennihaoyisimakeaidezuzhoushengmuxingrengezizhufangfa/</url>
    <content><![CDATA[<p>圣母型人格的人不懂得拒绝别人，因此让自己非常的累，别人又得寸进尺的要求。 因此，学会拒绝别人，学会爱自己，才会让自己变得更好 本文分享一些处理的技巧和理念，欢迎阅读。</p>
<p><strong>别不好意思拒绝别人，因为那些好意思为难你的人，都不是什么好人。</strong> <strong>——网络流行语</strong> -1- 《爱自己的人自带光芒：圣母型人格心理自助手册》是英国注册心理医师雅基．马森根据临床的经验实践写给像我一样支持了别人，崩溃了自己的“可爱人物”。认真看了我上面故事的人，大约能够猜想我看到这本书时如遇知音和救世主的感激了。 这本书主要是从观念的厘清和教大家一些可操作的自我救助方法帮助受了诅咒的“可爱人物“走出崩溃的困境。 <strong>Q1、为什么怕拒绝别人呢？</strong> <strong>一种是“愤怒的逃避者“。</strong>他们不同程度地害怕冲突、别人的不喜欢和批评。像我害怕拒绝小学女同学的请求后，以后不再来往，我是典型的”愤怒逃避者“。 <strong>二是“认可的追求者“。</strong>为了寻求别人的喜欢、赞扬、谢意和感激而让自己变得随和、奉献、做好事，不拒绝别人。这种类型的人更加的隐秘，需要更高的觉察能力。 <strong>Q2、为何寻求认可呢？</strong> 心理学先驱卡尔．罗杰斯对评价源分内、外两种，取决于你是自己评判自己的行动、工作、成就及行为举止（内评价源）， 还是受他人评价的影响（外评价源）。宁可委屈自己也不拒绝别的人获取评价是通过外评价源，也就是为了获得别人好的评价，那么她就不敢拒绝别人。 <strong>Q3、为什么有些人把评价自己的权利给了别人呢？</strong> 这个是有历史原因，有人说心理学的论调就是六岁之前形成的观念影响人的一生，但依据雅基．马森的临床经验来看，观念的形成并不只是童年时期，还有相当一部分是在青少年时期。 错误的观念导致偏差的人生，及时地修正才能更好的接近幸福。 因此，雅基．马森给她的咨询对象三个强有力的“新观念“和三个可以自我救助的方法。 <strong>1、聆听身体的感受、及时地检视自己的身体。</strong> 身体会比我们的大脑诚实，可以帮助我们捕捉和识别各种情绪，对于为难自己的事会发出拒绝的信息。比如当一群人正在聊天时，你想去厕所小便 ，你会中断谈话然后去厕所吗？聆听身体的人会收到信号，依据身体的指示行事，但是害怕拒绝的人会忍，忍到谈话结束。 <strong>2、正视我们内心的暴徒——批判性思维。</strong> 这点对于有“一日三省吾身“”做到批评与自我批评“相结合的中国人来说，可能会认为批判性思维是好的。但是批判性思维就像电影里的反派人物，阻碍我们自由、清晰地表达自己。 如果细细地觉察，我们发现这些批判性思维发出的声音竟是来自过去那些对我们有重要意义的人，比如母亲、爷爷、老师等。 批判性的话通常是负面，比如我妈最喜欢说我”蠢得跟头猪一样“”养条狗还会叫你几声，养你没用“这类负面的信息会影响自信心，也会影响个人对事情的判断。因此，正视内心的暴徒，肯定自己，才能自我成长。 <strong>3、好好地爱自己。</strong> 这句话现在都被用滥了，好好地爱自己是指试着在内心做自己温和的父母，自我肯定，给自己独留时间、精力和资源，让自己成长得更好。 比如通过“一日三好“的日记，记下自己做的值得称赞的事情，将注意力转移至积极的事情上将大大地改善精神健康。 <strong>4、挑战让你不敢改变的恐惧。</strong> 恐惧之下的人是没有理性，只是知道怕，但不知道在怕什么。想要改变的话，找出一张纸，列出自己的恐惧清单，标注每件事的恐惧级别，然后从恐惧级别低的事情开始改变。 比如网购时害怕退货被拒绝，恐惧级别是3，那么你可以尝试退掉不想要的东西，看看是否和自己预想的情景一模一样。通过逐级地挑战自己的恐惧，慢慢地就会发现自己没有那么害怕了。 这个方法的好处是让莫名的恐惧有了级别，自己也有战胜恐惧的方法。 <strong>5、高级行为实验：敢于让别人失望。</strong> 对于自己不太熟悉的人的聚会或活动和自己不喜欢的活动时，勇敢地拒绝吧。不要去猜测和预设别人的态度，因为你不是她。 不要担心别人会失望，即使失望，因为你不需要为他人的情绪负责。 让人失望和辜负别人是不一样的，让人失望是你的精力有限，辜负别人则是你有意让人失望了。 <strong>6、BEAR法——呼吸、赞扬、接受、尊重。</strong> 这一招主要是应对突如其来的恐惧感，指导你缓和令人恐惧的人的情绪，使他们产生安全感，而你自己不会再感到他们的攻击性。 比如在一些平台上写作，有人留言攻击你写得烂，这个如果让你感到恐惧的话，那么你试试BRAR法：当你恐惧时，深呼吸让自己平静下来（呼吸），然后回复留言：谢谢你的关注和建议（赞扬），你花了时间和心思阅读我的文章，我表示很感激（接受），但是写作是私人的事，我会坚持这样的写作，直到有一天我自己愿意改变（尊重自己的意愿）。“ 作者雅基．马森会写这样的书，原因之一她也是一位受了诅咒的“可爱人物”，她去寻找督导师的帮助，也在治疗的过程中帮助各种不同的“可爱人物”。 目的并不是阻止人们对世界表达善意。而是鼓励像我一样过度付出而委屈，过度卑微而不敢拒绝的人为自己争取更多的时间和自由，更多的主动权以及更精彩的人生。 文/灵林玖玖</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>laravel学习笔记</title>
    <url>/2020/08/23/laravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h3><p>php artisan make:migration create_tasks_table<br>php artisan migrate</p>
<h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><p>php artisan make:model User</p>
<h3 id="contorller"><a href="#contorller" class="headerlink" title="contorller"></a>contorller</h3><p>php artisan make:controller UsersContorller –resource</p>
<h3 id="快速创建软链接"><a href="#快速创建软链接" class="headerlink" title="快速创建软链接"></a>快速创建软链接</h3><p>php artisan storage:link</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>learn VIM</title>
    <url>/2021/11/29/learnVIM/</url>
    <content><![CDATA[<h2 id="第一级-–-存活"><a href="#第一级-–-存活" class="headerlink" title="第一级 – 存活"></a>第一级 – 存活</h2><blockquote>
<ul>
<li>i → Insert 模式，按 ESC 回到 Normal 模式.</li>
<li>x → 删当前光标所在的一个字符。</li>
<li>:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</li>
<li>dd → 删除当前行，并把删除的行存到剪贴板里</li>
<li>p → 粘贴剪贴板</li>
</ul>
<p>推荐:</p>
<ul>
<li>hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→).<br>注: j 就像下箭头。</li>
<li>:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（陈皓注：退出帮助需要输入:q）</li>
</ul>
</blockquote>
<h2 id="第二级-–-感觉良好"><a href="#第二级-–-感觉良好" class="headerlink" title="第二级 – 感觉良好"></a>第二级 – 感觉良好</h2><p>参考：<br><a href="https://coolshell.cn/articles/5426.html">https://coolshell.cn/articles/5426.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>超越自卑的活法live笔记</title>
    <url>/2017/08/29/live/</url>
    <content><![CDATA[<h2 id="1-自卑是人际排序的产物。"><a href="#1-自卑是人际排序的产物。" class="headerlink" title="1.自卑是人际排序的产物。"></a>1.自卑是人际排序的产物。</h2><p><img src="https://pic3.zhimg.com/v2-5e7494173cbbd7ec9c7a3f4435fdf352_b.jpg" alt="test"> 评价与被评价 努力被目标感驱动 努力被序列感驱动，对努力的模仿，被排序思维支配，追求优越感。   </p>
<h2 id="2-自卑是一种自我保护。"><a href="#2-自卑是一种自我保护。" class="headerlink" title="2.自卑是一种自我保护。"></a>2.自卑是一种自我保护。</h2><p>排序思维带来竞争，带来压力 用自卑来当借口避免竞争 潜意识也是你自己 因为自卑所以不想行动（被自卑支配） 因为不想行动所以自卑   如果不是自卑的人，你会做什么 我们自己是行动的主人 害怕行动带来的结果 自卑保护你受结果的伤害   </p>
<h2 id="3-如果我们不去行动，我们就会用别的方法来满足自己的自尊需要（自卑的防御机制）"><a href="#3-如果我们不去行动，我们就会用别的方法来满足自己的自尊需要（自卑的防御机制）" class="headerlink" title="3.如果我们不去行动，我们就会用别的方法来满足自己的自尊需要（自卑的防御机制）"></a>3.如果我们不去行动，我们就会用别的方法来满足自己的自尊需要（自卑的防御机制）</h2><p>用自卑的借口，满足自己的自尊 自卑让我们不行动 如果不是因为什么，我就会怎么样 计划就是编织的一个幻想</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>lock文件是如何保证依赖确定性的</title>
    <url>/2021/09/08/lock%E6%96%87%E4%BB%B6%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BE%9D%E8%B5%96%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>mac快捷键</title>
    <url>/2021/06/11/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><p>隐藏 H</p>
<p>关闭 W</p>
<p>最小化 M</p>
<p>全屏 command + control + F</p>
<p>浏览器全屏(窗口全屏的基础上) command + shift + F</p>
<p>vscode 全局搜索 command + shift + F</p>
<h3 id="显示隐藏文件、文件夹"><a href="#显示隐藏文件、文件夹" class="headerlink" title="显示隐藏文件、文件夹"></a>显示隐藏文件、文件夹</h3><p>点击空白处 然后 command + shift + 。</p>
<h3 id="截屏、录屏"><a href="#截屏、录屏" class="headerlink" title="截屏、录屏"></a>截屏、录屏</h3><p>command + shift + 5</p>
<h3 id="chrome-浏览器"><a href="#chrome-浏览器" class="headerlink" title="chrome 浏览器"></a>chrome 浏览器</h3><p>control + tab 切换到下一个标签<br>command + 数字键 切换到指定数字顺序的标签<br>command + option + ← 切换到左边的标签<br>command + option + → 切换到右边的标签  </p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>mariadb异常 mysqld: Out of memory Centos 创建swap分区解决(转载）</title>
    <url>/2018/05/10/mariadb%E5%BC%82%E5%B8%B8-mysqld-Out-of-memory-Centos-%E5%88%9B%E5%BB%BAswap%E5%88%86%E5%8C%BA%E8%A7%A3%E5%86%B3-%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    <content><![CDATA[<p>最近几天,<a href="http://www.yangshengliang.com/webserver" title="服务器">服务器</a>异常，常报500错误，数据库无法连接，网站不能访问。查看mariadb日志，打开： /var/log/mariadb/mariadb.log</p>
<pre class="crayon-plain-tag">160915&nbsp;19:44:22&nbsp;InnoDB:&nbsp;Fatal&nbsp;error:&nbsp;cannot&nbsp;allocate&nbsp;memory&nbsp;for&nbsp;the&nbsp;buffer&nbsp;pool
160915&nbsp;19:44:22&nbsp;[ERROR]&nbsp;Plugin&nbsp;'InnoDB'&nbsp;init&nbsp;function&nbsp;returned&nbsp;error.
160915&nbsp;19:44:22&nbsp;[ERROR]&nbsp;Plugin&nbsp;'InnoDB'&nbsp;registration&nbsp;as&nbsp;a&nbsp;STORAGE&nbsp;ENGINE&nbsp;failed.
160915&nbsp;19:44:22&nbsp;[ERROR]&nbsp;mysqld:&nbsp;Out&nbsp;of&nbsp;memory&nbsp;(Needed&nbsp;128917504&nbsp;bytes)
160915&nbsp;19:44:22&nbsp;[ERROR]&nbsp;mysqld:&nbsp;Out&nbsp;of&nbsp;memory&nbsp;(Needed&nbsp;96681984&nbsp;bytes)
160915&nbsp;19:44:22&nbsp;[ERROR]&nbsp;mysqld:&nbsp;Out&nbsp;of&nbsp;memory&nbsp;(Needed&nbsp;72499200&nbsp;bytes)</pre>

<p>是内存不够，购买是阿里云主机1G内存，不够用了,可以创建swap分区来解决。</p>
<p>创建4g swap分区</p>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`dd` `if``=``/dev/zero` `of=``/var/swap` `bs=1024 count=4194304 `</div>
<div class="line number2 index1 alt1">`mkswap ``/var/swap`</div>
</div>
</td>
</tr>
</tbody>
</table>

<p>激活swap分区</p>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`swapon ``/var/swap`</div>
</div>
</td>
</tr>
</tbody>
</table>

<p>设置自动挂载</p>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`vi` `/etc/fstab`</div>
<div class="line number2 index1 alt1">`/var/swap`               `swap                    swap    defaults        0 0`</div>
</div>
</td>
</tr>
</tbody>
</table>

<p>重启服务器</p>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`shutdown` `-r now`</div>
</div>
</td>
</tr>
</tbody>
</table>

<p>查看内存使用状态</p>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`free` `-m`</div>
</div>
</td>
</tr>
</tbody>
</table>
<table class="syntaxhighlighter bash" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2">`              ``total        used        ``free`      `shared  buff``/cache`   `available`</div>
<div class="line number2 index1 alt1">`Mem:            991         347         261          40         382         382`</div>
<div class="line number3 index2 alt2">`Swap:          4096           0        4096`</div>
</div>
</td>
</tr>
</tbody>
</table>

<p>创建swap分区成功，再没因内存不够而maridb自动关闭了。</p>
<div>

<p><strong>原文链接地址:</strong> <a href="https://www.yangshengliang.com/webserver/626.html">mariadb异常 mysqld: Out of memory Centos 创建swap分区解决</a></p>
</div>]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
  </entry>
  <entry>
    <title>mariadb支持远程访问</title>
    <url>/2019/03/11/mariadb%E6%94%AF%E6%8C%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>参考文档<a href="https://www.cnblogs.com/24la/p/mariadb-remoting-access.html">https://www.cnblogs.com/24la/p/mariadb-remoting-access.html</a></p>
<p>首先配置允许访问的用户，采用授权的方式给用户权限</p>
<p>1<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’IDENTIFIED BY ‘123456’ WITH GRANT OPTION;<br> 说明：root是登陆数据库的用户，123456是登陆数据库的密码，*就是意味着任何来源任何主机反正就是权限很大的样子。</p>
<p>最后配置好权限之后不应该忘记刷新使之生效</p>
<p>1<br>flush privileges;<br> 再次访问就可以了吧。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>miniclass.com.cn</title>
    <url>/2019/03/06/miniclass-com-cn/</url>
    <content><![CDATA[<h3 id="slogan"><a href="#slogan" class="headerlink" title="slogan"></a>slogan</h3><p>mini小课，每节课只有一个知识点</p>
<h4 id="广告文案"><a href="#广告文案" class="headerlink" title="广告文案"></a>广告文案</h4><ol>
<li>三人行，必有我师<br> 这次你是老师</li>
<li>衣服贵，包包贵，化妆品贵<br> 这节课却不收费</li>
<li>来北京多年 还没出人头地<br> 但我相信你 总有过人之处</li>
</ol>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 快速上手</title>
    <url>/2021/05/09/mongoDB/</url>
    <content><![CDATA[<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>默认端口 27017</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>
<p>指定端口 27027</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27027</span><br></pre></td></tr></table></figure>
<p>连接远程主机上的 MongoDB 实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo <span class="string">&quot;mongodb://mongodb0.example.com:28015&quot;</span></span><br><span class="line"></span><br><span class="line">mongo --host mongodb0.example.com:28015</span><br><span class="line"></span><br><span class="line">mongo --host mongodb0.example.com --port 28015</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quit()</span><br></pre></td></tr></table></figure>
<h3 id="列出数据库"><a href="#列出数据库" class="headerlink" title="列出数据库"></a>列出数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h3 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use &lt;database&gt;</span><br></pre></td></tr></table></figure>
<h3 id="列出数据表"><a href="#列出数据表" class="headerlink" title="列出数据表"></a>列出数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.&lt;collection&gt;.find()</span><br><span class="line">db.&lt;collection&gt;.find().count()</span><br><span class="line">db.&lt;collection&gt;.find().pretty()</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="osx"><a href="#osx" class="headerlink" title="osx"></a>osx</h4><p>安装完成后，我们可以把 MongoDB 的二进制命令文件目录（安装目录/bin）添加到 PATH 路径中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/mongodb/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork</span><br></pre></td></tr></table></figure>
<ul>
<li>–dbpath 设置数据存放目录</li>
<li>–logpath 设置日志存放目录</li>
<li>–fork 在后台运行<br>查看 mongod 服务是否启动：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure>
<a href="https://www.runoob.com/mongodb/mongodb-osx-install.html">OSX MongoDB</a><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4></li>
</ul>
<p>启动</p>
<ol>
<li>进入 bin 目录中执行 mongod.exe 文件 或 把 bin 目录添加到 path</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\mongodb\bin\mongod --dbpath c:\data\db</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>如果已存在 MongoDB 服务，可以使用 net 命令启动</p>
<pre><code class="bash">net start MongoDB</code></pre>
</li>
<li><p>服务面板启动</p>
</li>
</ol>
<p><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">Windows MongoDB</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>mysql配置用户密码</title>
    <url>/2017/09/19/mysqlpeizhiyonghumima/</url>
    <content><![CDATA[<p>当初次在机器上安装完Mysql时,你可以匿名进行访问数据库或者以不带口令的root身份进入数据库.另外如果你是一个管理员,你还要进行一些用户的建立及授权,这又涉及到设置密码的问题.下面我们就讨论一下如何设置密码: 首先我们应该知道Mysql数据库中的口令存储必须用password()函数加密它.因为在user表中是以加密形式存储口令,而不是作为纯文本.如果你没有加密,直接在数据库中执行以下语句:</p>
<p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql </span><br><span class="line">insert into user (host,user,password) values(&#x27;%&#x27;,&#x27;user_name&#x27;,&#x27;your password&#x27;); </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>相信结果不会让你满意.因为服务器比较的是加密的值,所以服务器连接一定失败.这里需要说明的是flush privileges;这条命令起到了重新加载授权表.你也可以在shell下直接用mysqladmin -u root reload或者mysqladmin -u root flush-privileges来实现重载授权表. 在Mysql环境下,你可以使用以下语句进行设置密码:</p>
<p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.insert into user(host,user,password) values(&#x27;%&#x27;,&#x27;user\_name&#x27;,password(&quot;your password&quot;); </span><br><span class="line">2.set password for user\_name = password(&quot;your password&quot;)</span><br></pre></td></tr></table></figure>
<p>以上两种方法都必须进行重载授权表. </p>
<p>当然你也可以在创建一个用户时直接设置密码,grant语句将为你自动加密口令.<br>如 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all on *.* to user_name@% identified by &quot;your password&quot;; </span><br></pre></td></tr></table></figure>
<p>另外你也可以在shell环境下用mysqladmin程序来设置密码<br>如 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password &quot;your password&quot; </span><br></pre></td></tr></table></figure>
<p>快点去试一下,没问题吧! </p>
<h2 id="mysql如何设置密码"><a href="#mysql如何设置密码" class="headerlink" title="mysql如何设置密码"></a>mysql如何设置密码</h2><p>有很多方法： </p>
<h3 id="1-用root-进入mysql后"><a href="#1-用root-进入mysql后" class="headerlink" title="1.用root 进入mysql后"></a>1.用root 进入mysql后</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;set password =password(&#x27;你的密码&#x27;); </span><br><span class="line">mysql&gt;flush privileges; </span><br></pre></td></tr></table></figure>
<h3 id="2-使用GRANT语句"><a href="#2-使用GRANT语句" class="headerlink" title="2.使用GRANT语句"></a>2.使用GRANT语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;grant all on *.* to &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的密码&#x27;with grant option ; </span><br><span class="line">mysql&gt;flush privileges; </span><br></pre></td></tr></table></figure>
<h3 id="3-进入mysql库修改user表"><a href="#3-进入mysql库修改user表" class="headerlink" title="3.进入mysql库修改user表"></a>3.进入mysql库修改user表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;use mysql; </span><br><span class="line">mysql&gt;update user set password=password(&#x27;你的密码&#x27;) where user=&#x27;root&#x27;; </span><br><span class="line">mysql&gt;flush privileges; </span><br></pre></td></tr></table></figure>
<p>作者 matthio   </p>
<p>转载至脚本之家：<a href="http://www.jb51.net/article/30867.htm">http://www.jb51.net/article/30867.htm</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql编码问题导致插入中文报错Incorrect string value:</title>
    <url>/2018/05/22/mysql%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%8A%A5%E9%94%99Incorrect-string-value/</url>
    <content><![CDATA[<p>设置数据库编码为中文</p>
<p>可能需要用到的命令</p>
<p>查看数据库编码方式的两个命令</p>
<p>1.status</p>
<p>2.show variables like &#8216;character%&#8217;;</p>
<p>+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-+</p>
<p>| Variable_name | Value |</p>
<p>+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-+</p>
<p>| character_set_client | latin1 |</p>
<p>| character_set_connection | latin1 |</p>
<p>| character_set_database | latin1 |</p>
<p>| character_set_filesystem | binary |</p>
<p>| character_set_results | latin1 |</p>
<p>| character_set_server | latin1 |</p>
<p>| character_set_system | utf8 |</p>
<p>| character_sets_dir | /usr/share/mysql/charsets/ |</p>
<p>设置编码的命令</p>
<ol>
<li>set names utf8 (设置客户端的编码格式，会给其中的三项设置为utf-8)</li>
</ol>
<p>2.分别给每项设置编码</p>
<p>set character_set_connection = &#8216;utf8&#8217;;</p>
<p>set character_set_results = &#8216;utf8&#8217;;</p>
<p>set character_set_client = &#8216;utf8&#8217;;</p>
<p>单独给服务端设置编码</p>
<p>set character_set_server = &#8216;utf8&#8217;;</p>
<p>给表设置编码</p>
<p>alter table books default character set &#8216;utf8&#8217;;</p>
<p>给数据库设置编码</p>
<p>alter database cAuth default character set &#8216;utf8&#8217;;</p>
<p>网上搜有说设置为gbk的，但是我觉得最好还是用utf8</p>
<p>如果以上方法都试过还不行，那就删除表重新建，再建表的时候加一句设置编码</p>
<p>create table books(</p>
<p>id int not null auto_increment primary key,</p>
<p>isbn varchar(20) not null,</p>
<p>openid varchar(50) not null,</p>
<p>title varchar(100) not null,</p>
<p>image varchar(150) ,</p>
<p>alt varchar(100) not null,</p>
<p>publisher varchar(50) not null,</p>
<p>summary varchar(1000) not null,</p>
<p>price varchar(100) ,</p>
<p>rate float,</p>
<p>tags varchar(100),</p>
<p>author VARCHAR(100)</p>
<p>)default character</p>
<p>set utf8;</p>
<p>我的重建表之后就可以了</p>
<p>另外</p>
<p>安装目录下找到 my.ini</p>
<p>default-character-set=utf8</p>
<p>我的文件里没搜到这个</p>
<p>&nbsp;</p>
<div>在设置了mysql的字符集之后还是会有很抱怨在console输入中文的时候还是会报错。这个主要是windows是中文的，中文系统dos的默认输入输出是gb2312编码，但是之前我们把client characterset设置成了utf8，然后mysql就将我们输入的gb2312的字符当作utf8来处理，然后就导致了错误。</div>
<div>一种解决方法是将client characterset设置成gb2312或者gbk，或者在使用中文前用命令set names gbk，这样能够暂时的让这个窗口正常接收中文字符。</div>]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置及使用</title>
    <url>/2021/07/04/nginx%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>401-7-4<br><img src="https://img.mukewang.com/szimg/5fa518a400014c8019201080.jpg" alt="nginx 配置"></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>nginx</p>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>nginx -s stop</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>nginx -s reload</p>
<h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t <span class="comment"># 可以查看配置文件所在路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 5000;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location = / &#123;</span><br><span class="line">            proxy_pass http://localhost:3000/;</span><br><span class="line">        &#125;</span><br><span class="line">        location /test &#123;</span><br><span class="line">            proxy_pass http://localhost:3000/test;</span><br><span class="line"></span><br><span class="line">            #   指定允许跨域的方法，*代表所有</span><br><span class="line">            add_header Access-Control-Allow-Methods *;</span><br><span class="line"></span><br><span class="line">            #   预检命令的缓存，如果不缓存每次会发送两次请求</span><br><span class="line">            add_header Access-Control-Max-Age 3600;</span><br><span class="line"></span><br><span class="line">            #   带cookie请求需要加上这个字段，并设置为true</span><br><span class="line">            add_header Access-Control-Allow-Credentials true;</span><br><span class="line"></span><br><span class="line">            #   表示允许这个域跨域调用（客户端发送请求的域名和端口） </span><br><span class="line">            #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号</span><br><span class="line">            add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line"></span><br><span class="line">            #   表示请求头的字段 动态获取</span><br><span class="line">            add_header Access-Control-Allow-Headers </span><br><span class="line">            $http_access_control_request_headers;</span><br><span class="line"></span><br><span class="line">            #   OPTIONS预检命令，预检命令通过时才发送请求</span><br><span class="line">            #   检查请求的类型是不是预检命令</span><br><span class="line">            if ($request_method = OPTIONS)&#123;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://www.cnblogs.com/PengfeiSong/p/12993446.html">https://www.cnblogs.com/PengfeiSong/p/12993446.html</a></p>
<h3 id="导入配置文件"><a href="#导入配置文件" class="headerlink" title="导入配置文件"></a>导入配置文件</h3><p><code>include servers/*;</code><br>相对于当前文件</p>
<h3 id="配置多-server"><a href="#配置多-server" class="headerlink" title="配置多 server"></a>配置多 server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name a.com;</span><br><span class="line">        location = / &#123;</span><br><span class="line">            proxy_pass http://localhost:3000/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name b.com;</span><br><span class="line">        location = / &#123;</span><br><span class="line">            proxy_pass http://localhost:8000/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>你和头等舱的距离，差的不只是钱（转载）</title>
    <url>/2018/01/25/nihetoudengcangdejulichadebuzhishiqianzhuanzai/</url>
    <content><![CDATA[<p>01</p>
<p>我家楼上一哥们特别好玩，他最近读了热门文章《阶层上升通道的大门即将关闭》后， 便经常开长辈们玩笑。 爷爷来玩，他就怼爷爷： “你当年干嘛去了？咋不参加红军？ 要是你当年参军，我家至于这样吗？” 爸爸来玩，他就怼爸爸： “你当年干嘛去了？咋不下海创业呢？” 要是当年你下海，我家至于这样吗？” 前几天，我在电梯里碰到他， 他感叹：“现在阶层固化，寒门再难出贵子了。” 寒门难以出贵子，这倒是事实。 北京大学副教授刘云杉做过统计： 80年代，北大学生三成出自寒门。 90年代，寒门比例开始逐渐下滑。 2000年后，寒门比例仅占一成多。 BBC纪录片《人生七年》证实了这一现象， 他们用49年跟踪了一群不同阶层的孩子， <strong>最后揭露了一个残酷事实：穷人的孩子绝大部分仍然是穷人，富人的孩子绝大部分仍然是富人，阶层在代际间得到了传承。</strong></p>
<p>02</p>
<p>为什么穷人无法摆脱贫穷呢？很多专家学者都在研究这个问题， 但都没有给出一个让人信服的答案。 直到十年前，美国经济学家穆来纳森找到心理学家沙菲尔：“我们一起研究这个问题吧！” 经过十年调查研究，他俩终于找到答案。 <strong>穷人无法摆脱贫穷的罪魁是——稀缺心态。</strong> 何谓稀缺心态？ 就是“越是稀缺什么，就越是在意什么”。 我家邻居王阿姨就是这样， 由于她家经济条件不太好， 所以她买菜特别喜欢折腾， 去小区门口新世纪超市一看： “生菜一斤要三块五，太贵。” 于是，她坐六站公交去沃尔玛， “更贵，四块钱一斤。” 于是，她又坐七站路去永辉， “三块钱一斤，太好了。” 她买了5斤，乐呵呵地回家了。 折腾半天，扣去车费，还倒亏5毛。 <strong>穆来纳森说：“人们的视野会因稀缺心态变得狭窄，形成管窥之见，即只能通过‘管子’的孔洞看清少量物体，而无视管外的一切。”</strong> <strong>也就是说，稀缺会俘获一个人的大脑。</strong></p>
<p>03</p>
<p><strong>穆来纳森和沙菲尔提出了“带宽”概念。**</strong>所谓带宽，就是指一个人心智的容量。** <strong>如果这个带宽老是被一种稀缺心态所塞满，</strong> <strong>就会影响一个人的认知能力和执行控制力。</strong> 印度克延比都蔬菜市场很是繁荣。 这里，生活着一群很穷的小商贩。 每天清晨，他们会向富人借1000卢比， 然后去进货，卖完可收回1100卢比， 而晚上，他们要还给富人1050卢布。 也就是说，他们一天的收入是50卢比。 其实，只要小贩不把这50卢比全花掉， 每天省下5卢比用于第二天进货。 由于复利效应，他们只需要50天， 就不用再去借这1000卢比的本钱了。 从此，他们收入就会节节攀升， 这样美好的结果，几乎是触手可及。 但是，没有一个小商贩这样做。 “他们天天就那样重复着，分出利息达九年之久。” <strong>穆来纳森说：“长期处于稀缺状态的穷人，会被稀缺心态消耗大量带宽，其判断力和认知能力会因过于关注眼前问题而大大降低，而没有多余带宽来考虑投资和长远发展事宜。”</strong> <strong>稀缺心态会严重影响认知判断能力，</strong> <strong>认知判断能力大幅下降会导致短视。</strong> <strong>也就是说，一个人穷着穷着，就会变傻。</strong></p>
<p>04</p>
<p>一位富人想帮一个穷人致富，那年冬天，就送了他一头牛： “好好用牛耕作，秋天就能脱贫了。” 穷人满怀希望开始奋斗。 可没过几天，牛要吃草，人要吃饭， 穷人的日子比以前过得更加艰难了。 穷人想：“不如把牛卖了，买几只羊，先杀一只救急，剩下的可以下小羊，小羊长大了拿去卖，可以赚更多的钱。” 穷人吃完一只羊，小羊没有生下来， 日子又艰难了，便忍不住又吃了一只。 穷人想：“这样下去不行，不如把羊卖了买鸡，鸡很快就会下蛋，鸡蛋一卖，日子可以好转。” 可等不到鸡下蛋，日子又艰难了， 于是，穷人又忍不住杀鸡吃。 杀到只剩一只鸡时，穷人想：“致富是无望了，不如把鸡卖了，打一壶酒，三杯下肚，万事不愁。” 春天，富人带着种子来到穷人家， 却发现牛没了，而穷人正在喝酒。 “活该受穷。”富人一跺脚走了。 <strong>穆来纳森说：“长期处于稀缺状态的穷人，会被稀缺心态消耗大量带宽，用来进行自我控制的心智资源就会很少，所以容易变得非常冲动。”</strong> <strong>稀缺心态会严重影响执行控制力，</strong> <strong>执行控制力大幅下降会导致冲动。</strong> <strong>一个人穷着穷着，就会变成冲动的傻子。</strong> <strong>穷人就是这样陷入穷的恶性循环的：</strong> <strong>稀缺金钱→注意力集中到钱上→大脑浮现各种与钱有关的事，变得冲动失去控制力→心智带宽减少→做出错误认知，做出错误决定→放大对于钱的稀缺心态→恶性循环。</strong></p>
<p>05</p>
<p>很多人喜欢这样说：“如果我有钱，我会比马云做得好。” “如果我有钱，绝对比王思聪厉害。” 其实，未必。 长期陷入恶性循环的穷人， 即便偶尔暴富，也会很快变成穷人。 美国国家经济研究局做过一个调查：最近20年来，欧美彩票头奖得主，5年之内，破产率达75%。 为什么会这样？ “因为他们虽然有钱了，但行事还是穷人思维。” 我有位朋友，创业发了， 买了别墅，把农村父母接了过来。 从此，我这朋友就头大起来。 “最热的天，爸妈也不会开空调。” “爸妈经常从外面捡一堆破烂回来。” “家里囤积着各种各样的垃圾袋。” ………… 尽管他家存款千万，但父母依然扔不掉穷人思维。 <strong>阶层固化，其实来源于思维的属性。</strong> <strong>你的思维，决定了你在什么阶层。</strong> <strong>穷不可怕，稀缺导致的穷人思维才可怕。</strong></p>
<p>06</p>
<p><strong>如何才能跳出稀缺导致的穷人思维呢？**</strong>第一个：把重要的事情强行拉入管道视野<strong>。 哈佛大学做过一个著名的人生影响跟踪调查， 对象是一群出身环境和智商都差不多的年轻人。 调查结果发现： 27％的人没有理想，生活没有目标。 60％的人理想模糊，生活目标模糊。 10％的人有理想，制定了短期规划。 3％的人有理想，制定了清晰的长期规划。 25年后，这群人的生活状况很有意思： 那3%的人，因为一直有规划地朝着人生理想迈进，所以最后几乎都成了社会顶尖成功人士。 那10％的人，因为不断实现短期目标，最后成了社会的中产，做了律师、工程师、企业主管等等。 那60％的人，生活在社会中下层，没什么特别成绩，就指望孩子将来有出息。 剩下27％的人，成了社会最底层的人，成天抱怨他人，抱怨社会。 **这个调查说明了什么——不同的人生规划，让每个人拉开了距离。</strong> <strong>所以，要跳出稀缺导致的穷人思维，就要强行把重要的事情拉入管道视野——制定清晰的人生规划，短期的长期的，然后一步一步去实现它。</strong> 贫穷的韩信为何能忍受胯下之辱？ 因为他有坚定不移的人生大理想。 正如苏轼所说：“匹夫见辱，拔剑而起，挺身而斗，此不足为勇也。天下有大勇者，卒然临之而不惊，无故加之而不怒，此其所挟持者甚大，而其志甚远也。”</p>
<p>07</p>
<p>专栏作家李刚讲过一件趣事：几年前，他老婆想买一套学区房。 他一算存款，连首付都不够。 于是建议：攒点钱再说吧！ 当然，最后胳膊没能拧过大腿， 老婆东挪西借，硬是把首付给付了。 结果才过两年，房价就翻了倍。 李刚高兴得不得了：“幸好买了。” 论理财能力，李刚远在老婆之上。 “我有十几年投资经验，再复杂的金融工具，我也一清二楚，而她连买个银行理财产品还要问人家保不保本。”李刚说。 但这件事，李刚一开始就陷入了穷人思维。 “我没有思考学区房是不是一个必须而且合理的目标，而是首先考虑钱够不够。” 这就是穷人思维和富人思维的区别： <strong>穷人思维的特点是量入为出，</strong> <strong>富人思维的特点是目标导向。</strong> 穷人思维买房，首先考虑：我存款有多少，月收入多少，再倒过来推算，自己该不该买房，买什么房。 富人思维买房，首先考虑：我要不要买房，想买什么房？然后再算，还差多少，怎么解决。 <strong>如何跳出稀缺导致的穷人思维？</strong> <strong>第二个：建立目标导向思维。</strong> 正如李刚所说：如果一个目标是合理的，就不能以“资源不足”为理由，去否定这个目标。 这是至关重要的一条做事原则。</p>
<p>08</p>
<p>青年作家李尚龙讲过一个故事：他刚上大学时，宿舍一同学特抠门。 有一次，李尚龙手机没电了， 便找这同学借电话打给家里。 打完，李尚龙把电话还他，转身出了宿舍。 哪知此同学追了出来：“给我五毛钱。” 李尚龙以为听错了：“什么？” 此同学非常认真地说：“你刚才打了两分钟，给我五毛钱。” 李尚龙翻了翻皮夹：“没零钱。” 此同学脸色有点不爽起来。 李尚龙说：“要不这样，午餐我请。” 此同学脸色舒展来开：“好。” 但从此之后，李尚龙便和此人再无交往。 没过多久，一宿舍的人都和此人闹僵了。 大学毕业后，此人三年内换了七次工作， 因为太过斤斤计较，每个单位都不待见他。 李尚龙说：“他穷的，不仅仅是家庭条件，他穷的，更是视野和格局。” 他以为自己占了便宜，其实吃了大亏。 <strong>穷人缺钱，看起来是因为资源不够，实际上最要命的是穷人心态。</strong> <strong>也就是：越是穷的时候，越是在乎钱，越是在乎钱，就越是影响视野和格局。</strong> <strong>如何跳出稀缺导致的穷人思维？</strong> <strong>第三个：越是穷的时候，越是不能在乎钱。</strong> <strong>不明白这一点，很多事情及规划都无从谈起。</strong></p>
<p>09</p>
<p>我邻居，买菜折腾那个王阿姨，去年在地摊上给孙子买了双运动鞋， 耐克的仿款，便宜得惊人。 一周后，孙子从学校回来，脚肿了。 “鞋子材质不好，不透气……” 去医院，医生诊断是真菌感染。 结果一治，最后花了700多元。 王阿姨后悔得直跺脚：“早知道就买正品了。” 这就是穷人思维——忽视“冰山成本”。 何谓冰山成本？ 就是看得见的成本，往往只是极小部分。更大的成本，藏在看不见的水下。 忽视冰山成本会有一个后果——占小便宜，吃大亏。 贪图劣质鞋便宜，结果损伤了脚。 贪图劣质食品便宜，结果吃坏了肠胃。 贪图劣质服装便宜，结果没穿几回就扔了。 ………… 最终，付出了比买优质产品多得多的成本。 <strong>穷人的钱很多都耗费在了这样的冰山成本上。</strong> <strong>如何跳出稀缺导致的穷人思维？</strong> <strong>第四个：花钱时必须重视冰山成本。</strong> <strong>一心只想着省钱，往往是在浪费钱。</strong> <strong>不要因贪小便宜而吃大亏。</strong></p>
<p>10</p>
<p>我童年一直生活在农村大院，院里有位彭姓人家，生了三个子女， 当时打疫苗，已经开始收费了。 彭家为了省钱，就把很多疫苗也省了。 结果幺女儿得了小儿麻痹症，腿跛了。 借了几万元治腿，结果还是无力回天。 每次看到她，我都特别心痛。 “就因为父母为了省一点点钱，这个妹妹一辈子都被耽误了。” 这就是穷人思维——忽视身边随时可能发生或必将发生的重大变故。 比如，重大疾病的发生。 比如，意外伤害的发生。 这些重大变故一旦发生， 可能一下就会将我们打回“解放前”。 <strong>如何跳出稀缺导致的穷人思维？</strong> <strong>第五个：要规划“余钱”。</strong> 就是不管你生活有多拮据多困难， 一定要抠出一点余钱来未雨绸缪。 比如，买几种必须的保险。 比如，该打的疫苗一点要打。 ………… 如果你只关注眼前利益，很可能赢了一时，但输掉了整个一生。</p>
<p>11</p>
<p>企业家凌军讲过他公司两个员工的故事。两个员工是他同时招录进来的同班同学。 刚毕业时，两人都缺钱， 于是就把房子租在了北京五环外。 每天上下班需要四小时，很是累人。 凌军就建议：“你们可以在离单位近点的地方租房，虽然贵一点，但可以节约很多时间。” 员工马骏听了，在单位附近租了房子。 员工张萌没有，他觉得：“太贵了，不能浪费钱，反正我有的是时间。” 三年后，马骏工资翻了两倍。 “我把省下来的时间用到了学习上， 三年努力，我拿到了注册会计师证。” 而张萌呢，三年工资只涨了800元。 他很后悔：“我目光太短浅了。” <strong>如何跳出稀缺导致的穷人思维？</strong> <strong>第六个：要规划“余闲”。</strong> 把余闲用在自身素质的升级上——比如读书计划、技能培训等等。 穷人之穷，往往是双重匮乏：既缺金钱，又缺时间。 所以，我们一定要学会规划余闲， 必要时要像马骏一样学会用钱置换时间。</p>
<p>12</p>
<p><strong>自古以来，每个朝代都有阶层固化。**</strong>但无论阶层怎么固化，** <strong>总有5%的穷人可以突围而出。</strong> <strong>因为他们跳出了稀缺导致的穷人思维。</strong> 电影《1942》里，逃荒路上。 张国立演的地主说了一句话： “我知道咋从一个穷人变成财主， 不出十年，你大爷我还是东家， 那时候咱再回来……” 石油大王洛克菲勒也说过一句类似的话： “即使你们把我身上的衣服剥得精光， 然后扔在撒哈拉沙漠的中心地带， 但只要有一支商队从我身边路过。 我就会成为一个新的百万富翁。” <strong>一个人的思维，决定了他在什么阶层。  ** **我们和头等舱的距离，差的不只是钱。</strong></p>
<p>  转载自公众号：第一女刊</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>node-sass 踩坑之旅</title>
    <url>/2020/04/19/node-sass/</url>
    <content><![CDATA[<h2 id="下载慢"><a href="#下载慢" class="headerlink" title="下载慢"></a>下载慢</h2><p>npm config set sass_binary_site <a href="https://npm.taobao.org/mirrors/node-sass/">https://npm.taobao.org/mirrors/node-sass/</a><br>yarn config set sass_binary_site <a href="https://npm.taobao.org/mirrors/node-sass/">https://npm.taobao.org/mirrors/node-sass/</a> -g<br>参考：<a href="https://www.jb51.net/article/122820.htm">https://www.jb51.net/article/122820.htm</a></p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>Error: Node Sass does not yet support your current environment</p>
<p>原因：node 版本更换导致的</p>
<p>解决方法：</p>
<ol>
<li>更换回原 node 版本</li>
<li>npm rebuild node-sass</li>
<li>卸载 node-sass 重新安装</li>
</ol>
<p>参考：<a href="https://blog.csdn.net/yaya07755/article/details/96834875">https://blog.csdn.net/yaya07755/article/details/96834875</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>npm list -g报错</title>
    <url>/2017/08/31/npm-initzhixingkazhu/</url>
    <content><![CDATA[<p>是因为prefix没有设置导致的。<br>在安装完nodejs后，通过npm下载全局模块默认安装到以下目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\_username_\AppData\Roaming\npm</span><br></pre></td></tr></table></figure>

<p>运行下面的命令设置全局模块存放路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;C:\Users\_username_&quot;</span><br></pre></td></tr></table></figure>


<p>或者修改.npmrc文件，默认在 <code>C:\Users\_username_</code> 下</p>
<p>将默认值改为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prefix=C:\Users\_username_ </span><br></pre></td></tr></table></figure>
<p>注意斜杠\ </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix C:/Users/_username_</span><br></pre></td></tr></table></figure>
<p>不加引号的话需要写成右斜杠，最好不要用有空格的文件夹</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm publish</title>
    <url>/2020/06/24/npm-publish/</url>
    <content><![CDATA[<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ol>
<li>npm 官网创建 </li>
<li>npm add user 创建</li>
</ol>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>
<h3 id="查看当前登录账户"><a href="#查看当前登录账户" class="headerlink" title="查看当前登录账户"></a>查看当前登录账户</h3><p>如果提示 <code>401 Unauthorized - GET https://registry.npmjs.org/-/whoami</code>，请先登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">who</span> am i</span><br><span class="line">npm <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish --access=public <span class="comment"># 首次发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>npm包发布，通常不建议删除（假如有某某用户已经使用了你的npm包，这时候删除npm包是很没道理的）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm unpublish 依赖包名称 --force</span><br></pre></td></tr></table></figure>

<h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm version prerelease</span><br><span class="line">npm version prepatch</span><br><span class="line">npm version preminor</span><br><span class="line">npm version premajor</span><br><span class="line">npm version patch</span><br><span class="line">npm version minor</span><br><span class="line">npm version major</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_40817115/article/details/90384398">npm version</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>npm和yarn和pnpm</title>
    <url>/2019/08/10/npm%E5%92%8Cyarn/</url>
    <content><![CDATA[<h2 id="全局操作"><a href="#全局操作" class="headerlink" title="全局操作"></a>全局操作</h2><p>npm 加参数 <code>-g/--global</code></p>
<p>yarn 加参数 <code>global</code></p>
<h2 id="查看已安装-npm-包"><a href="#查看已安装-npm-包" class="headerlink" title="查看已安装 npm 包"></a>查看已安装 npm 包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ls/list/la/ll</span><br><span class="line">npm ls/list xxx</span><br><span class="line">npm list --depth=0 </span><br><span class="line">npm list --depth=0 --global/-g</span><br><span class="line"></span><br><span class="line">yarn list</span><br><span class="line">yarn list xxx</span><br><span class="line">yarn global list </span><br></pre></td></tr></table></figure>
<h2 id="查看-npm-包版本"><a href="#查看-npm-包版本" class="headerlink" title="查看 npm 包版本"></a>查看 npm 包版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm view/info/show/v xxx </span><br><span class="line">npm view xxx version <span class="comment"># 最新版本</span></span><br><span class="line">npm view xxx versions <span class="comment"># 所有已发布版本</span></span><br></pre></td></tr></table></figure>
<h2 id="安装npm包"><a href="#安装npm包" class="headerlink" title="安装npm包"></a>安装npm包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">yarn add</span><br><span class="line"></span><br><span class="line">pnpm i</span><br></pre></td></tr></table></figure>
<h2 id="删除npm包"><a href="#删除npm包" class="headerlink" title="删除npm包"></a>删除npm包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall/remove/rm/r/un/unlink &lt;package&gt;</span><br><span class="line"></span><br><span class="line">yarn remove &lt;package&gt;</span><br></pre></td></tr></table></figure>
<h2 id="查看可升级的包"><a href="#查看可升级的包" class="headerlink" title="查看可升级的包"></a>查看可升级的包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br><span class="line">yarn outdated</span><br></pre></td></tr></table></figure>
<p>npm 颜色：</p>
<p>黄色表示不符合我们指定的语意化版本范围 - 不需要升级</p>
<p>红色表示符合指定的语意化版本范围 - 需要升级</p>
<h2 id="更新npm包"><a href="#更新npm包" class="headerlink" title="更新npm包"></a>更新npm包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;package&gt;@latest</span><br><span class="line">npm update &lt;package&gt;</span><br><span class="line"></span><br><span class="line">yarn add &lt;package&gt;</span><br><span class="line">yarn upgrade &lt;package&gt; --latest</span><br></pre></td></tr></table></figure>
<h2 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">yarn config set registry https://registry.npm.taobao.org -g</span><br><span class="line"></span><br><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br></pre></td></tr></table></figure>
<h2 id="查看安装过程"><a href="#查看安装过程" class="headerlink" title="查看安装过程"></a>查看安装过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --timing=true --loglevel=verbose</span><br><span class="line"></span><br><span class="line">yarn --verbose</span><br></pre></td></tr></table></figure>
<h2 id="npm-root"><a href="#npm-root" class="headerlink" title="npm root"></a>npm root</h2><h2 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h2><h2 id="npm-explain"><a href="#npm-explain" class="headerlink" title="npm explain"></a>npm explain</h2><p>npm why</p>
<h2 id="npm-dedupe"><a href="#npm-dedupe" class="headerlink" title="npm dedupe"></a>npm dedupe</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm ddp <span class="comment">#Reduce duplication</span></span><br></pre></td></tr></table></figure>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config set proxy http://127.0.0.1:15236</span><br><span class="line">yarn config set https-proxy http://127.0.0.1:15236</span><br><span class="line"></span><br><span class="line">npm config set https-proxy</span><br><span class="line"></span><br><span class="line">yarn config delete proxy</span><br><span class="line">yarn config delete https-proxy</span><br></pre></td></tr></table></figure>
<p>npm 官方文档<br><a href="https://docs.npmjs.com/cli/v7/commands">https://docs.npmjs.com/cli/v7/commands</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>yarn</tag>
        <tag>pnpm</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm-windows踩坑之旅</title>
    <url>/2020/04/17/nvm-windows/</url>
    <content><![CDATA[<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<h3 id="安装路径不要有空格"><a href="#安装路径不要有空格" class="headerlink" title="安装路径不要有空格"></a>安装路径不要有空格</h3><p>nvm-windows 对空格支持的不是很好，安装路径最好不要有空格<br>作者说会在1.1.8这个版本解决这个问题<br>This issue should be resolved as of version 1.1.8. Please note I’m woefully behind in cutting this new release, but am working on a new release process. In the meantime, it’s possible to download the source or use a patched version from <a href="https://github.com/s-h-a-d-o-w/nvm-windows/releases">https://github.com/s-h-a-d-o-w/nvm-windows/releases</a> (from the person who submitted the fix).</p>
<h3 id="使用淘宝镜像"><a href="#使用淘宝镜像" class="headerlink" title="使用淘宝镜像"></a>使用淘宝镜像</h3><p>如果用 nvm 安装 node 和 npm 很慢，可以配置 nvm 使用淘宝镜像<br>nvm node_mirror <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>nvm npm_mirror <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p>
]]></content>
  </entry>
  <entry>
    <title>nvm基本使用</title>
    <url>/2019/12/24/nvm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>change mirror</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure>
<p>查看本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list/ls</span><br></pre></td></tr></table></figure>
<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>切换版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>查看当前版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure>
<p>设置默认版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm alias default &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>参考文档<br><a href="https://www.jianshu.com/p/e21e3783304f">https://www.jianshu.com/p/e21e3783304f</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>php composer基本使用</title>
    <url>/2020/06/02/php-composer%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>composer update 慢</p>
<h3 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h3><h4 id="使用阿里镜像"><a href="#使用阿里镜像" class="headerlink" title="使用阿里镜像"></a>使用阿里镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>
<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://pkg.phpcomposer.com/">https://pkg.phpcomposer.com/</a></p>
<h4 id="当前项目"><a href="#当前项目" class="headerlink" title="当前项目"></a>当前项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<p>上述命令将会在当前项目中的composer.json文件的末尾自动添加镜像的配置信息（我们也可以自己手工添加）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line"></span><br><span class="line">        &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="列出现有配置"><a href="#列出现有配置" class="headerlink" title="列出现有配置"></a>列出现有配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g --list</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://docs.phpcomposer.com/03-cli.html#config">https://docs.phpcomposer.com/03-cli.html#config</a></p>
<p>参考：<a href="https://www.php.cn/tool/composer/428026.html">https://www.php.cn/tool/composer/428026.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP URL参数获取方式的四种例子</title>
    <url>/2017/09/18/php-urlcanshuhuoqufangshidesizhonglizi/</url>
    <content><![CDATA[<p>这篇文章主要介绍了PHP URL参数获取方式的四种例子,php url参数解析的4种方法,需要的朋友可以参考下</p>
<p>在已知URL参数的情况下，我们可以根据自身情况采用$_GET来获取相应的参数信息（$_GET[‘name’]）;那，在未知情况下如何获取到URL上的参数信息呢？ </p>
<h2 id="利用-SERVER内置数组变量"><a href="#利用-SERVER内置数组变量" class="headerlink" title="利用$_SERVER内置数组变量"></a>利用$_SERVER内置数组变量</h2><p>相对较为原始的$_SERVER[‘QUERY_STRING’]来获取，URL的参数，通常使用这个变量返回的会是类似这样的数据：name=tank&amp;sex=1 如果需要包含文件名的话可以使用$_SERVER[“REQUEST_URI”](返回类似：/index.php?name=tank&amp;sex=1) </p>
<h2 id="利用pathinfo内置函数"><a href="#利用pathinfo内置函数" class="headerlink" title="利用pathinfo内置函数"></a>利用pathinfo内置函数</h2><p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php $test = pathinfo(&quot;http://localhost/index.php&quot;); print_r($test); /* 结果如下 Array ( \[dirname\] =&gt; http://localhost //url的路径 \[basename\] =&gt; index.php  //完整文件名 \[extension\] =&gt; php  //文件名后缀 \[filename\] =&gt; index //文件名 ) */ ?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="利用parse-url内置函数"><a href="#利用parse-url内置函数" class="headerlink" title="利用parse_url内置函数"></a>利用parse_url内置函数</h2><p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php $test = parse\_url(&quot;http://localhost/index.php?name=tank&amp;sex=1#top&quot;); print\_r($test); /* 结果如下 Array ( \[scheme\] =&gt; http //使用什么协议 \[host\] =&gt; localhost //主机名 \[path\] =&gt; /index.php //路径 \[query\] =&gt; name=tank&amp;sex=1 // 所传的参数 \[fragment\] =&gt; top //后面根的锚点 ) */ ?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="利用basename内置函数"><a href="#利用basename内置函数" class="headerlink" title="利用basename内置函数"></a>利用basename内置函数</h2><p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php $test = basename(&quot;http://localhost/index.php?name=tank&amp;sex=1#top&quot;); echo $test; /* 结果如下 index.php?name=tank&amp;sex=1#top */ ?&gt;</span><br></pre></td></tr></table></figure>
<p>另外，还有就是自己通过正则匹配的处理方式来获取需要的值了。这种方式较为精确，效率暂不考虑。。。 下面拓展实践下正则处理方式：</p>
<p>复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php preg\_match\_all(&quot;/(\\w+=\\w+)(#\\w+)?/i&quot;,&quot;http://localhost/index.php?name=tank&amp;sex=1#top&quot;,$match); print_r($match); /* 结果如下 Array ( \[0\] =&gt; Array ( \[0\] =&gt; name=tank \[1\] =&gt; sex=1#top ) \[1\] =&gt; Array ( \[0\] =&gt; name=tank \[1\] =&gt; sex=1 ) \[2\] =&gt; Array ( \[0\] =&gt; \[1\] =&gt; #top ) ) */ ?&gt;</span><br></pre></td></tr></table></figure>
<p>补充 函数dirname() 路途漫漫…还有待继续挖掘… </p>
<p>转载至<a href="http://www.jb51.net/article/47396.htm">http://www.jb51.net/article/47396.htm</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php 修改上传文件大小限制</title>
    <url>/2020/06/03/php-%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<h2 id="找到php-ini文件"><a href="#找到php-ini文件" class="headerlink" title="找到php.ini文件"></a>找到php.ini文件</h2><p>Linux默认文件路径为/etc/php.ini，如果/etc/下找不到此文件，请使用附加方法1<br>如果找不到etc文件夹，请使用附加方法2寻找并修改</p>
<h2 id="修改upload-max-filesize"><a href="#修改upload-max-filesize" class="headerlink" title="修改upload_max_filesize"></a>修改upload_max_filesize</h2><p>打开php.ini，搜索upload_max_filesize，形如upload_max_filesize=2，即允许上传2M大小到文件，修改为合适大小就可以。</p>
<h2 id="重启apache"><a href="#重启apache" class="headerlink" title="重启apache"></a>重启apache</h2><p>sudo service httpd restart</p>
<h2 id="附加方法1：寻找php-ini"><a href="#附加方法1：寻找php-ini" class="headerlink" title="附加方法1：寻找php.ini"></a>附加方法1：寻找php.ini</h2><p>在网站根目录下新建一个php文件，命名为phpinfo.php<br>打开这个文件输入以下代码<br>&lt;?php<br>phpinfo();//末尾有分号</p>
<p>访问这个文件即可查看到php.ini的具体路径<br>访问地址<a href="http://ip(如：127.0.0.1)/phpinfo.php">http://ip(如：127.0.0.1)/phpinfo.php</a></p>
<h2 id="附加方法2：寻找并修改php-ini"><a href="#附加方法2：寻找并修改php-ini" class="headerlink" title="附加方法2：寻找并修改php.ini"></a>附加方法2：寻找并修改php.ini</h2><pre><code>1打开终端
输入 sudo vi /etc/php.ini  //php.ini的最终路径，以实际为准
2搜索upload_max_filesize的位置
输入 /upload_max_filesize 回车，此时会定位到upload_max_filesize，如果有多个匹配项，请找到形如upload_max_filesize=2M到位置
3修改
输入i进入修改模式</code></pre><p>将光标移动到需要修改到位置，删除并修改<br>    4保存并退出<br>    输入:wq回车 //注意冒号<br>    5继续接下来到步骤，重启Apache</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php 线程安全和非线程安全的区别</title>
    <url>/2019/02/18/php-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>如何选择PHP版本（选择线程安全还是非线程安全）：<br>在Windows下安装PHP，在选择PHP版本上很有讲究。</p>
<p>Windows下的PHP版本分两种：线程安全版本与非线程安全版本。</p>
<p>如果你打算使用IIS，则你可以以ISAPI或FastCGI这两种方式来安装PHP。CGI的方式因为效率低下，故不予考虑。</p>
<p>如果你要在IIS中以FastCGI方式使用PHP，则你应该使用PHP的非线程安全的版本（Non-Thread Safe，NTS）。原因是以FastCGI方式安装PHP时，PHP拥有独立的进程，并且FastCGI是单一线程的，不存在多个线程之间可能引发的相互干扰（这种干扰通常都是由于全局变量和静态变量导致的）。由于省去了线程安全的检查，因此使用FastCGI方式比ISAPI方式的效率更高一些。</p>
<p>如果你要在IIS中以ISAPI的方式使用PHP，则你应该使用PHP的线程安全版本（Thread Safe，TS）。原因是PHP以ISAPI方式安装时，PHP没有独立的进程，而是作为DLL被IIS加载运行的，即是依附于Web服务器进程的。当Web服务器运行在多线程模式下（IIS正是这种情况），PHP自然也就运行在多线程模式下。只要是在多线程模式下运行，就可能存在线程安全问题，因此应选择PHP的线程安全版本。</p>
<p>但在这里还有必要说明一下，尽管Apache本身是线程安全的，同时你也选择了PHP的线程安全版本，但由于一些Apache和PHP下的第三方扩展最初是基于Unix的多进程思想开发出来的，在设计开发时没有考虑线程安全的问题，因此，不排除在这种情况下仍然存在IIS被某些第三方扩展搞崩溃的可能。</p>
<p>如果你打算使用Apache，则你可以以模块、ISAPI、FastCGI这三种方式来安装PHP。CGI的方式因为效率低下，故不予考虑。</p>
<p>如果你要在Apache中以模块方式安装PHP，则你应该使用PHP的线程安全的版本。原因是当PHP作为Apache的模块安装时，PHP没有独立的进程，而是作为模块以DLL的形式被加载到Apache中的，是随Apache的启动而启动的，而Windows下的Apache为多线程工作模式，因此PHP自然也就运行在多线程模式下。因此，这种情况下应使用PHP的线程安全版本。</p>
<p>再来看ISAPI的情况。通常认为ISAPI是配合IIS使用的，因为ISAPI最初就是微软为IIS开发的。但Apache现在也可以通过加载mod_isapi.so模块来实现ISAPI的功能，以允许PHP以ISAPI的方式安装。.so文件是Apache自1.3版本后制定的用于Windows下的模块命名规则，对于Windows下的Apache而言，.so与.dll文件一样，都是动态链接库文件。</p>
<p>当要以ISAPI方式来安装PHP时，通常是加载一个名如phpXisapi.dll的DLL文件，其中的X为阿拉伯数字4、5等等这样子。</p>
<p>但一般不建议在Apache中以ISAPI方式来安装PHP，原因是到目前为止，Apache通过mod_isapi.so模块来实现的ISAPI功能并不完整，并未完整实现微软对ISAPI所制定的全部规范。</p>
<p>同样的，由于以ISAPI方式来安装PHP时，PHP也没有独立的进程，也是作为模块被加载到Apache中的，因此，同样也需要使用PHP的线程安全版本。</p>
<p>如果你要在Apache中以FastCGI方式使用PHP，则同在IIS中使用FastCGI的PHP的情况一样，你应该使用PHP的非线程安全的版本。原因是在Apache中以FastCGI方式安装PHP时，PHP拥有独立的进程，并且FastCGI是单一线程的，故应使用PHP的非线程安全版本以提高性能。</p>
<p>转载自：<a href="https://blog.csdn.net/FAST_13469ND/article/details/82048649">https://blog.csdn.net/FAST_13469ND/article/details/82048649</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php处理postgresql图片</title>
    <url>/2020/09/10/php%E5%A4%84%E7%90%86postgresql%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h4 id="连接pgsql数据库"><a href="#连接pgsql数据库" class="headerlink" title="连接pgsql数据库"></a>连接pgsql数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$host        = &quot;host=xxx&quot;;</span><br><span class="line">$port        = &quot;port=5432&quot;;</span><br><span class="line">$dbname      = &quot;dbname=xxx&quot;;</span><br><span class="line">$credentials = &quot;user=postgres password=xxx&quot;;</span><br><span class="line"></span><br><span class="line">$db = pg_connect( &quot;$host $port $dbname $credentials&quot;  );</span><br><span class="line">if(!$db)&#123;</span><br><span class="line">  echo &quot;Error : Unable to open database\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo &quot;Opened database successfully\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查询数据库输出图片"><a href="#查询数据库输出图片" class="headerlink" title="查询数据库输出图片"></a>查询数据库输出图片</h4><h5 id="方法一-base64格式"><a href="#方法一-base64格式" class="headerlink" title="方法一 base64格式"></a>方法一 base64格式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql =  &quot;SELECT id,encode(picture, &#x27;BASE64&#x27;) as picture FROM water_flow_pictures_data WHERE id=&quot;.$_GET[&#x27;imgid&#x27;];</span><br><span class="line"></span><br><span class="line">$ret = pg_query($db, $sql);</span><br><span class="line">if(!$ret)&#123;</span><br><span class="line">  echo pg_last_error($db);</span><br><span class="line">  exit;</span><br><span class="line">&#125;</span><br><span class="line">while($row = pg_fetch_row($ret))&#123;</span><br><span class="line">  // 方法一</span><br><span class="line">  echo &#x27;&lt;img src=&quot;data:image/jpg;base64,&#x27; . $row[1] .&#x27;&quot;/&gt;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql =  &quot;SELECT id,picture FROM water_flow_pictures_data WHERE id=&quot;.$_GET[&#x27;imgid&#x27;];</span><br><span class="line"></span><br><span class="line">$ret = pg_query($db, $sql);</span><br><span class="line">if(!$ret)&#123;</span><br><span class="line">  echo pg_last_error($db);</span><br><span class="line">  exit;</span><br><span class="line">&#125;</span><br><span class="line">while($row = pg_fetch_row($ret))&#123;</span><br><span class="line">  // 方法二</span><br><span class="line">  header(&quot;Content-Type: image/jpeg&quot;);</span><br><span class="line">  echo pg_unescape_bytea($row[1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="缩放后输出（也可压缩质量）"><a href="#缩放后输出（也可压缩质量）" class="headerlink" title="缩放后输出（也可压缩质量）"></a>缩放后输出（也可压缩质量）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取原图属性</span><br><span class="line">list($width, $height, $type, $attr) = getimagesizefromstring(pg_unescape_bytea($row[1]));</span><br><span class="line">$newWidth = $_GET[&#x27;width&#x27;]?$_GET[&#x27;width&#x27;]: $width;</span><br><span class="line">$newHeight = $height/$width * $newWidth;</span><br><span class="line"></span><br><span class="line">$image =imagecreatefromstring(pg_unescape_bytea($row[1]));</span><br><span class="line">$quality  = 0; // 图片输出质量，0 为最低</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Create a blank image and add some text</span><br><span class="line">$im = imagecreatetruecolor($newWidth, $newHeight);</span><br><span class="line">imagecopyresized($im,$image,0,0,0,0,$newWidth,$newHeight,$width,$height);</span><br><span class="line">// $text_color = imagecolorallocate($im, 233, 14, 91);</span><br><span class="line">// imagestring($im, 1, 5, 5,  &#x27;A Simple Text String&#x27;, $text_color);</span><br><span class="line"></span><br><span class="line">// Set the content type header - in this case image/jpeg</span><br><span class="line">header(&#x27;Content-Type: image/jpeg&#x27;);</span><br><span class="line"></span><br><span class="line">// Output the image</span><br><span class="line">imagejpeg($im, null, $quality);</span><br><span class="line"></span><br><span class="line">// Free up memory</span><br><span class="line">imagedestroy($im);</span><br></pre></td></tr></table></figure>

<h4 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pg_close($db);</span><br></pre></td></tr></table></figure>


<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.php.net/manual/en/ref.image.php">https://www.php.net/manual/en/ref.image.php</a><br><a href="https://www.runoob.com/php/php-image-gd.html">https://www.runoob.com/php/php-image-gd.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>php报错与处理</title>
    <url>/2020/07/03/php%E6%8A%A5%E9%94%99%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<ol>
<li>failed to open stream: Permission denied</li>
</ol>
<p>可能原因：没有目录权限<br>解决方案：更改目录所有者为www</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chown -R www:www folername</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>failed to open stream: No such file or directory</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># composer install</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2实现开机自动启动</title>
    <url>/2018/01/25/pm2shixiankaijizidongqidong/</url>
    <content><![CDATA[<p>可以通过<code>pm2 startup</code>来实现开机自启动。细节可<a href="http://pm2.keymetrics.io/docs/usage/startup/">参考</a>。大致流程如下</p>
<ol>
<li>通过<code>pm2 save</code>保存当前进程状态。</li>
<li>通过<code>pm2 startup [platform]</code>生成开机自启动的命令。</li>
</ol>
<p>例如： </p>
<ol>
<li>使用pm2启动node ：# pm2 start /home/wwwroot/web.js –watch </li>
<li>dump这些进程列表：# pm2 save </li>
<li>生成自启动脚本：# pm2 startup centos</li>
</ol>
<p>转载<br><a href="https://www.cnblogs.com/chyingp/p/pm2-documentation.html">https://www.cnblogs.com/chyingp/p/pm2-documentation.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2的基本使用</title>
    <url>/2019/08/25/pm2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 init</span><br><span class="line">$ pm2 ecosystem</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start命令启动对应的node server文件</span></span><br><span class="line">$ pm2 start ./build/server.js --name alisaname</span><br></pre></td></tr></table></figure>
<p>参数<br><code>--name</code><br><code>--watch</code><br>启动npm命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 start npm --name <span class="string">&quot;xxx&quot;</span> -- run start/dev</span><br></pre></td></tr></table></figure>

<h3 id="查看所有启动的进程列表"><a href="#查看所有启动的进程列表" class="headerlink" title="查看所有启动的进程列表"></a>查看所有启动的进程列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 list</span><br></pre></td></tr></table></figure>
<h3 id="查看详细状态信息"><a href="#查看详细状态信息" class="headerlink" title="查看详细状态信息"></a>查看详细状态信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 show  &lt;appname&gt;/&lt;id&gt;</span><br></pre></td></tr></table></figure>
<h3 id="监控进程的-cpu-和内存使用情况"><a href="#监控进程的-cpu-和内存使用情况" class="headerlink" title="监控进程的 cpu 和内存使用情况"></a>监控进程的 cpu 和内存使用情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure>
<h3 id="显示某个进程的信息"><a href="#显示某个进程的信息" class="headerlink" title="显示某个进程的信息"></a>显示某个进程的信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 info &lt;appname&gt;/&lt;id&gt;</span><br></pre></td></tr></table></figure>
<h3 id="显示某个进程的日志"><a href="#显示某个进程的日志" class="headerlink" title="显示某个进程的日志"></a>显示某个进程的日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 log &lt;appname&gt;/&lt;id&gt;</span><br></pre></td></tr></table></figure>
<h3 id="显示所有进程的日志信息"><a href="#显示所有进程的日志信息" class="headerlink" title="显示所有进程的日志信息"></a>显示所有进程的日志信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 logs</span><br></pre></td></tr></table></figure>
<h3 id="运行健壮的-computer-API-endpoint"><a href="#运行健壮的-computer-API-endpoint" class="headerlink" title="运行健壮的 computer API endpoint"></a>运行健壮的 computer API endpoint</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 web</span><br></pre></td></tr></table></figure>
<h3 id="停止-指定-所有-进程"><a href="#停止-指定-所有-进程" class="headerlink" title="停止 指定/所有 进程"></a>停止 指定/所有 进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 stop &lt;appname&gt;/&lt;id&gt;</span><br><span class="line">$ pm2 stop all</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="重启-指定-所有-进程"><a href="#重启-指定-所有-进程" class="headerlink" title="重启 指定/所有 进程"></a>重启 指定/所有 进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 restart &lt;appname&gt;/&lt;id&gt;</span><br><span class="line">$ pm2 restart all</span><br></pre></td></tr></table></figure>
<h3 id="杀死-指定-所有-进程"><a href="#杀死-指定-所有-进程" class="headerlink" title="杀死 指定/所有 进程"></a>杀死 指定/所有 进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 delete &lt;appname&gt;/&lt;id&gt;</span><br><span class="line">$ pm2 delete all</span><br></pre></td></tr></table></figure>
<h3 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 flush</span><br></pre></td></tr></table></figure>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 update <span class="comment"># Save processes, kill PM2 and restore processes</span></span><br><span class="line">$ pm2 save <span class="comment"># 保存当前应用列表</span></span><br><span class="line">$ pm2 startup <span class="comment"># 产生 init 脚本 保持进程活着</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="js-格式"><a href="#js-格式" class="headerlink" title="js 格式"></a>js 格式</h4><p>请注意，使用 js 配置文件要求文件名结尾为 .config.js</p>
<p>例如：ecosystem.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;API&#x27;</span>,</span><br><span class="line">    <span class="attr">script</span>: <span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">args</span>: <span class="string">&#x27;one two&#x27;</span>,</span><br><span class="line">    <span class="attr">instances</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">autorestart</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">watch</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">max_memory_restart</span>: <span class="string">&#x27;1G&#x27;</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">NODE_ENV</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">env_production</span>: &#123;</span><br><span class="line">      <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  deploy : &#123;</span><br><span class="line">    production : &#123; <span class="comment">// 任务名</span></span><br><span class="line">      user : <span class="string">&#x27;node&#x27;</span>, <span class="comment">// 服务器登录用户名</span></span><br><span class="line">      host : <span class="string">&#x27;212.83.163.1&#x27;</span>, <span class="comment">// 可为数组</span></span><br><span class="line">      port : <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">      ref  : <span class="string">&#x27;origin/master&#x27;</span>,</span><br><span class="line">      repo : <span class="string">&#x27;git@github.com:repo.git&#x27;</span>,</span><br><span class="line">      path : <span class="string">&#x27;/var/www/production&#x27;</span>, <span class="comment">// 服务器网站存放地址</span></span><br><span class="line">      <span class="string">&#x27;post-deploy&#x27;</span> : <span class="string">&#x27;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="部署时注意"><a href="#部署时注意" class="headerlink" title="部署时注意"></a>部署时注意</h5><p>path 给予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup</span></span><br><span class="line">pm2 deploy ecosystem.config.js production(任务名) setup</span><br><span class="line"><span class="comment"># deploy</span></span><br><span class="line">pm2 deploy ecosystem.config.js production(任务名)</span><br></pre></td></tr></table></figure>
<h4 id="json-格式"><a href="#json-格式" class="headerlink" title="json 格式"></a>json 格式</h4><p>例如：process.prod.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exec_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ignore_watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;logs&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instances&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;logs/err.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;out_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;logs/out.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;log_date_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=7.6&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以根据需要设置任意多个JSON应用程序声明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">      &quot;name&quot;: &quot;testOne&quot;,</span><br><span class="line">      &quot;script&quot;: &quot; testOne/server.js&quot;,</span><br><span class="line">      &quot;instances&quot;: 1,</span><br><span class="line">      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;,</span><br><span class="line">      &quot;max_memory_restart&quot;: &quot;500M&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;testTwo&quot;,</span><br><span class="line">      &quot;script&quot;: &quot; testTwo/server.js&quot;,</span><br><span class="line">      &quot;instances&quot;: 1,</span><br><span class="line">      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;,</span><br><span class="line">      &quot;max_memory_restart&quot;: &quot;500M&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 start process.prod.json</span><br></pre></td></tr></table></figure>
<h4 id="YAML-格式"><a href="#YAML-格式" class="headerlink" title="YAML 格式"></a>YAML 格式</h4><h4 id="常用配置项说明"><a href="#常用配置项说明" class="headerlink" title="常用配置项说明"></a>常用配置项说明</h4><p>apps： json结构，apps是一个数组，每一个数组成员就是对应一个pm2中运行的应用；</p>
<p>name：应用程序名称；</p>
<p>cwd：应用程序所在的目录；</p>
<p>script：应用程序的脚本路径；</p>
<p>log_date_format： 指定日志日期格式，如YYYY-MM-DD HH：mm：ss；</p>
<p>error_file：自定义应用程序的错误日志文件，代码错误可在此文件查找；</p>
<p>out_file：自定义应用程序日志文件，如应用打印大量的标准输出，会导致pm2日志过大；</p>
<p>pid_file：自定义应用程序的pid文件；</p>
<p>interpreter：指定的脚本解释器；</p>
<p>interpreter_args：传递给解释器的参数；</p>
<p>exec_mode：应用程序启动模式，支持 fork 和 cluster 模式，默认是 fork；</p>
<p>instances： 应用启动实例个数，仅在 cluster 模式有效；</p>
<p>min_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量；</p>
<p>max_restarts：设置应用程序异常退出重启的次数，默认15次（从0开始计数）；</p>
<p>autorestart ：默认为true, 发生异常的情况下自动重启；</p>
<p>cron_restart：定时启动，解决重启能解决的问题；</p>
<p>max_memory_restart：最大内存限制数，超出自动重启；</p>
<p>watch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件。</p>
<p>ignore_watch：忽略监听的文件夹，支持正则表达式；</p>
<p>merge_logs： 设置追加日志而不是新建日志；</p>
<p>exec_interpreter：应用程序的脚本类型，默认是nodejs；</p>
<p>autorestart：启用/禁用应用程序崩溃或退出时自动重启；</p>
<p>vizion：启用/禁用vizion特性(版本控制)；</p>
<p>env：环境变量，object类型；</p>
<p>force：默认false，如果true，可以重复启动一个脚本。pm2不建议这么做；</p>
<p>restart_delay：异常重启情况下，延时重启时间；</p>
<p>参考：<br><a href="https://pm2.keymetrics.io/">https://pm2.keymetrics.io/</a></p>
<p><a href="https://www.cnblogs.com/huiguo/p/12694542.html">https://www.cnblogs.com/huiguo/p/12694542.html</a></p>
<p><a href="https://juejin.im/post/5be406705188256dbb5176f94">https://juejin.im/post/5be406705188256dbb5176f94</a></p>
<p><a href="https://www.douban.com/note/314200231/">https://www.douban.com/note/314200231/</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>postMessage</title>
    <url>/2022/05/16/postMessage/</url>
    <content><![CDATA[<p>postMessage 可用于解决以下方面的问题：</p>
<ol>
<li>页面和其打开的新窗口的数据传递</li>
<li>页面与嵌套的 iframe 消息传递</li>
<li>多窗口之间消息传递</li>
</ol>
<h2 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">otherWindow.<span class="title function_">postMessage</span>(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure>
<p>otherWindow</p>
<p>其他窗口的一个引用，比如 iframe 的 contentWindow 属性、执行 window.open 返回的窗口对象、或者是命名过或数值索引的 window.frames。</p>
<p>message</p>
<p>要发送的数据。它将会被结构化克隆算法序列化，所以无需自己序列化（部分低版本浏览器只支持字符串，所以发送的数据最好用JSON.stringify() 序列化）。</p>
<p>targetOrigin</p>
<p>通过 targetOrigin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串“*”（表示无限制）或者一个 URI（如果要指定和当前窗口同源的话可设置为”/“）。在发送消息的时候，如果目标窗口的协议、主机地址或端口号这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会发送。</p>
<h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> origin = event.<span class="property">origin</span>;</span><br><span class="line">   <span class="comment">// 通常，onmessage()事件处理程序应当首先检测其中的origin属性，忽略来自未知源的消息</span></span><br><span class="line">   <span class="keyword">if</span> (origin !== <span class="string">&quot;http://example.org:8080&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>event 的属性有：</p>
<ul>
<li>data: 从其他 window 传递过来的数据副本。 </li>
<li>origin: 调用 postMessage 时，消息发送窗口的 origin。例如：“<a href="http://example.com:8080”。">http://example.com:8080”。</a></li>
<li>source: 对发送消息的窗口对象的引用。可以使用此来在具有不同 origin 的两个窗口之间建立双向数据通信。 </li>
</ul>
<p>————————————————<br>版权声明：本文为CSDN博主「huangpb0624」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/huangpb123/article/details/83692019">https://blog.csdn.net/huangpb123/article/details/83692019</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>postgresql基本使用</title>
    <url>/2019/12/24/postgresql%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="切换postgres用户"><a href="#切换postgres用户" class="headerlink" title="切换postgres用户"></a>切换postgres用户</h4><p><code>$ sudo su - postgres</code></p>
<h4 id="登录PostgreSQL控制台"><a href="#登录PostgreSQL控制台" class="headerlink" title="登录PostgreSQL控制台"></a>登录PostgreSQL控制台</h4><p><code>$ psql</code><br><code>$ psql -U postgres</code></p>
<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p><code>postgres-# \q</code></p>
<h4 id="允许远程访问"><a href="#允许远程访问" class="headerlink" title="允许远程访问"></a>允许远程访问</h4><p>1.修改 <code>pg_hba.conf</code> 在最后面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure>
<p>centos 默认在 /var/lib/pgsql/10/data 下</p>
<p>windows 一般在 /program files/postgresql/10/data 下</p>
<p>2.查看 <code>postgresql.conf</code> 是否如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen_addresses = &#x27;*&#x27;</span><br><span class="line">port = 5432</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>postgresql备份还原</title>
    <url>/2019/12/04/postgresql%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h4 id="一、备份"><a href="#一、备份" class="headerlink" title="一、备份"></a>一、备份</h4><p>1.命令行下备份为纯文本格式<br>切换为postgres用户（linux 命令）</p>
<p>su - postgres</p>
<p>备份到backupfile.bak</p>
<p>pg_dump dbname &gt; backupfile.bak</p>
<p>windows下使用-U参数切换用户</p>
<p>pg_dump -h localhost -U postgres -p 5555 dbname &gt; backupfile.bak</p>
<p>2.pgAdmin 4客户端备份为归档文件格式</p>
<h4 id="二、还原"><a href="#二、还原" class="headerlink" title="二、还原"></a>二、还原</h4><p>纯文本格式的脚本<br>使用psql</p>
<p>1.cd到postgresql安装目录，如：d:\program files\postgresql\10\bin&gt;</p>
<p>2.执行 psql -U postgres -d dbname -p 5555 &lt; backupfile.bak</p>
<p>另：使用CMD，不要使用powershell</p>
<p>不加-U（大写），windows下默认是administrator用户，-p是端口</p>
<p>归档文件格式（.sql文件，.backup文件）<br>使用pg_restore</p>
<p>参数：-d 数据库 -j 线程数（可以多线程提高速度） -v 详细模式（显示还原过程）-U（用户名，windows下需要加这项）</p>
<p>pg_restore –dbname=mydb –jobs=4 –verbose mydb.backup</p>
<p>简写：pg_restore -d mydb -j 4 -v mydb.backup</p>
<p>备注</p>
<p>命令行启动postgresql</p>
<p>pg_ctl start -D ../data</p>
<p>../data为你的数据存放路径</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pixel</title>
    <url>/2022/02/09/pt-px/</url>
    <content><![CDATA[<h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><ol>
<li>1 px 问题是如何产生的？</li>
<li>为什么会有 二倍图，三倍图？</li>
<li>苹果公司所说的 Retina 屏是啥？</li>
<li>屏幕清晰度由哪个参数决定，分辨率越高就一定越清晰吗？</li>
<li>屏幕尺寸相同可以通过分辨率判断屏幕清晰度，屏幕尺寸不同，如何判断哪块屏幕更清晰？</li>
</ol>
<h3 id="pt"><a href="#pt" class="headerlink" title="pt"></a>pt</h3><p>物理单位<br>1 pt = 1/72 inch<br>1 inch = 72 pt<br>72 pt = 96 px<br>绝对长度单位，多用于打印  </p>
<h3 id="inch"><a href="#inch" class="headerlink" title="inch"></a>inch</h3><p>1 inch = 2.54 cm </p>
<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>1px 问题<br>获取设备像素比<br>js<br>window.devicePixelRatio<br>css<br>-webkit-min-device-pixel-ratio</p>
<h3 id="dpr-devicePixelRatio"><a href="#dpr-devicePixelRatio" class="headerlink" title="dpr (devicePixelRatio)"></a>dpr (devicePixelRatio)</h3><p>设备像素比<br><img src="https://img-blog.csdnimg.cn/20190612152430172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h1ZWxpXzIwMTc=,size_16,color_FFFFFF,t_70" alt="dpi 和 dpr"><br>window.devicePixelRatio是设备物理像素和设备独立像素（device-independent pixels，dips）之间的比率。是一个约数？<br>window.devicePixelRatio = 物理像素 / 设备独立像素 </p>
<h3 id="DIP-Device-Independent-Pixel"><a href="#DIP-Device-Independent-Pixel" class="headerlink" title="DIP (Device Independent Pixel)"></a>DIP (Device Independent Pixel)</h3><p>设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素<br>css 像素是逻辑像素，并不是真实像素<br>Windows / Mac 电脑都可以设置设备独立像素</p>
<h3 id="dpi-dots-per-inch"><a href="#dpi-dots-per-inch" class="headerlink" title="dpi (dots per inch)"></a>dpi (dots per inch)</h3><p>和 ppi 基本相同</p>
<h3 id="ppi-pixels-per-inch"><a href="#ppi-pixels-per-inch" class="headerlink" title="ppi (pixels per inch)"></a>ppi (pixels per inch)</h3><p><img src="https://images2015.cnblogs.com/blog/984702/201704/984702-20170412161418626-799396908.png" alt="ppi 计算公式"></p>
<p>ppi在120-160之间的手机被归为低密度手机，160-240被归为中密度，240-320被归为高密度，320以上被归为超高密度（例如苹果公司的Retina显示屏）<br><img src="https://images2015.cnblogs.com/blog/984702/201704/984702-20170412163336783-427220997.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CSS 只与设备独立像素有关系，尺寸相同，设备独立像素相同的屏幕，网页上的同一张图片显示的尺寸是相同的，只不过清晰度会有所不同。所以会有二倍图，三倍图。<br>宽 100px 的图片在 1:1 的屏幕上css设置为 100px，在 2:1 的屏幕上可以使用200px 的图片，css 同样设置为 100px 。<br>设备独立像素 (DIP) 是与设备无关的，可以调整的逻辑像素。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol>
<li><p><a href="https://www.zhihu.com/question/19851058">1 pt 的图形大小与其在屏幕上显示出的大小之间有什么关系？</a></p>
</li>
<li><p><a href="http://www.w3chtml.com/css3/units/length/pt.html">pt</a></p>
</li>
<li><p><a href="https://blog.csdn.net/xueli_2017/article/details/91492971">设备像素比（devicePixelRatio）</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/jiangzilong/p/6700023.html">CSS像素、设备独立像素、设备像素之间关系</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>劝君更尽一杯酒，西出阳关无故人</title>
    <url>/2017/11/22/quanjungengjinyibeijiuxichuyangguanwuguren/</url>
    <content><![CDATA[<p>[渭城曲 / 送元二使安西]</p>
<p>作者：<a href="https://www.baidu.com/s?wd=%E7%8E%8B%E7%BB%B4&usm=3&ie=utf-8&rsv_cq=%E5%8A%9D%E5%90%9B%E6%9B%B4%E5%B0%BD%E4%B8%80%E6%9D%AF%E9%85%92+%E8%A5%BF%E5%87%BA%E9%98%B3%E5%85%B3%E6%97%A0%E6%95%85%E4%BA%BA&rsv_dl=0_left_exactqa_detail_28239">王维</a></p>
<p>渭城朝雨浥轻尘，客舍青青柳色新。<br>劝君更尽一杯酒，西出阳关无故人。</p>
<p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=f05b3a258544ebf86d716339e1c2b017/8694a4c27d1ed21b95cf2dc3af6eddc451da3f95.jpg" alt=""></p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>mysql支持远程访问</title>
    <url>/2017/09/19/rangcentoszhichiyuanchengfangwenmysql/</url>
    <content><![CDATA[<p>Mysql为了安全性，在默认情况下用户只允许在本地登录，可是在有此情况下，还是需要使用用户进行远程连接，因此为了使其可以远程需要进行如下操作：</p>
<p>一、允许root用户在任何地方进行远程登录，并具有所有库任何操作权限，具体操作如下：<br>在本机先使用root用户登录mysql：<br><code>mysql -u root -p&quot;youpassword&quot;</code><br>进行授权操作：<br><code>mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;youpassword&#39; WITH GRANT OPTION;</code><br>重载授权表：<br><code>FLUSH PRIVILEGES;</code><br>退出mysql数据库：<br><code>exit</code></p>
<p>二、允许root用户在一个特定的IP进行远程登录，并具有所有库任何操作权限，具体操作如下：<br>在本机先使用root用户登录mysql：<br><code>mysql -u root -p&quot;youpassword&quot;</code><br>进行授权操作：<br><code>GRANT ALL PRIVILEGES ON *.* TO root@&quot;172.16.16.152&quot; IDENTIFIED BY &quot;youpassword&quot; WITH GRANT OPTION;</code><br>重载授权表：<br><code>FLUSH PRIVILEGES;</code><br>退出mysql数据库：<br><code>exit</code></p>
<p>三、允许root用户在一个特定的IP进行远程登录，并具有所有库特定操作权限，具体操作如下：<br>在本机先使用root用户登录mysql：<br><code>mysql -u root -p&quot;youpassword&quot;</code><br>进行授权操作：<br><code>GRANT select，insert，update，delete ON *.* TO root@&quot;172.16.16.152&quot; IDENTIFIED BY &quot;youpassword&quot;;</code><br>重载授权表：<br><code>FLUSH PRIVILEGES;</code><br>退出mysql数据库：<br><code>exit</code></p>
<p>四、删除用户授权，需要使用REVOKE命令，具体命令格式为：<br><code>REVOKE privileges ON 数据库[.表名] FROM user-name;</code><br>具体实例，先在本机登录mysql:<br><code>mysql -u root -p&quot;youpassword&quot;</code><br>进行授权操作：<br><code>GRANT select，insert，update，delete ON TEST-DB TO test-user@&quot;172.16.16.152&quot; IDENTIFIED BY &quot;youpassword&quot;;</code><br>再进行删除授权操作：<br><code>REVOKE all on TEST-DB from test-user;</code><br>****注：该操作只是清除了用户对于TEST-DB的相关授权权限，但是这个“test-user”这个用户还是存在。<br>最后从用户表内清除用户：<br><code>DELETE FROM user WHERE user=&quot;test-user&quot;;</code><br>重载授权表：<br><code>FLUSH PRIVILEGES;</code><br>退出mysql数据库：<br><code>exit</code></p>
<p>五、MYSQL权限详细分类：<br>全局管理权限：<br>FILE: 在MySQL服务器上读写文件。<br>PROCESS: 显示或杀死属于其它用户的服务线程。<br>RELOAD: 重载访问控制表，刷新日志等。<br>SHUTDOWN: 关闭MySQL服务。<br>数据库/数据表/数据列权限：<br>ALTER: 修改已存在的数据表(例如增加/删除列)和索引。<br>CREATE: 建立新的数据库或数据表。<br>DELETE: 删除表的记录。<br>DROP: 删除数据表或数据库。<br>INDEX: 建立或删除索引。<br>INSERT: 增加表的记录。<br>SELECT: 显示/搜索表的记录。<br>UPDATE: 修改表中已存在的记录。<br>特别的权限：<br>ALL: 允许做任何事(和root一样)。<br>USAGE: 只允许登录–其它什么也不允许做。</p>
<p>转载至Linux公社：<a href="http://www.linuxidc.com/Linux/2013-06/86459.htm">http://www.linuxidc.com/Linux/2013-06/86459.htm</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks</title>
    <url>/2021/01/13/react-hooks/</url>
    <content><![CDATA[<p>函数式编程将那些跟数据计算无关的操作，都称为 “副效应” （side effect） 。如果函数内部直接包含产生副效应的操作，就不再是纯函数了，我们称之为不纯的函数。<br>钩子（hook）就是 React 函数组件的副效应解决方案</p>
<h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>第一个参数是一个函数<br>第二个参数是一个数组（数组里的有一项变化就执行）（两个特例，1，不传。2，传一个空数组）</p>
<p>useEffect()的作用就是指定一个副效应函数，组件每渲染一次，该函数就自动执行一次。组件首次在网页 DOM 加载后，副效应函数也会执行。</p>
<ol>
<li>提高了代码复用（不用在mount和update里都写一遍函数）</li>
<li>优化了关注点分离（业务逻辑都在各自的useEffect里，互不干扰）</li>
</ol>
<p>只要是副效应，都可以使用useEffect()引入。它的常见用途有下面几种。</p>
<ol>
<li>获取数据（data fetching）</li>
<li>事件监听或订阅（setting up a subscription）</li>
<li>改变 DOM（changing the DOM）</li>
<li>输出日志（logging）<br><img src="https://img.mukewang.com/szimg/5ffedfaf00018a9919201080.jpg" alt=""><br><img src="https://img.mukewang.com/szimg/5ffee027000174c919201080.jpg" alt="副作用调用时机"><br><img src="https://img.mukewang.com/szimg/5ffee08c0001a6ae19201080.jpg" alt=""></li>
</ol>
<p>参考：<br><a href="http://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html">http://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>redis常用命令</title>
    <url>/2019/12/06/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure>
<p>显示所有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
<p>设置一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>
<p>获取一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>
<p>删除一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>
<p>清空当前数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>
<p>clear all database</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>
<p>获取类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure>
<p>获取哈希表中的所有域（field）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEYS key </span><br></pre></td></tr></table></figure>

<p>获取 hash 值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HGET KEY_NAME FIELD_NAME </span><br></pre></td></tr></table></figure>
<p>获取 hash 值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HGET KEY_NAME FIELD_NAME </span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>render函数</title>
    <url>/2020/08/13/render%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a>createElement 参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// @returns &#123;VNode&#125;</span><br><span class="line">createElement(</span><br><span class="line">  // &#123;String | Object | Function&#125;</span><br><span class="line">  // 一个 HTML 标签名、组件选项对象，或者</span><br><span class="line">  // resolve 了上述任何一种的一个 async 函数。必填项。</span><br><span class="line">  &#x27;div&#x27;,</span><br><span class="line"></span><br><span class="line">  // &#123;Object&#125;</span><br><span class="line">  // 一个与模板中 attribute 对应的数据对象。可选。</span><br><span class="line">  &#123;</span><br><span class="line">    // (详情见下一节)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // &#123;String | Array&#125;</span><br><span class="line">  // 子级虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span><br><span class="line">  // 也可以使用字符串来生成“文本虚拟节点”。可选。</span><br><span class="line">  [</span><br><span class="line">    &#x27;先写一些文字&#x27;,</span><br><span class="line">    createElement(&#x27;h1&#x27;, &#x27;一则头条&#x27;),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: &#x27;foobar&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="深入数据对象"><a href="#深入数据对象" class="headerlink" title="深入数据对象"></a>深入数据对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 与 `v-bind:class` 的 API 相同，</span><br><span class="line">  // 接受一个字符串、对象或字符串和对象组成的数组</span><br><span class="line">  &#x27;class&#x27;: &#123;</span><br><span class="line">    foo: true,</span><br><span class="line">    bar: false</span><br><span class="line">  &#125;,</span><br><span class="line">  // 与 `v-bind:style` 的 API 相同，</span><br><span class="line">  // 接受一个字符串、对象，或对象组成的数组</span><br><span class="line">  style: &#123;</span><br><span class="line">    color: &#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;14px&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 普通的 HTML attribute</span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: &#x27;foo&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 组件 prop</span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: &#x27;bar&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // DOM property</span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: &#x27;baz&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 事件监听器在 `on` 内，</span><br><span class="line">  // 但不再支持如 `v-on:keyup.enter` 这样的修饰器。</span><br><span class="line">  // 需要在处理函数中手动检查 keyCode。</span><br><span class="line">  on: &#123;</span><br><span class="line">    click: this.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  // 仅用于组件，用于监听原生事件，而不是组件内部使用</span><br><span class="line">  // `vm.$emit` 触发的事件。</span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: this.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  // 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span><br><span class="line">  // 赋值，因为 Vue 已经自动为你进行了同步。</span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#x27;my-custom-directive&#x27;,</span><br><span class="line">      value: &#x27;2&#x27;,</span><br><span class="line">      expression: &#x27;1 + 1&#x27;,</span><br><span class="line">      arg: &#x27;foo&#x27;,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 作用域插槽的格式为</span><br><span class="line">  // &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    default: props =&gt; createElement(&#x27;span&#x27;, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 如果组件是其它组件的子组件，需为插槽指定名称</span><br><span class="line">  slot: &#x27;name-of-slot&#x27;,</span><br><span class="line">  // 其它特殊顶层 property</span><br><span class="line">  key: &#x27;myKey&#x27;,</span><br><span class="line">  ref: &#x27;myRef&#x27;,</span><br><span class="line">  // 如果你在渲染函数中给多个元素都应用了相同的 ref 名，</span><br><span class="line">  // 那么 `$refs.myRef` 会变成一个数组。</span><br><span class="line">  refInFor: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>人性的弱点1之用户成长体系</title>
    <url>/2017/10/27/renxingderuodian1zhiyonghuyangchengxitong/</url>
    <content><![CDATA[<p>每个应用软件为了提高打开率，都加入了用户成长体系，最简单常见的就是签到，通过每天的签到获取积分换取奖励或者获得勋章，例如淘宝的淘金币，百度地图的签到抢地主，CF手游中的每天签到领奖励，淘票票每天登陆获取积分（购买电影票获取积分），网易云课堂每天打卡，百词斩每天背单词打卡，QQ音乐每天登陆提高等级，听一个歌手的歌曲达到一定时间获取歌手专属勋章，当然这其中最古老的先驱就是QQ等级了，每天登陆指定时间提高等级。 <img src="http://image.woshipm.com/wp-files/2016/11/1pWLP255zTUpAKn7SpHA.png" alt=""> 当然学习类的应用可以利用每日打卡激励学习者坚持每天的学习，但是其他的应用的签到打卡时间长了就会让人产生被绑架的感觉，必须每天坚持签到打卡，如果有一天断了，你所获得的奖励就会降低，或者无法获得勋章，例如淘宝的淘金币，第一天签到得5金币，第二天得10金币，每天多5金币，一直到30金币最高，如果有一天没签到当再签到时又会回到5金币。支付宝、淘宝、京东的会员系统，甚至在你购物达不到一定金额第二年会降级。 <img src="http://www.zhuyunfeng.com/wp-content/uploads/2017/10/2.jpg" alt=""> 各应用当然是为了利益最大化，驱使你每天打开APP，但是这却对用户造成了困扰，比方说QQ音乐的用户成长体系，你为了表示你对某位歌手的喜爱，你会不停的听他的歌曲，当连续7天听一个歌手的歌曲超过500分钟之后，你就会获得此歌手的专属勋章，当然勋章也分等级，刚开始是初级勋章，你为了提高勋章等级，就会每次打开QQ音乐的时候都特意听一下这位歌手的歌曲，因为每天只要听一首这位歌手的歌曲就会积20分，积分达到一定程度勋章就会升级，当然你如果真是喜欢这位歌手又不会为这些积分所累那就另说。 <img src="http://www.zhuyunfeng.com/wp-content/uploads/2017/10/3.jpg" alt=""> 你为了提高淘票票的等级需要不停的通过淘票票购买电影票；你为了提高支付宝等级不停的购物，使用支付宝支付，充值话费……；你为了获得鼓励金使用支付宝和微信的无现金支付想着今天我不去楼下超市买点东西我就亏了；你为了花掉商家给你的优惠券买一些并不是很需要的商品；你为了提高信用卡额度，消费的时候想是不是能刷这张卡（有点跑远了）。 你刚开始乐此不疲，感觉自己赚到了，时间一长你忽然发现这不是你想要的，你被商家领着往前走。 商家利用你的弱点来达到他们的目的，在这其中我们怎么样才能不受其所累，更好的做自己呢？ 嗯，这是一个值得思考的问题。</p>
<h2 id="用户成长体系设计分析"><a href="#用户成长体系设计分析" class="headerlink" title="用户成长体系设计分析"></a><a href="http://www.woshipm.com/pd/447292.html">用户成长体系设计分析</a></h2>]]></content>
      <categories>
        <category>psychology</category>
      </categories>
  </entry>
  <entry>
    <title>简历</title>
    <url>/2021/02/24/resume/</url>
    <content><![CDATA[<p>有良好的编程思维，熟悉设计模式</p>
<p>尖端科技</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>软件为什么不能是秒更的呢</title>
    <url>/2017/09/06/ruanjianweishenmebunengshimiaogengdene/</url>
    <content><![CDATA[<p>MIUI通过周更颠覆了系统更新的频率， 那软件为什么不能提高更新频率呢，客户提交bug下一秒就可以修复啊，当然还是需要热更新之类的技术，不然更新频率太高也会对用户产生负担。 当然另一方面，BS就要比CS更有优势了，不存在下载的问题。</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
  </entry>
  <entry>
    <title>safari setInterval 不准的问题</title>
    <url>/2022/06/07/safari-setInterval-%E4%B8%8D%E5%87%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(); </span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>; </span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">while</span>(i++ &lt; <span class="number">100000000</span>); </span><br><span class="line">&#125;, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fixed</span>(<span class="params"></span>) &#123; </span><br><span class="line">  count++; </span><br><span class="line">  <span class="keyword">var</span> offset = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - (startTime + count * <span class="number">1000</span>); </span><br><span class="line">  <span class="keyword">var</span> nextTime = <span class="number">1000</span> - offset; </span><br><span class="line">  <span class="keyword">if</span> (nextTime &lt; <span class="number">0</span>) nextTime = <span class="number">0</span>; </span><br><span class="line">  <span class="built_in">setTimeout</span>(fixed, nextTime); </span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - (startTime + count * <span class="number">1000</span>)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">setTimeout</span>(fixed, <span class="number">1000</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.jb51.net/article/49913.htm">参考</a></p>
<p><a href="https://imququ.com/post/ios-none-freeze-timer.html">不会被 iOS 停掉的网页定时器</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>从setTimeout()函数开始谈起</title>
    <url>/2017/08/22/settimeout/</url>
    <content><![CDATA[<p>最近在阮一峰老师的网站学习es6，在promise小节下面看到下面的代码，作为小白的我看到这个代码的第一反应是setTimeout怎么有三个参数，上网一查才知道，setTimeout可以跟多个参数，第三个及之后的参数都是第一个参数（函数）的参数</p>
<p>下面是一个<code>Promise</code>对象的简单例子。</p>
<pre><code>function timeout(ms) &#123;
  return new Promise((resolve, reject) =&gt; &#123;
    setTimeout(resolve, ms, &apos;done&apos;);
  &#125;);
&#125;

timeout(100).then((value) =&gt; &#123;
  console.log(value);
&#125;);</code></pre><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>setTimeout(code,millisec)</p>
<h3 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>),<span class="number">3000</span>);<span class="comment">//console.log(this)会立即执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;console.log(this)&#x27;</span>,<span class="number">3000</span>);<span class="comment">//console.log(this)加引号之后3s之后执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)&#125;,<span class="number">3000</span>);<span class="comment">//console.log(this)3s之后执行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">setTimeout</span>(test,<span class="number">3000</span>);<span class="comment">//console.log(this)3s之后执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="title function_">test</span>(),<span class="number">3000</span>);<span class="comment">//console.log(this)立即执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="string">&#x27;test()&#x27;</span>,<span class="number">3000</span>);<span class="comment">//console.log(this)3s之后执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：setTimeout里面的函数有三种正确写法 </p>
<ol>
<li>用引号引起来，</li>
<li>放到匿名函数里，</li>
<li>使用函数名直接调用，不加括号。   </li>
</ol>
<h3 id="第一个参数this的作用域"><a href="#第一个参数this的作用域" class="headerlink" title="第一个参数this的作用域"></a>第一个参数this的作用域</h3><p>参考：<a href="http://www.cnblogs.com/hutaoer/p/3423782.html">http://www.cnblogs.com/hutaoer/p/3423782.html</a> </p>
<p>第一段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">&quot;in the window&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="title function_">alert</span>(<span class="string">&#x27;outer &#x27;</span> + test)&#125;, <span class="number">0</span>); <span class="comment">// 输出 outer in the window ，默认在window的全局作用域下</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> test = <span class="string">&#x27;in the f!&#x27;</span>; <span class="comment">// 局部变量，window作用域不可访问</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="string">&#x27;alert(&quot;inner &quot; + test)&#x27;</span>, <span class="number">0</span>); <span class="comment">// 输出 inner in the window, 虽然在f方法的中调用，但执行代码(字符串形式的代码)默认在window全局作用域下，test也指向全局的test</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>
<p>第二段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">&quot;in the window&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="title function_">alert</span>(<span class="string">&#x27;outer&#x27;</span> + test)&#125;, <span class="number">0</span>); <span class="comment">// outer in the window  ，没有问题，在全局下调用，访问全局中的test</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="string">&#x27;in the f!&#x27;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;inner &#x27;</span>+ test)&#125;, <span class="number">0</span>);  <span class="comment">// inner in the f!  有问题，不是说好了执行函数中的this指向的是window吗？那test也应该对应window下的值才对，怎么test的值却是 f()中的值呢？？？？</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>
<p>第三段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">&quot;in the window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;outer &#x27;</span> + test)</span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// in the window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="string">&#x27;in the f!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;inner &#x27;</span> + test);<span class="comment">// 能访问到f中的test局部变量</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;inner &#x27;</span> + <span class="variable language_">this</span>.<span class="property">test</span>);<span class="comment">//window中的test</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(ff, <span class="number">0</span>); <span class="comment">// inner in the f!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>
<p>  总结：<br>三种写法中</p>
<ol>
<li>引号引起来的函数中的this指向和变量作用域都是window， </li>
<li>匿名函数中的变量作用域是上下文，this指向是window， </li>
<li>以函数名直接调用中的变量作用域是上下文，this指向是window。 第2和第3其实是一种写法，不同形式。 其实匿名函数中this应该指向词法作用域，这是javascript的一个错误，在箭头函数中已经修复了这个错误。   </li>
</ol>
<h3 id="箭头函数中的this作用域"><a href="#箭头函数中的this作用域" class="headerlink" title="箭头函数中的this作用域"></a>箭头函数中的this作用域</h3><p>参考：<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001438565969057627e5435793645b7acaee3b6869d1374000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001438565969057627e5435793645b7acaee3b6869d1374000</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>shell命令</title>
    <url>/2019/09/02/shell%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Bash(Bourne Again Shell)</p>
<h4 id="查看文件夹大小"><a href="#查看文件夹大小" class="headerlink" title="查看文件夹大小"></a>查看文件夹大小</h4><p>du -sh</p>
<h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><p>touch xxx</p>
<h4 id="cp-f-不起作用"><a href="#cp-f-不起作用" class="headerlink" title="cp -f 不起作用"></a>cp -f 不起作用</h4><p>默认cp命令是有别名(alias cp=’cp -i’)的,无法强制覆盖,即使你用 -f 参数也无法强制覆盖文件。</p>
<h5 id="加个反斜杠，可以使用-cp-执行-cp-命令时不走-alias"><a href="#加个反斜杠，可以使用-cp-执行-cp-命令时不走-alias" class="headerlink" title="加个反斜杠，可以使用 \cp 执行 cp 命令时不走 alias"></a>加个反斜杠，可以使用 \cp 执行 cp 命令时不走 alias</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\<span class="built_in">cp</span> -rf </span><br></pre></td></tr></table></figure>
<p>-r 文件夹<br>-f 强制覆盖，不提示</p>
<h5 id="临时取消-cp-的alias"><a href="#临时取消-cp-的alias" class="headerlink" title="临时取消 cp 的alias"></a>临时取消 cp 的alias</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unalias</span> <span class="built_in">cp</span></span><br><span class="line"><span class="built_in">cp</span> a /test/a</span><br></pre></td></tr></table></figure>

<h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p>scp 是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。<br>scp [可选参数] file_source file_target </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r ./dist/* root@ip:/www/wwwroot/jd.dreamlist.cn/</span><br></pre></td></tr></table></figure>

<h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure>
<h4 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h4><p>此功能是把当前主机的 id_rsa.pub copy 到目标主机的 authrized_keys 里，从而实现无密码登录目标主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@dreamlist.cn</span><br></pre></td></tr></table></figure>
<h4 id="tail-amp-head"><a href="#tail-amp-head" class="headerlink" title="tail &amp; head"></a>tail &amp; head</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-n&lt;行数&gt; 显示文件的尾部 n 行内容</span><br><span class="line">tail test.log -n 30</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>给 sh 文件可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod ugo+x deploy.sh</span><br></pre></td></tr></table></figure>
<h4 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsattr .user.ini</span><br></pre></td></tr></table></figure>
<h4 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr -i .user.ini</span><br></pre></td></tr></table></figure>
<h4 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h4><p>grep ‘test’ package.json</p>
<h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>创建链接</p>
<p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。</p>
<h5 id="hard-link"><a href="#hard-link" class="headerlink" title="hard link"></a>hard link</h5><p>ln f1 f2 </p>
<h5 id="soft-link-Symbolic-Link"><a href="#soft-link-Symbolic-Link" class="headerlink" title="soft link (Symbolic Link)"></a>soft link (Symbolic Link)</h5><p>ln -s f1 f3</p>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>ls -li   # -i参数显示文件的inode节点信息</p>
<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><h4 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h4><p>set nu</p>
<h4 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h4><p>sudo lsof -i :8080</p>
<h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><p>sudo kill -9 进程pid</p>
<h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><p>英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup Command [ Arg … ] [　&amp; ]</span><br></pre></td></tr></table></figure>
<p>Command：要执行的命令。</p>
<p>Arg：一些参数，可以指定输出文件。</p>
<p>&amp;：让命令在后台执行，终端退出后命令仍旧执行。</p>
<h4 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h4><p>ifconfig | grep “inet “ | grep -v 127.0.0.1</p>
<h4 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h4><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>ps -ef &amp; ps aux<br>-ef是System V展示风格，而aux是BSD风格。 </p>
<h5 id="top"><a href="#top" class="headerlink" title="top"></a>top</h5><p>按P – 以 CPU 占用率大小的顺序排列进程列表</p>
<p>按M – 以内存占用率大小的顺序排列进程列表<br>参考：<br><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p>
<p>top &amp; ps</p>
<p><a href="https://www.cnblogs.com/tudachui/p/9516009.html">https://www.cnblogs.com/tudachui/p/9516009.html</a></p>
]]></content>
      <categories>
        <category>technology</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell快捷键</title>
    <url>/2021/09/08/shell%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>下面列举一些经常使用的快捷键：</p>
<p>Ctrl + L 用于清理终端的内容，就是清屏的作用。其实 clear 命令也有同样效果，但是你不觉得 Ctrl + L 的按键比输入 clear 这五个字母更快速吗？<br>Ctrl + D 给终端传递 EOF （End Of File，文件结束符），在运行程序时很有用。有些程序我们需要在接收到 EOF 输入时结束，那么这个快捷键就可以派上用场了。比如我们之前演示过，退出 root 用户身份，就可以用 Ctrl + D。如果你在命令行提示符后什么也不输入的情况下直接按下这组快捷键，那么就会关闭当前的终端；<br>Shift + PgUp 用于向上滚屏，与鼠标的滚轮向上滚屏是一个效果；<br>Shift + PgDn 用于向下滚屏，与鼠标的滚轮向下滚屏是一个效果。<br>下面的快捷键在你编辑一条比较长的命令时很有用：</p>
<p>Ctrl + A 光标跳到一行命令的开头。一般来说，Home 键有相同的效果；<br>Ctrl + E 光标跳到一行命令的结尾。一般来说，End 键有相同的效果；。<br>Ctrl + U 删除所有在光标左侧的命令字符；<br>Ctrl + K 删除所有在光标右侧的命令字符；<br>Ctrl + W 删除光标左侧的一个“单词”，这里的“单词”指的是用空格隔开的一个字符串。例如 -a 就是一个“单词”；<br>Ctrl + Y 粘贴用 Ctrl + U、 Ctrl + K 或 Ctrl + W “删除”的字符串，有点像“剪切-粘贴”。</p>
<p>参考：<br><a href="https://www.imooc.com/read/39/article/463">https://www.imooc.com/read/39/article/463</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>什么是反向代理（转载）</title>
    <url>/2018/01/25/shenmeshifanxiangdailizhuanzai/</url>
    <content><![CDATA[<p>作者：车小胖 链接：<a href="https://www.zhihu.com/question/24723688/answer/160252724">https://www.zhihu.com/question/24723688/answer/160252724</a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>很久以前，老王去饭店吃饭，需要先到饭店，七荤八素点好菜，坐等饭菜上桌，然后大快朵颐，不亦乐乎。 有了第三方订餐外卖平台（<strong>代理</strong>），老王懒得动身前往饭店，老王打个电话或用APP，先选好某个饭店，再点好菜，外卖小哥会送上门来。 由于某个品牌的饭店口碑特别好，食客络绎不绝涌入，第三方订餐电话也不绝于耳，但是限于饭店接待能力有限，无法提供及时服务，很多食客等得不耐烦了，纷纷铩羽而归，饭店老总看着煮熟的鸭子飞走了，心疼不已。 痛定思痛，老总又成立了几个连锁饭店，形成一个集群，对外提供统一标准的菜品服务，电话订餐电话400-xxx-7777，当食客涌入饭店总台，总台将食客用大巴运到各个连锁店，这样食客既不需要排队，各连锁店都能高速运转起来，一举两得，老总乐开了花，并为此种运作模式起名为<strong>“反向代理”（Reverse Proxy)。</strong> <strong>反向代理</strong> 在计算机世界里，由于单个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。</p>
<p>&amp;amp;lt;img data-rawheight=”199” src=”<a href="https://pic4.zhimg.com/50/v2-3b4274d49d3babd1cc2ba521b72892aa\_hd.jpg&quot;">https://pic4.zhimg.com/50/v2-3b4274d49d3babd1cc2ba521b72892aa\_hd.jpg&quot;</a> data-rawwidth=”400” class=”content_image” width=”400”&amp;amp;gt;</p>
<p><img src="https://pic4.zhimg.com/80/v2-3b4274d49d3babd1cc2ba521b72892aa_hd.jpg" alt=""></p>
<p><strong>反向代理的实现</strong> 1）需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上 2）服务器返回自己的服务到负载均衡设备 3）负载均衡将服务器的服务返回用户 以上的潜台词是：用户和负载均衡设备直接通信，<strong>也意味着用户做服务器域名解析时，解析得到的IP其实是负载均衡的IP，而不是服务器的IP</strong>，这样有一个好处是，当新加入/移走服务器时，仅仅需要修改负载均衡的服务器列表，而不会影响现有的服务。 谈完反向代理服务，再来谈谈终端用户常用的代理服务。 <strong>代理</strong> 1）用户希望代理服务器帮助自己，和要访问服务器通信，为了实现此目标，需要以下工作： a) 用户IP报文的目的IP = 代理服务器IP b) 用户报文端口号 = 代理服务器监听端口号 c) HTTP 消息里的URL要提供服务器的链接 2）代理服务器可以根据c)里的链接与服务器直接通信 3）服务器返回网页 4）代理服务器打包3）中的网页，返回用户。 <strong>代理服务器应用场景</strong> <strong>场景一</strong> 如果不采用代理，用户的IP、端口号直接暴露在Internet（尽管地址转换NAT），外部主机依然可以根据IP、端口号来开采主机安全漏洞，所以在企业网，一般都是采用代理服务器访问互联网。 <strong>那有同学会有疑问，那代理服务器就没有安全漏洞吗？</strong> 相比千千万万的用户主机，代理服务器数量有限，修补安全漏洞更方便快捷。 <strong>场景二</strong> 在一个家庭局域网，家长觉得外部的世界是洪水猛兽，为了不让小盆友们学坏，决定不让小盆友们访问一些网站，可小盆友们有强烈的逆反心理，侬越是不让我看，我越是想看，于是小盆友们使用了代理服务器，这些代理服务器将禁止访问的网页打包好，然后再转交给小盆友，仅此而已。 当然关键的关键是<strong>代理服务器不在禁止名单当中！</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>数据库删除/清空和修改</title>
    <url>/2017/09/29/shujukucaozuo/</url>
    <content><![CDATA[<p>DELETE   语句每次删除一行，并在事务日志中为所删除的每行记录一项。<br>TRUNCATE   TABLE   通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。<br><strong>修改表名</strong><br>mysql&gt; alter table student rename person;<br>Query OK, 0 rows affected (0.03 sec)<br><strong>修改字段的数据类型</strong><br>mysql&gt; alter table person modify name varchar(20);<br>Query OK, 0 rows affected (0.18 sec) Records: 0 Duplicates: 0 Warnings: 0<br>此处modify后面的name为字段名，我们将原来的varchar(25)改为varchar(20)<br><strong>修改字段名</strong><br>mysql&gt; alter table person change stu_name name varchar(25);<br>Query OK, 0 rows affected (0.20 sec) Records: 0 Duplicates: 0 Warnings: 0</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
  </entry>
  <entry>
    <title>数据库去重</title>
    <url>/2017/09/28/shujukuxiangguan/</url>
    <content><![CDATA[<h1 id="数据库去重"><a href="#数据库去重" class="headerlink" title="数据库去重"></a>数据库去重</h1><p>使用distinct去重：<br>例：select distinct  column1,column2 … from table_name where ….;<br>注意：1.distinct只能放在去重字段的最前面<br>            2.distinct  后的字段名全部算在去重条件中   也就是如果 column1  且  column2 必须都相同才能算作重复的记录</p>
<p>数据库子查询怎么写？ 字句查询出去重的数据，单独使用可以正常查出数据 主句想要统计一下数量，但是报错 select count(*) from (SELECT DISTINCT lat,longi from test where id=11); 这个语句为什么是错误的？？？</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>database</category>
      </categories>
  </entry>
  <entry>
    <title>关于智能音箱以及下一代处理平台的一些思考</title>
    <url>/2017/08/25/some-thoughts-about-smart-speaker-and-ai/</url>
    <content><![CDATA[<p>语音识别和语音合成将是智能音箱以及人工智能发展的关键，这就像是电容屏之于智能手机，现在的语音识别和语音合成就像当年的电阻屏，如果能发展到电容屏的阶段，智能音箱以及人工智能将有一个质的飞跃。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>ssh免密码登录</title>
    <url>/2019/12/27/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>查看服务器和本地是否存在密钥，<br>密钥存放目录一般为当前用户家目录下的.ssh里<br>windows：</p>
<p><code>C:\Users\***\.ssh</code>  </p>
<p>linux：</p>
<p><code>/***/.ssh</code> 一般为： <code>/root/.ssh</code>  </p>
<p>如果没有，创建密钥  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa <span class="comment"># 一直默认回车就可以</span></span><br></pre></td></tr></table></figure>
<h2 id="终端下-ssh-命令登录"><a href="#终端下-ssh-命令登录" class="headerlink" title="终端下 ssh 命令登录"></a>终端下 ssh 命令登录</h2><p>把本地公钥添加到服务器的 .ssh/authorized_key 里  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@xxx.com</span><br></pre></td></tr></table></figure>
<p>如果没有 <code>authorized_key</code> 这个文件，手动创建<br>ssh root@ip 就可以免密码登录了</p>
<h2 id="使用-xshell-等-ssh-工具登录"><a href="#使用-xshell-等-ssh-工具登录" class="headerlink" title="使用 xshell 等 ssh 工具登录"></a>使用 xshell 等 ssh 工具登录</h2><ol>
<li>把服务器的公钥下载到本地</li>
<li>登录时需要填写用户名 (root)</li>
<li>选择登录方式为public Key</li>
<li>选择第一步下载的公钥</li>
</ol>
<p><a href="https://cloud.tencent.com/developer/article/1780788">参考</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>ssl证书</title>
    <url>/2021/12/23/ssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h3 id="自签证书"><a href="#自签证书" class="headerlink" title="自签证书"></a>自签证书</h3><p>参考 <a href="https://www.jianshu.com/p/d22baeae50ea">https://www.jianshu.com/p/d22baeae50ea</a></p>
<h3 id="浏览器报错-ERR-SSL-PROTOCOL-ERROR"><a href="#浏览器报错-ERR-SSL-PROTOCOL-ERROR" class="headerlink" title="浏览器报错 ERR_SSL_PROTOCOL_ERROR"></a>浏览器报错 ERR_SSL_PROTOCOL_ERROR</h3><p>或 curl 报错 wrong version number</p>
<p>修改 nginx 配置，<code>nginx -t</code> 查看配置文件所在路径</p>
<p>listen 443 ssl;</p>
<h3 id="浏览器报错-ERR-CERT-INVALID"><a href="#浏览器报错-ERR-CERT-INVALID" class="headerlink" title="浏览器报错 ERR_CERT_INVALID"></a>浏览器报错 ERR_CERT_INVALID</h3><p>输入 thisisunsafe </p>
<p>参考： <a href="https://segmentfault.com/a/1190000021843971">https://segmentfault.com/a/1190000021843971</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>太平洋时间</title>
    <url>/2017/09/12/taipingyangshijian/</url>
    <content><![CDATA[<p><strong>PDT</strong>（Pacific Daylight Time）太平洋夏季时间。 相对应的是<a href="https://baike.baidu.com/item/PST"><strong>PST</strong></a>（Pacific Standard Time ）。 夏时制结束后就是PST。 <strong>PST是<a href="https://baike.baidu.com/item/%E5%A4%AA%E5%B9%B3%E6%B4%8B">太平洋</a>标准时间（西八区），与北京时间（东八区）时差-16个小时，也就是北京时间减去16就是PST时间。而PDT比PST早1个小时，就是说PDT与北京时间时差为-15小时。</strong> 在2006年以及之前，美国<a href="https://baike.baidu.com/item/%E5%A4%AA%E5%B9%B3%E6%B4%8B">太平洋</a>时区总是于每年<a href="https://baike.baidu.com/item/%E5%9B%9B%E6%9C%88/67790">四月</a>第一个星期日深夜二时正将本地时间（UTC−8）转成夏令时间（UTC−7） ，并于十月的最后一个星期日深夜二时<a href="https://baike.baidu.com/item/%E6%AD%A3%E8%BD%AC">正转</a>回本地时间。 于2007年生效的2005年能源政策法案，决定了<strong>美国太平洋时区的夏令时间始于每年三月的第二个星期六深夜二时正，并终于每年十一月的第一个<a href="https://baike.baidu.com/item/%E6%98%9F%E6%9C%9F%E6%97%A5/25447">星期日</a>深夜二时正。</strong>而加拿大亦跟随美国的夏令时间制度。</p>
<p><strong>PDT转换成<a href="https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC/128981">北京</a>时间方法</strong></p>
<p>PDT从每年3月的第二个星期日到11月的第一个星期日期间和北京<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%B7%AE">时间差</a>15小时，其余月份和<a href="https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4/410384">北京时间</a>差16小时 。例如Oct 02, 2009 at 07:00 PDT= Oct 02, 2009 at 22:00 Beijing Time (7+15=22)</p>
]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
  </entry>
  <entry>
    <title>The director I like</title>
    <url>/2017/09/04/the-director-i-like/</url>
    <content><![CDATA[<p>希区柯克（惊魂记、后窗） </p>
<p>昆汀（低俗小说、杀死比尔） </p>
<p>诺兰 （记忆碎片、盗梦空间、星际穿越、蝙蝠侠） </p>
<p>李安（断背山、比利林恩的中场战事、色戒、饮食人生） </p>
<p>盖里奇（两杆大烟枪、偷抢拐骗） </p>
<p>王家卫（重庆森林、花样年华、春光乍泄） </p>
<p>贾樟柯（山河故人、天注定） </p>
<p>姜文（让子弹飞、眼光灿烂的日子、鬼子来了）</p>
<p>北野武（菊次郎的夏天）</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>The dog I like</title>
    <url>/2018/08/23/the-dog-i-like/</url>
    <content><![CDATA[<h5 id="柯基"><a href="#柯基" class="headerlink" title="柯基"></a>柯基</h5><h5 id="哈士奇"><a href="#哈士奇" class="headerlink" title="哈士奇"></a>哈士奇</h5><p><img src="http://pic249.nipic.com/file/20191101/28365949_142306695000_2.jpg" alt="husky" title="husky"></p>
<h5 id="拉布拉多"><a href="#拉布拉多" class="headerlink" title="拉布拉多"></a>拉布拉多</h5><h5 id="阿拉斯加"><a href="#阿拉斯加" class="headerlink" title="阿拉斯加"></a>阿拉斯加</h5><h5 id="萨摩耶"><a href="#萨摩耶" class="headerlink" title="萨摩耶"></a>萨摩耶</h5><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1256437552,306933866&fm=173&f.jpg" alt="萨摩耶" title="萨摩耶"></p>
<h5 id="柴犬"><a href="#柴犬" class="headerlink" title="柴犬"></a>柴犬</h5><h5 id="金毛"><a href="#金毛" class="headerlink" title="金毛"></a>金毛</h5>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>dog</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>需要学习的知识</title>
    <url>/2017/08/25/the-khowledge-of-front-end-i-should-learn/</url>
    <content><![CDATA[<h1 id="复习复习复习"><a href="#复习复习复习" class="headerlink" title="复习复习复习"></a>复习复习复习</h1><p>ES6<br>typescript 412<br>vuejs<br>reactjs (384electron)<br>ReactNative<br>nodejs<br>python<br>php/java<br>flutter<br>webpack<br>mongoDB<br>git<br>koa(express)<br>pug(jade)/EJS<br>less/sass</p>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>手写路由 280-2-8<br>vue.config.js</p>
<h2 id="express-amp-koa"><a href="#express-amp-koa" class="headerlink" title="express &amp; koa"></a>express &amp; koa</h2><p>178 trailer<br>320 blog<br>342 lincms<br>354 restfull api</p>
<p>中间件原理 320-9-15 blog<br>实现自己的koa2 218-11 mpvue</p>
<p>koa中间件 280-3-3 meituan<br>洋葱模型<br>中间件 是一个函数 参数 ctx 异步 next()</p>
<h2 id="全栈项目"><a href="#全栈项目" class="headerlink" title="全栈项目"></a>全栈项目</h2><p>博客 320<br>Restfull API 354<br>lincms 342<br>美团 nuxt 280<br>trailer </p>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>428-12-1<br>npm whoami<br>npm config ls<br>npm adduser</p>
<h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>husky commitizen commitlint git-cz</p>
<h2 id="vue源码228"><a href="#vue源码228" class="headerlink" title="vue源码228"></a>vue源码228</h2><p>mvvm 129-4-8</p>
<h2 id="设计模式-ES6-TS-数据结构-js-java-c"><a href="#设计模式-ES6-TS-数据结构-js-java-c" class="headerlink" title="设计模式 / ES6 / TS / 数据结构(js/java/c++)"></a>设计模式 / ES6 / TS / 数据结构(js/java/c++)</h2><h2 id="todo-935"><a href="#todo-935" class="headerlink" title="todo 935"></a>todo 935</h2>]]></content>
      <categories>
        <category>technology</category>
      </categories>
  </entry>
  <entry>
    <title>think-different</title>
    <url>/2019/08/13/think-different/</url>
    <content><![CDATA[<h2 id="乔布斯配音无字幕版"><a href="#乔布斯配音无字幕版" class="headerlink" title="乔布斯配音无字幕版"></a>乔布斯配音无字幕版</h2><iframe width=610 height=490 src="//player.bilibili.com/player.html?aid=51035081&cid=89357254&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h2 id="【英语原文】"><a href="#【英语原文】" class="headerlink" title="【英语原文】"></a>【英语原文】</h2><p>Here’s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules. And they have no respect for the status quo. You can quote them, disagree with them, glorify or vilify them. About the only thing you can’t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world are the ones who do.</p>
<h2 id="【中文译文】"><a href="#【中文译文】" class="headerlink" title="【中文译文】"></a>【中文译文】</h2><p>致疯狂的家伙们。他们不合时宜，我行我素。他们桀敖不驯，反叛忤逆。他们麻烦不断，惹是生非。他们像方孔中的圆桩。他们用与众不同的角度看待事情。他们既不墨守成规，也不安于现状。你尽可以认同他们，反对他们，赞美或者鄙视他们。不过你唯独不能漠视他们，因为他们改变着寻常事情。他们推动人类向前。也许有些人认为他们是疯子，在我们眼中他们却是天才。因为只有那些疯狂到认为自己可以改变世界的人，才能真正改变世界。</p>
<h2 id="【翻译笔记】"><a href="#【翻译笔记】" class="headerlink" title="【翻译笔记】"></a>【翻译笔记】</h2><p>1.misfit</p>
<p>n.不称职的人；不适应环境的人；</p>
<p>2.rebel</p>
<p>n.反叛者；造反者；叛乱分子</p>
<p>反抗者；反对任何权威和控制的人</p>
<p>3.troublemaker</p>
<p>n.捣乱者，闹事者；惹麻烦的人</p>
<p>这几个词本身都是偏贬义，但是在这个文案中，是赋予了它们褒义的。</p>
<p>4.peg</p>
<p>n.钉；栓；短桩；桶塞；挂钉；挂钩；测标；桩钉</p>
<p>有关peg的短语：</p>
<p>off the peg 现成的，标准的</p>
<p>I bought the dress off the peg.</p>
<p>这连衣裙我是买现成的。</p>
<p>peg down 用木桩钉住，约束，谈妥</p>
<p>The government is attempting to peg down the price of food.</p>
<p>政府正试图限制食品的价格。</p>
<p>5.status quo n. 现状，维持现状</p>
<p>“I’m not interested in preserving the status quo; I want to overthrow it.” —-Niccolo Machiavelli</p>
<p>我无意保留现状，我想要推翻它。– 尼科洛-马基雅维里</p>
<h2 id="“非同凡响”广告中出现的人物介绍（部分）"><a href="#“非同凡响”广告中出现的人物介绍（部分）" class="headerlink" title="“非同凡响”广告中出现的人物介绍（部分）"></a>“非同凡响”广告中出现的人物介绍（部分）</h2><p>Einstein</p>
<p>爱因斯坦：美籍德国犹太裔，理论物理学家，相对论的创立者，现代物理学奠基人。1921年获诺贝尔物理学奖，1999年被美国《时代周刊》评选为“世纪伟人”。</p>
<p>Bob Dylan</p>
<p>鲍勃·迪伦被认为是20世纪美国最重要、最有影响力的民谣、摇滚歌手，并被视为20世纪60年代美国民权运动的代言人。</p>
<p>Martin Luther King</p>
<p>马丁·路德·金：著名的美国民权运动领袖。1963年，马丁·路德·金晋见了肯尼迪总统，要求通过新的民权法，给黑人以平等的权利。1963年8月28日在林肯纪念堂前发表《我有一个梦想》的演说。1964年度诺贝尔和平奖获得者。1968年4月，马丁·路德·金前往孟菲斯市领导工人罢工被人刺杀，年仅39岁。1986年起美国政府将每年1月的第三个星期一定为马丁路德金全国纪念日。</p>
<p>Buckminster Fuller</p>
<p>巴克明斯特·福勒：美国建筑师，人称无害的怪物，半个世纪以前富勒就设计了一天能造好的“超轻大厦”、能潜水也能飞的汽车、拯救城市的“金刚罩”。他在1967年蒙特利尔世博会上把美国馆变成富勒球，使得轻质圆形穹顶今天风靡世界，他提倡的低碳概念启发了科学家并最终获得诺贝尔奖。</p>
<p>John Lennon and Yoko Ono</p>
<p>约翰·列侬：英国著名摇滚乐队“披头士”（The Beatles，也译做“甲壳虫”）成员，摇滚史上最伟大的音乐家之一 ，披头士乐队的灵魂人物，诗人，社会活动家，反战者。</p>
<p>小野洋子：日裔美籍音乐家、先锋艺术家，约翰·列侬（John Lennon）的第二位妻子。</p>
]]></content>
      <categories>
        <category>AD</category>
      </categories>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp centos下首页redirected you too many times.</title>
    <url>/2019/02/18/thinkphp-centos%E4%B8%8B%E9%A6%96%E9%A1%B5redirected-you-too-many-times/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>question</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员用过都说好的工具软件</title>
    <url>/2017/09/19/tools/</url>
    <content><![CDATA[<h2 id="一、远程-FTP"><a href="#一、远程-FTP" class="headerlink" title="一、远程+FTP"></a>一、远程+FTP</h2><p>Xshell Xftp 这两个简直不能再好用，收费软件，可以申请试用，没广告，界面简洁大气，UI设计，各种喜欢。  </p>
<p>FileZilla(ftp) 开源免费，不太喜欢它的logo，最大的特点就是相比其他ftp界面左右各多一栏上级目录，感觉占地方，还不实用。</p>
<h2 id="二、编辑器"><a href="#二、编辑器" class="headerlink" title="二、编辑器"></a>二、编辑器</h2><p>notepad++ 免费，尤其喜欢它的logo，绿色的变色龙，界面美观，但是快捷键和其他编辑器不太一样，其他功能都过于简单，适合右键快速打开代码，替代记事本。</p>
<p>sublime3.0 功能强大，可以安装很多插件，更新到3.0版，logo变成了扁平版，更好看了，可以免费用，但是老弹窗让你购买。 </p>
<p>idea家族各种编辑器 可以免费试用一个月，比上面两个编辑器稍显笨重，但是集成了CMD感觉比较方便。 </p>
<p>vscode 新晋大神，已占领前端</p>
<h2 id="三、服务器集成环境"><a href="#三、服务器集成环境" class="headerlink" title="三、服务器集成环境"></a>三、服务器集成环境</h2><p>Wampserver3.0+ 免费，集成了Apache，mysql，php，傻瓜式安装，第一次安装不同的电脑可能需要配置一下Apache，hosts之类的。 3.0以上版本更新了电脑右下角常驻logo，更好看了。 </p>
<p>phpstudy 自从了解了phpstudy我才发现它比wampserver强多了，可以切换nginx/apache/IIS，可以各种版本切换，各种实用功能，只是study的名字，以及简单的logo让我一直以为它是一个不专业的软件</p>
<h2 id="四、数据库管理软件"><a href="#四、数据库管理软件" class="headerlink" title="四、数据库管理软件"></a>四、数据库管理软件</h2><p>Navicat logo好看，UI美观，操作数据库简单可视化。 只是在本地导入导出的时候老出问题，用phpmyadmin就可以，暂时不知什么原因。 </p>
<p>phpmyadmin 导入几乎不出错，兼容性特别好</p>
<h2 id="五、命令行利器"><a href="#五、命令行利器" class="headerlink" title="五、命令行利器"></a>五、命令行利器</h2><p>cmder (windows)</p>
<p>iTerm2 (mac)</p>
<h2 id="六、抓包工具"><a href="#六、抓包工具" class="headerlink" title="六、抓包工具"></a>六、抓包工具</h2><p>fiddler 还没学会怎么用   </p>
<p>以上几款软件不仅是在使用上简单方便，而且界面UI美观，这是我推荐这几款软件的理由，甚至有一些是完全免费的软件。如果大家有能力的话，推荐大家使用收费版，支持这些优秀的软件。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>touchmove &amp; mousemove</title>
    <url>/2021/07/22/touchmove-mousemove/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>urb, urban, suburb, suburban lodge, cabin</title>
    <url>/2017/08/23/urban-and-cabin/</url>
    <content><![CDATA[<p>urb    英[‘ɜ:b]<br>美[‘ɜ:b]<br>abbr.    urban 都市的; urbanite 城市居民; urbanization 都市化; urbanist 城市规划专家;<br>[例句]Therefore, the paper puts forward encouraging domestic demand as a method for urban development and suggests relevant adaptation of urb.<br>在此基础上，提出了以扩大内需为主的城市发展思路。</p>
<p>urban    英[ˈɜ:bən]<br>美[ˈɜ:rbən]<br>adj.    都市的; 具有城市或城市生活特点的; 市内;<br>[例句]Most of the population is an urban population<br>绝大多数人口都是城镇居民。</p>
<p>suburb    英[ˈsʌbɜ:b]<br>美[ˈsʌbɜ:rb]<br>n.    郊区，城郊; 边缘; 附近，周围;<br>[例句]Anna was born in 1923 in Ardwick, a suburb of Manchester.<br>安娜于1923年出生在曼彻斯特的郊区阿德维克。<br>[其他]    复数：suburbs</p>
<p>suburban    英[səˈbɜ:bən]<br>美[səˈbɜ:rbən]<br>adj.    城郊的，在郊区的，城郊住宅区的; 土气的; 见闻不广的;<br>n.    郊区居民;<br>[例句]His clothes are conservative and suburban.<br>他衣着保守而传统。</p>
<p>cabin    英[ˈkæbɪn]<br>美[ˈkæbɪn]<br>n.    客舱; &lt;美&gt;小木屋; （轮船上工作或生活的） 隔间;<br>vt.    把…关在小屋里; 使受拘束;<br>vi.    住在小屋里;<br>[例句]He showed her to a small cabin.<br>他把她领到了一个小船舱。<br>[其他]    第三人称单数：cabins 复数：cabins 现在分词：cabining 过去式：cabined 过去分词：cabined</p>
<p>lodge    英[lɒdʒ]<br>美[lɑ:dʒ]<br>vi.    存放; 暂住; 埋入; （权利、权威等） 归属;<br>vt.    提出（报告、要求、申诉等）; 容纳; 寄存; 把（权利、权威等）授予;<br>n.    &lt;古&gt;小屋，草屋; （北美印第安人的） 帐篷; （森林、猎场等的） 看守小屋; （学校、工厂等的） 传达室;<br>[例句]I drove out of the gates, past the keeper’s lodge.<br>我驶出大门，经过守门人的小屋。<br>[其他]    第三人称单数：lodges 复数：lodges 现在分词：lodging 过去式：lodged 过去分词：lodged</p>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>english</tag>
      </tags>
  </entry>
  <entry>
    <title>vim手册</title>
    <url>/2021/06/16/vim%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ol>
<li><p>normal</p>
</li>
<li><p>insert</p>
<ol>
<li>i insert 前插</li>
<li>a append 后插</li>
<li>o open a line below</li>
<li>I 开头</li>
<li>A 末尾</li>
<li>O open a line up</li>
</ol>
</li>
<li><p>command</p>
<ol>
<li>替换 :% s/java/python/g</li>
<li>set nu 设置行号</li>
<li>sp 横分屏 vs 竖分屏</li>
</ol>
</li>
<li><p>visual</p>
<ol>
<li>v</li>
<li>V 整行</li>
<li>ctrl + v 块状</li>
</ol>
</li>
</ol>
<h3 id="vim-手册"><a href="#vim-手册" class="headerlink" title="vim 手册"></a>vim 手册</h3><p>vimtutor</p>
<h3 id="插入模式下"><a href="#插入模式下" class="headerlink" title="插入模式下"></a>插入模式下</h3><p>ctrl+h 删除上一个字符</p>
<p>ctrl+w 删除上一个单词</p>
<p>​ctrl+u 删除当前行光标之前的内容</p>
<h3 id="motions"><a href="#motions" class="headerlink" title="motions"></a>motions</h3><ol>
<li>hjkl</li>
<li>w/b move word by word</li>
<li>W/B move WORD by WORD</li>
<li>e/ge move to the end of a word</li>
<li>E/gE</li>
<li>f(character) find character in line</li>
<li>F(character)</li>
<li>t(character) until character in line</li>
<li>T(character)</li>
<li>; / , 继续搜索</li>
<li>0 first character of a line</li>
<li>^ first non-blank character of a line</li>
<li>$ end character of a line</li>
<li>g_ end non-blank character of a line</li>
<li>{ / } move entire paragraphs</li>
<li>ctrl + d / ctrl + u</li>
<li>ctrl + f / ctrl + b </li>
<li>/{pattern} search forward</li>
<li>?{pattern} search backward</li>
<li>n / N next/previous</li>
<li>ctrl + o go back</li>
<li>? without a pattern change the direction</li>
<li>gg top of a file</li>
<li>{line}gg</li>
<li>G end of a file</li>
</ol>
<h3 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h3><ol>
<li>u to undo</li>
<li>ctrl + r to redo</li>
<li>d delete<ol>
<li>d2w delete two words</li>
<li>dt; delete until ;</li>
<li>df; delete until ;(include ;)</li>
<li>d/hello delete until hello</li>
<li>diw</li>
<li>di”/‘/`</li>
</ol>
</li>
<li>dd delete a complete line</li>
<li>D delete from the cursor until the end of the line</li>
<li>c change (combine d and i)</li>
<li>cc change a complete line</li>
<li>C change from the cursor until the end of the line</li>
<li>. repeat change</li>
<li>y copy<ol>
<li>yw/y1w copy one word</li>
<li>y$ copy from the cursor until the end of the line</li>
</ol>
</li>
<li>yy copy a complete line</li>
<li>p 在当前位置之后</li>
<li>P 在当前位置之前</li>
</ol>
<h3 id="text-object"><a href="#text-object" class="headerlink" title="text-object"></a>text-object</h3><ol>
<li>w word</li>
<li>s sentence</li>
<li>p paragraph</li>
<li>“ quotes  special</li>
<li>‘ single quote special </li>
<li>` backtick special</li>
<li>() b</li>
<li>{} B</li>
<li>[]</li>
</ol>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>vscode 调试 js</title>
    <url>/2021/10/29/vscode-%E8%B0%83%E8%AF%95-js/</url>
    <content><![CDATA[<h3 id="调试-npm-script-命令"><a href="#调试-npm-script-命令" class="headerlink" title="调试 npm script 命令"></a>调试 npm script 命令</h3><p>注意：此为 configurations 中的一条配置，具体看下一条</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch via NPM&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span> <span class="comment">//runtimeExecutable表示要使用的运行时，默认为node，这里我们配置成了npm</span></span><br><span class="line">  <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;run-script&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dev&quot;</span>    <span class="comment">//这里的dev就对应package.json中的scripts中的dev</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9229</span>    <span class="comment">//这个端口是调试的端口，不是项目启动的端口</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="调试指定-js-文件"><a href="#调试指定-js-文件" class="headerlink" title="调试指定 js 文件"></a>调试指定 js 文件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">  <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">  <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwa-node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/test/filelist.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用-nodemon-调试"><a href="#使用-nodemon-调试" class="headerlink" title="使用 nodemon 调试"></a>使用 nodemon 调试</h3><p>参考：<br><a href="https://www.cnblogs.com/little-ab/p/11796952.html">https://www.cnblogs.com/little-ab/p/11796952.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>vscode快捷键</title>
    <url>/2021/06/11/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="代码之间跳转"><a href="#代码之间跳转" class="headerlink" title="代码之间跳转"></a>代码之间跳转</h2><h3 id="调回之前的代码"><a href="#调回之前的代码" class="headerlink" title="调回之前的代码"></a>调回之前的代码</h3><p>Mac 下</p>
<p><code>ctrl + &#39;-&#39;</code></p>
<p>window 下</p>
<p><code>alt + &#39;-&#39;</code></p>
<h2 id="折叠、展开代码块"><a href="#折叠、展开代码块" class="headerlink" title="折叠、展开代码块"></a>折叠、展开代码块</h2><p>以下命令要确保光标在编辑区域</p>
<ol>
<li><p>折叠所有区域代码的快捷键：ctrl+k, ctrl+0;</p>
<pre><code>先按下ctrl和K，再按下ctrl和0; (ctrl 不要松开)</code></pre></li>
<li><p>展开所有折叠区域代码的快捷键：ctrl +k, ctrl+J;</p>
<pre><code>先按下ctrl和K，再按下ctrl和J </code></pre></li>
<li><p>自动格式化代码的快捷键：ctrl+k, ctrl+f;</p>
<pre><code>先按下ctrl和K，再按下ctrl和f;</code></pre></li>
</ol>
<h2 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h2><p>command + shift + F</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>Vsftp的PASV mode和Port模式配置文件的设置</title>
    <url>/2017/11/20/vsftpdepasv-modeheportmoshipeizhiwenjiandeshezhi/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/yjken/p/3917940.html">https://www.cnblogs.com/yjken/p/3917940.html</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>vue-router的基本使用</title>
    <url>/2020/04/21/vue-router/</url>
    <content><![CDATA[<h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">this.$router.push(&#x27;/home/first&#x27;)</span><br><span class="line"></span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123; path: &#x27;/home/first&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">// 命名的路由</span><br><span class="line">this.$router.push(&#123; name: &#x27;home&#x27;, params: &#123; userId: wise &#125;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.12:8080/#/detail/?id=123</span><br><span class="line"></span><br><span class="line">let id = this.$route.query.id</span><br></pre></td></tr></table></figure>
<h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;/detail/:id/&#x27;,</span><br><span class="line">    name: &#x27;detail&#x27;,</span><br><span class="line">    component: detail,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: &#x27;详情&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let id = this.$route.params.id</span><br></pre></td></tr></table></figure>

<h2 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  $route(to,from)&#123;</span><br><span class="line">    console.log(to.path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue和react</title>
    <url>/2020/01/10/vue%E5%92%8Creact/</url>
    <content><![CDATA[<p>单向数据流<br>单向绑定，双向绑定<br>父子组件传值<br>声明式/命令式</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>vue数组双向绑定</title>
    <url>/2020/02/10/vue%E6%95%B0%E7%BB%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>问题1：如何把数组进行双向绑定</p>
<p>问题2：$set</p>
<p><a href="https://blog.csdn.net/shizhenweiszw/article/details/88580166">https://blog.csdn.net/shizhenweiszw/article/details/88580166</a><br><a href="https://blog.csdn.net/wxl1555/article/details/79616752">https://blog.csdn.net/wxl1555/article/details/79616752</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack入门</title>
    <url>/2017/09/01/webpackrumen/</url>
    <content><![CDATA[<p>默认配置文件<br>webpack.config.js<br>webpack命令参数 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--config webpack.config.js//指定配置文件 </span><br><span class="line">--progress //打包进度 </span><br><span class="line">--display-modules </span><br><span class="line">--colors </span><br><span class="line">--display-reason </span><br></pre></td></tr></table></figure>
<p>配置文件webpack.config.js中的参数<br>entry 指定入口文件，可以是字符串、数组、对象<br>output 指定输出<br>路径，文件名<br>path、filename、publicPath [name][hash][chunkhash]<br>plugins 指定插件，是数组，<br>如：html-webpack-plugin 需要先安装 npm install ，然后引用require()<br>module:{loaders:{}}</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>webpack之babel</title>
    <url>/2017/08/31/webpackzhibabel/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loader: &#x27;babel-loader&#x27;,//由babel变为babel-loader </span><br><span class="line">exclude:__dirname +&#x27;/node_modules/&#x27;,//这种方式更快 </span><br><span class="line">include:__dirname+&#x27;/src/&#x27;,//这种方式更快  </span><br><span class="line">exclude:path.resolve(__dirname ,&#x27;node_modules&#x27;),  </span><br><span class="line">include:path.resolve(__dirname ,&#x27;src&#x27;),</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>windows terminal</title>
    <url>/2020/08/19/windows-terminal/</url>
    <content><![CDATA[<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>请使用 nerd-fonts 字体， powerline fonts 字体，部分图标可能无法显示   </p>
<h3 id="安装-windows-Terminal"><a href="#安装-windows-Terminal" class="headerlink" title="安装 windows Terminal"></a>安装 windows Terminal</h3><ol>
<li>windows 应用商店安装</li>
<li>github 下载安装</li>
</ol>
<h3 id="安装-powershell-7"><a href="#安装-powershell-7" class="headerlink" title="安装 powershell 7"></a>安装 powershell 7</h3><p>github 下载安装<br>如果继续使用 powershell 5.1  </p>
<ol>
<li>可能需要 Change the execution policy<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Get-ExecutionPolicy -List</span><br></pre></td></tr></table></figure></li>
<li>升级 PowerShellGet (否则接下来无法安装 PSReadline)<br>Windows PowerShell 5.1 comes with version 1.0.0.1 of PowerShellGet preinstalled.<br>This version of PowerShellGet has a limited features and doesn’t support the updated capabilities of the PowerShell Gallery. To be supported, you must update to the latest version.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install-Module -Name PowerShellGet -Force</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="安装-powershell-插件"><a href="#安装-powershell-插件" class="headerlink" title="安装 powershell 插件"></a>安装 powershell 插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zsh</span><br><span class="line">Install-Module -Name PSReadLine -AllowPrerelease -Force</span><br><span class="line"></span><br><span class="line"># 2. 安装 posh-git 包，让你的 git 更好用</span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line"></span><br><span class="line"># 3. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅</span><br><span class="line">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></table></figure>
<h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>安装字体，否则乱码   </p>
<h4 id="nerd-fonts-推荐"><a href="#nerd-fonts-推荐" class="headerlink" title="nerd-fonts(推荐)"></a>nerd-fonts(推荐)</h4><ol>
<li>下载安装(推荐)<br><a href="https://www.nerdfonts.com/">nerd fonts 官网</a><br><a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">Meslo下载地址</a> (推荐)<br>解压<br>进入 ttf 文件夹<br>双击字体文件依次安装 或 全选-》右键-》安装</li>
<li>命令安装（beta，需要管理员身份)<br>oh-my-posh font install</li>
</ol>
<h4 id="powerline-fonts"><a href="#powerline-fonts" class="headerlink" title="powerline fonts"></a>powerline fonts</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</span><br><span class="line"><span class="built_in">cd</span> .\fonts\</span><br><span class="line">.\install.ps1</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">del .\fonts\ -Recurse -Force</span><br></pre></td></tr></table></figure>

<h3 id="配置-windows-Terminal"><a href="#配置-windows-Terminal" class="headerlink" title="配置 windows Terminal"></a>配置 windows Terminal</h3><ol>
<li>可视化界面配置</li>
<li>json 文件配置<br>guid 需要生成，文章末尾有生成 guid 的网站<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 默认的配置就是我们的新 powershell（重要！！！）</span><br><span class="line">&quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    // Powershell 7.1.0-preview.6 配置</span><br><span class="line">    &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,</span><br><span class="line">    &quot;hidden&quot;: false,</span><br><span class="line">    &quot;name&quot;: &quot;pwsh&quot;,</span><br><span class="line">    // -nologo 去掉启动时的logo等信息输出</span><br><span class="line">    &quot;commandline&quot;: &quot;D:/Program Files/PowerShell/7-preview/pwsh.exe -nologo&quot;,</span><br><span class="line">    &quot;icon&quot;: &quot;D:/Program Files/PowerShell/7-preview/assets/Powershell_avatar.ico&quot;,</span><br><span class="line">    //&quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;,</span><br><span class="line">    // 启动菜单一定要设置为 &lt;.&gt;，否则后面重要的一步将会无效！</span><br><span class="line">    &quot;startingDirectory&quot;: &quot;.&quot;,</span><br><span class="line">    // 字体</span><br><span class="line">    &quot;fontFace&quot;: &quot;Fira Code&quot;,</span><br><span class="line">    &quot;fontSize&quot;: 11,</span><br><span class="line">    &quot;historySize&quot;: 9001,</span><br><span class="line">    &quot;padding&quot;: &quot;5, 5, 20, 25&quot;,</span><br><span class="line">    &quot;snapOnInput&quot;: true,</span><br><span class="line">    &quot;useAcrylic&quot;: false,</span><br><span class="line">    // 颜色方案</span><br><span class="line">    // &quot;colorScheme&quot;: &quot;Homebrew&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加-Powershell-启动参数"><a href="#添加-Powershell-启动参数" class="headerlink" title="添加 Powershell 启动参数"></a>添加 Powershell 启动参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span> <span class="comment"># 打开配置文件</span></span><br></pre></td></tr></table></figure>
<p>如果上面代码报错找不到文件，新建一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">New-Item -Path <span class="variable">$PROFILE</span> -Type File -Force</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#------------------------------- Import Modules BEGIN -------------------------------</span><br><span class="line"># 引入 posh-git</span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"># 初始化 oh-my-posh 并设置 PowerShell 主题</span><br><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\paradox.omp.json&quot; | Invoke-Expression</span><br><span class="line"># oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot; | Invoke-Expression</span><br><span class="line">#------------------------------- Import Modules END   -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-------------------------------  Set Hot-keys BEGIN  -------------------------------</span><br><span class="line"># 设置 Tab 键补全</span><br><span class="line"># Set-PSReadlineKeyHandler -Key Tab -Function Complete</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+d 为退出 PowerShell</span><br><span class="line">Set-PSReadlineKeyHandler -Key &quot;Ctrl+d&quot; -Function ViExit</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+z 为撤销</span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo</span><br><span class="line"></span><br><span class="line">#-------------------------------  Set Hot-keys END    -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考：<br><a href="https://ohmyposh.dev/">on-my-posh 官网</a><br><a href="https://www.cnblogs.com/Rohn/p/12940312.html">https://www.cnblogs.com/Rohn/p/12940312.html</a><br><a href="https://zhuanlan.zhihu.com/p/137595941">https://zhuanlan.zhihu.com/p/137595941</a><br><a href="https://blog.csdn.net/WPwalter/article/details/100159481">https://blog.csdn.net/WPwalter/article/details/100159481</a><br>字体：<br><a href="https://sspai.com/post/52907">https://sspai.com/post/52907</a><br>powershell 乱码，vscode 乱码 :<br><a href="https://zhuanlan.zhihu.com/p/51901035">https://zhuanlan.zhihu.com/p/51901035</a><br>其他：<br>guid 生成工具<br><a href="https://www.qvdv.com/tools/qvdv-guid.html">https://www.qvdv.com/tools/qvdv-guid.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>windows服务器添加远程控制用户</title>
    <url>/2020/08/18/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>两种方式</p>
<ol>
<li>控制面板-用户帐户-用户帐户-管理其他帐户-添加用户账户</li>
<li>服务器管理器-工具-计算机管理-系统工具-本地用户和组-用户-右键新用户-记得右键设置密码<h4 id="赋予远程控制组"><a href="#赋予远程控制组" class="headerlink" title="赋予远程控制组"></a>赋予远程控制组</h4>两种方式</li>
<li>上一步第二种方法直接右键用户选属性-隶属于选项卡-添加 Remote Desktop Users 组</li>
<li>右键这台电脑-属性-更改设置-远程选项卡-选择用户-添加相应用户</li>
</ol>
<p>参考：<br><a href="https://blog.csdn.net/zhuge_Spring/article/details/107005114">https://blog.csdn.net/zhuge_Spring/article/details/107005114</a><br>补充：<br>ie增强的安全配置如何关闭<br><a href="https://jingyan.baidu.com/article/ce09321b63a43c2bfe858f5f.html">https://jingyan.baidu.com/article/ce09321b63a43c2bfe858f5f.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>wordpress转移服务器遇到的问题</title>
    <url>/2017/09/14/wordpresszhuanyifuwuqiyudaodewenti/</url>
    <content><![CDATA[<p>1.更换数据库，数据库配置在wp-config.php里</p>
<p>2.更换域名，修改数据库里wp_options表里的 siteurl（option_id=1)和home(最新版本中option_id一般为2）的链接</p>
<p>3.找回密码，邮箱无法发送邮件，报错</p>
<p>无法发送电子邮件 可能原因：您的主机禁用了mail()函数</p>
<p>Linux服务器安装sendmail</p>
<p>Centos</p>
<p>Yum install sendmail</p>
<p>Ubuntu</p>
<p>Apt-get install sendmail</p>
<p>不报错了，但是还是无法收到邮件</p>
<p>更改数据库wp_users表</p>
<p>把密码字段修改为hello的MD5值</p>
<p>5d41402abc4b2a76b9719d911017c592</p>
<p>可以用hello登录，然后在后台更改密码。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>悟以往之不谏，知来者之可追</title>
    <url>/2017/10/09/wuyiwangzhibujianzhilaizhezhikezhui/</url>
    <content><![CDATA[<h1 id="归去来兮辞·并序"><a href="#归去来兮辞·并序" class="headerlink" title="归去来兮辞·并序"></a>归去来兮辞·并序</h1><p><a href="http://hanyu.baidu.com/s?wd=%E9%99%B6%E6%B8%8A%E6%98%8E">【作者】陶渊明 </a>【朝代】魏晋</p>
<p>余家贫，耕植不足以自给。幼稚盈室，瓶无储粟，生生所资，未见其术。亲故多劝余为长吏，脱然有怀，求之靡途。会有四方之事，诸侯以惠爱为德，家叔以余贫苦，遂见用于小邑。于时风波未静，心惮远役，彭泽去家百里，公田之利，足以为酒。故便求之。及少日，眷然有归欤之情。何则？质性自然，非矫厉所得。饥冻虽切，违己交病。尝从人事，皆口腹自役。于是怅然慷慨，深愧平生之志。犹望一稔，当敛裳宵逝。寻程氏妹丧于武昌，情在骏奔，自免去职。仲秋至冬，在官八十余日。因事顺心，命篇曰《归去来兮》。乙巳岁十一月也。</p>
<p>归去来兮，田园将芜胡不归？既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。</p>
<p>乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜。倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关。策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还。景翳翳以将入，抚孤松而盘桓。</p>
<p>归去来兮，请息交以绝游。世与我而相违，复驾言兮焉求？悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经丘。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。</p>
<p>已矣乎！寓形宇内复几时？曷不委心任去留？胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐夫天命复奚疑！</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>摸鱼儿·雁丘词</title>
    <url>/2018/04/09/yanqiuci/</url>
    <content><![CDATA[<h1 id="摸鱼儿·雁丘词"><a href="#摸鱼儿·雁丘词" class="headerlink" title="摸鱼儿·雁丘词"></a>摸鱼儿·雁丘词</h1><p>作者：元好问</p>
<p>问世间情是何物，直教生死相许。天南地北双飞客，老翅几回寒暑。欢乐趣，离别苦，就中更有痴儿女。君应有语，渺万里层云，千山暮雪，只影向谁去。横汾路，寂寞当年箫鼓，荒烟依旧平楚。招魂楚些何嗟及，山鬼暗啼风雨。天也妒，未信与，莺儿燕子俱黄土。千秋万古，为留待骚人，狂歌痛饮，来访雁邱处。</p>
<p>这首词的首句大家一定很熟悉。不过全词未必了解，今天特将其录下，并讲一讲其中的故事。当年，元好问去并州赴试，途中遇到一个捕雁者。这个捕雁者告诉元好问今天遇到的一件奇事：他今天设网捕雁，捕得一只，但一只脱网而逃。岂料脱网之雁并不飞走，而是在他上空盘旋一阵，然后投地而死。元好问看看捕雁者手中的两只雁，一时心绪难平。便花钱买下这两只雁，接着把它们葬在汾河岸边，垒上石头做为记号，号曰“雁邱”，并作《雁邱词》。</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>zsh 设置代理</title>
    <url>/2021/10/03/zsh-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>在 <code>~/.zshrc</code> 文件里添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias setproxy=&quot;export ALL_PROXY=http://127.0.0.1:15236&quot;</span><br><span class="line">alias unsetproxy=&quot;unset ALL_PROXY&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">setproxy</span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">unsetproxy</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_44259233/article/details/108403620">参考</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>zsh 自动补全、语法高亮插件</title>
    <url>/2021/11/25/zsh%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>在日常使用 zsh 的过程中，如果需要打很多命令，会很麻烦，除了可以使用ctrl+r 的方式来查询历史命令，还可以通过插件的方式来自动匹配命令，提高效率。</p>
<p>语法高亮也是帮助我们不要打错命令的好帮手。</p>
<p>第一步，进入 zsh 插件目录，并 clone 项目到此目录中：<br>cd “$ZSH_CUSTOM/plugins”<br>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a><br>git clone <a href="https://github.com/zsh-users/zsh-autosuggestions.git">https://github.com/zsh-users/zsh-autosuggestions.git</a><br>第二步，配置 .zshrc 文件<br>… 上面省略<br>plugins = (git zsh-autosuggestions zsh-syntax-highlighting)<br>… 下面省略<br>最后一步，让配置生效<br>zsh<br>完成！👍</p>
<p>作者：万有引力万有<br>链接：<a href="https://www.jianshu.com/p/d70f9c4cb47c">https://www.jianshu.com/p/d70f9c4cb47c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>一次升级babel引发的血案</title>
    <url>/2021/09/07/%E4%B8%80%E6%AC%A1%E5%8D%87%E7%BA%A7babel%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>关于三目运算符</title>
    <url>/2019/12/04/%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>最近偶尔又翻到bobo老师的慕课专栏里的第一篇文章</p>
<p><a href="https://www.imooc.com/read/27/article/254">编程语言的发展趋势：从没有分号，到DSL</a></p>
<p>看到里面讲到三目运算符，又想起bobo老师在慕课网swift课（课程好像下线了）里也提到过。<br>大致意思是说swift和python中的三目运算符在逻辑表意上（以下简称语义化）更好。<br>但是我感觉swift和python中的三目运算符形式，理解的时候还要拐一下弯。<br>return true if(条件成立）else false<br>而java和js中的三目运算符，当你熟练掌握之后，不仅从形式上更美观，而且也很容易理解。<br>return if(条件成立）ture else false<br>(当我写下这两个return语句的时候，我发现的确上面那个更好理解，但是我发现这主要是前面return的问题，如果没有return的话，下面那个就是一个最简单的if else语句，而上面那个很好的和return结合了，语义化更好）</p>
<p>下文中<br>把python和swift中的形式叫新的三目运算符（可能它不叫三目运算符）<br>把java和js中的形式叫旧的三目运算符或原先的三目运算符</p>
<p>当然对于新人或者不会编程语言的人来说，python和swift中的应该更容易看明白。</p>
<p>我还记得还是编程小白的时候，也是用了很长时间才能一遇到三目运算符就像加减乘除一样瞬间理解，也就是说原先的三目运算符需要一个学习成本，而新的三目运算符学习成本比较低，就像是自然语言一样。</p>
<p>从代码的优雅上来说，我还是更喜欢原先的三目运算符</p>
<p>另外三目运算符的一个主要功能就是简化代码，新的只是把两个符号换成了两个英文字母，在没有过多增加复杂度的情况下达到了语义化的目的</p>
<p>再者，这种return放前面，if放后面的倒装结构本来就更符合英语的语法结构<br>如果想要更语义化一些，肯定就变成了下面这种<br>if(条件成立) return true else return false<br>而这又回到了if else语句，缺失了简洁性。（可能未来的编程语言不需要简洁性，直接自然语言。比如：<br>未来的你让你的机器人助理给你买张机票，你会说：如果有靠窗的给我买靠窗的，没有的话，就随便买吧。）</p>
<p>所以新的三目运算符可能是在简洁性和语义化之间做了一个最好的取舍。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
  </entry>
  <entry>
    <title>为什么 js 的 forEach 不支持 await</title>
    <url>/2022/01/27/%E4%B8%BA%E4%BB%80%E4%B9%88-js-%E7%9A%84-foreach-%E4%B8%8D%E6%94%AF%E6%8C%81-await/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么 forEach 不行，而 普通 for 循环 和 for…of 却正常呢？</p>
<p>我们得先从 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#polyfill">forEach 的源码</a> 看起：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Production steps of ECMA-262, Edition 5, 15.4.4.18</span></span><br><span class="line"><span class="comment">// Reference: http://es5.github.io/#x15.4.4.18</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span> = <span class="keyword">function</span>(<span class="params">callback<span class="comment">/*, thisArg*/</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> T, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is null or not defined&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Let O be the result of calling toObject() passing the</span></span><br><span class="line">    <span class="comment">// |this| value as the argument.</span></span><br><span class="line">    <span class="keyword">var</span> O = <span class="title class_">Object</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Let lenValue be the result of calling the Get() internal</span></span><br><span class="line">    <span class="comment">// method of O with the argument &quot;length&quot;.</span></span><br><span class="line">    <span class="comment">// 3. Let len be toUint32(lenValue).</span></span><br><span class="line">    <span class="keyword">var</span> len = O.<span class="property">length</span> &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. If isCallable(callback) is false, throw a TypeError exception. </span></span><br><span class="line">    <span class="comment">// See: http://es5.github.com/#x9.11</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(callback + <span class="string">&#x27; is not a function&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. If thisArg was supplied, let T be thisArg; else let</span></span><br><span class="line">    <span class="comment">// T be undefined.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      T = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. Let k be 0.</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. Repeat while k &lt; len.</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// a. Let Pk be ToString(k).</span></span><br><span class="line">      <span class="comment">//    This is implicit for LHS operands of the in operator.</span></span><br><span class="line">      <span class="comment">// b. Let kPresent be the result of calling the HasProperty</span></span><br><span class="line">      <span class="comment">//    internal method of O with argument Pk.</span></span><br><span class="line">      <span class="comment">//    This step can be combined with c.</span></span><br><span class="line">      <span class="comment">// c. If kPresent is true, then</span></span><br><span class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i. Let kValue be the result of calling the Get internal</span></span><br><span class="line">        <span class="comment">// method of O with argument Pk.</span></span><br><span class="line">        kValue = O[k];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ii. Call the Call internal method of callback with T as</span></span><br><span class="line">        <span class="comment">// the this value and argument list containing kValue, k, and O.</span></span><br><span class="line">        callback.<span class="title function_">call</span>(T, kValue, k, O);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// d. Increase k by 1.</span></span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 8. return undefined.</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>摘抄最重要的部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">O 为传入数组</span></span><br><span class="line"><span class="comment">len 为传入数组长度</span></span><br><span class="line"><span class="comment">callback 为传入回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">  <span class="keyword">var</span> kValue; </span><br><span class="line">  <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123; </span><br><span class="line">    kValue = O[k]; </span><br><span class="line">    callback.<span class="title function_">call</span>(T, kValue, k, O);</span><br><span class="line">  &#125; </span><br><span class="line">  k++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>callback.call(T, kValue, k, O);</code> 这一句，callback 其实是我们传入的一个被 async 封装的 promise 对象，而 Array.prototype.forEach 内部并未对这个 promise 对象做任何处理，只是忽略它。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果我们尝试把 Array.prototype.forEach 改造一下，让它不要忽视，就可以达到效果了，如下：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">callback<span class="comment">/*, thisArg*/</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ………</span></span><br><span class="line">  <span class="keyword">await</span> callback.<span class="title function_">call</span>(T, kValue, k, O);</span><br><span class="line">  <span class="comment">// ………</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>你总不能去侵入式的改造Array.prototype.forEach吧！所以最简单的办法就是抛弃 forEach，使用 for…of 或者 for 循环！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://www.cnblogs.com/xjnotxj/p/10629900.html">参考</a></h2>]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>为什么说 Koa 基于洋葱模型,而 Express 不是</title>
    <url>/2022/04/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4-Koa-%E5%9F%BA%E4%BA%8E%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B-%E8%80%8C-Express-%E4%B8%8D%E6%98%AF/</url>
    <content><![CDATA[<p>最近看光哥的文章，说 Express 是洋葱模型。我记得 Koa 是洋葱模型，而且这是其与 Express 不同的地方之一。<br>于是搜索引擎搜索了一通，只有说 Koa 是洋葱模型的，没有说 Express 是洋葱模型的。<br>而且一般都会提供下面的代码证明 Koa 是洋葱模型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa-app.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一层洋葱 - 开始&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一层洋葱 - 结束&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二层洋葱 - 开始&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二层洋葱 - 结束&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三层洋葱 - 开始&#x27;</span>)</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三层洋葱 - 结束&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p>控制台打印如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一层洋葱 - 开始</span><br><span class="line">  第二层洋葱 - 开始</span><br><span class="line">    第三层洋葱 - 开始</span><br><span class="line">    第三层洋葱 - 结束</span><br><span class="line">  第二层洋葱 - 结束</span><br><span class="line">第一层洋葱 - 结束</span><br></pre></td></tr></table></figure>
<p>看样子真像那么回事</p>
<p>于是我用 Express 试了一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一层洋葱 - 开始&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一层洋葱 - 结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  第二层洋葱 - 开始&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  第二层洋葱 - 结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;    第三层洋葱 - 开始&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;    第三层洋葱 - 结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>控制台打印和 koa 的例子是一样的<br>什么，难道 Express 也是洋葱模型</p>
<p>其实，以上例子并不能说明 Koa 是洋葱模型，洋葱模型的关键是，在<code>请求返回之前</code>，你的请求是不是经过中间件两次，而且按照先进后出的顺序。</p>
<p>Koa 模型<br>进洋葱 -&gt; 出洋葱 -&gt; 返回请求<br>Express 模型<br>进洋葱 -&gt; 返回请求 -&gt; 出洋葱</p>
<p>以下代码才真正能体现 Koa 的洋葱模型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">indent</span> = (<span class="params">n</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">join</span>(<span class="string">&quot;&amp;nbsp;&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&quot;&lt;h3&gt;第一层洋葱 - 开始&lt;/h3&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">&quot;&lt;h3&gt;第一层洋葱 - 结束&lt;/h3&gt;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">4</span>)&#125;</span>第二层洋葱 - 开始&lt;/h3&gt;`</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">4</span>)&#125;</span>第二层洋葱 - 结束&lt;/h3&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">8</span>)&#125;</span>第三层洋葱 - 开始&lt;/h3&gt;`</span>;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">8</span>)&#125;</span>第三层洋葱 - 结束&lt;/h3&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">12</span>)&#125;</span>koa 核心业务&lt;/h3&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>浏览器显示结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一层洋葱 - 开始</span><br><span class="line">   第二层洋葱 - 开始</span><br><span class="line">       第三层洋葱 - 开始</span><br><span class="line">           koa 核心业务</span><br><span class="line">       第三层洋葱 - 结束</span><br><span class="line">   第二层洋葱 - 结束</span><br><span class="line">第一层洋葱 - 结束</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">indent</span> = (<span class="params">n</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">join</span>(<span class="string">&quot;&amp;nbsp;&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">body</span> = <span class="string">&quot;&lt;h3&gt;第一层洋葱 - 开始&lt;/h3&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">&quot;&lt;h3&gt;第一层洋葱 - 结束&lt;/h3&gt;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">4</span>)&#125;</span>第二层洋葱 - 开始&lt;/h3&gt;`</span>;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">4</span>)&#125;</span>第二层洋葱 - 结束&lt;/h3&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">8</span>)&#125;</span>第三层洋葱 - 开始&lt;/h3&gt;`</span>;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">8</span>)&#125;</span>第三层洋葱 - 结束&lt;/h3&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">body</span> += <span class="string">`&lt;h3&gt;<span class="subst">$&#123;indent(<span class="number">12</span>)&#125;</span>我的核心业务&lt;/h3&gt;`</span>;</span><br><span class="line">  res.<span class="title function_">send</span>(res.<span class="property">body</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>浏览器显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一层洋葱 - 开始</span><br><span class="line">   第二层洋葱 - 开始</span><br><span class="line">       第三层洋葱 - 开始</span><br><span class="line">           我的核心业务</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>人生的道路虽然漫长，但紧要处常常只有几步，特别是当人年轻的时候。</title>
    <url>/2018/05/10/%E4%BA%BA%E7%94%9F%E7%9A%84%E9%81%93%E8%B7%AF%E8%99%BD%E7%84%B6%E6%BC%AB%E9%95%BF%EF%BC%8C%E4%BD%86%E7%B4%A7%E8%A6%81%E5%A4%84%E5%B8%B8%E5%B8%B8%E5%8F%AA%E6%9C%89%E5%87%A0%E6%AD%A5%EF%BC%8C%E7%89%B9%E5%88%AB%E6%98%AF%E5%BD%93%E4%BA%BA%E5%B9%B4%E8%BD%BB%E7%9A%84%E6%97%B6%E5%80%99%E3%80%82/</url>
    <content><![CDATA[<div>
<div>

<p><em><strong>人生的道路虽然漫长，但紧要处常常只有几步，特别是当人年轻的时候。</strong></em></p>
<p><em><strong>没有一个人的生活道路是笔直的、没有岔道的。有些岔道口，譬如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影响一生。</strong></em></p>
<p><em>**                                                                  &#8211;柳青**</em></p>
</div>

<p>作者：花开candy</p>
<p>链接：<a href="https://www.jianshu.com/p/2431e8f44089">https://www.jianshu.com/p/2431e8f44089</a></p>
<p>來源：简书</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</div>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>从wordpress向hexo导入博客</title>
    <url>/2019/02/17/%E4%BB%8Ewordpress%E5%90%91hexo%E5%AF%BC%E5%85%A5%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>1使用rss导入会保留文章的格式，但Front-matter有误（categories会对应到tags上）<br>2使用wordpress导出xml再导入hexo，Front-matter正确，但文章格式没了</p>
]]></content>
  </entry>
  <entry>
    <title>兰亭集序</title>
    <url>/2021/06/07/%E5%85%B0%E4%BA%AD%E9%9B%86%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="兰亭集序"><a href="#兰亭集序" class="headerlink" title="兰亭集序"></a>兰亭集序</h2><p>【作者】王羲之 【朝代】魏晋</p>
<p>永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。此地有崇山峻岭，茂林修竹，又有清流激湍，映带左右，引以为流觞曲水，列坐其次。虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。</p>
<p>是日也，天朗气清，惠风和畅。仰观宇宙之大，俯察品类之盛，所以游目骋怀，足以极视听之娱，信可乐也。</p>
<p>夫人之相与，俯仰一世。或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣舍万殊，静躁不同，当其欣于所遇，暂得于己，快然自足，不知老之将至；及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀，况修短随化，终期于尽！古人云：“死生亦大矣。”岂不痛哉！</p>
<p>每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作。后之视今，亦犹今之视昔，悲夫！故列叙时人，录其所述，虽世殊事异，所以兴怀，其致一也。后之览者，亦将有感于斯文。</p>
<h3 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h3><p>永和九年，时在癸丑之年，三月上旬，我们会集在会稽郡山阴城的兰亭，为了做禊事。众多贤才都汇聚到这里，年龄大的小的都聚集在这里。兰亭这个地方有高峻的山峰，茂盛的树林，高高的竹子。又有清澈湍急的溪流，辉映环绕在亭子的四周，我们引溪水作为流觞的曲水，排列坐在曲水旁边，虽然没有演奏音乐的盛况，但喝点酒，作点诗，也足够来畅快叙述幽深内藏的感情了。这一天，天气晴朗，和风温暖，仰首观览到宇宙的浩大，俯看观察大地上众多的万物，用来舒展眼力，开阔胸怀，足够来极尽视听的欢娱，实在很快乐。人与人相互交往，很快便度过一生。有的人从自己的情趣思想中取出一些东西，在室内（跟朋友）面对面地交谈；有的人通过寄情于自己精神情怀所寄托的事物，在形体之外,不受任何约束地放纵地生活。虽然各有各的爱好，安静与躁动各不相同，但当他们对所接触的事物感到高兴时，一时感到自得，感到高兴和满足，竟然不知道衰老将要到来。等到对得到或喜爱的东西已经厌倦，感情随着事物的变化而变化，感慨随之产生。过去所喜欢的东西，转瞬间，已经成为旧迹，尚且不能不因为它引发心中的感触，况且寿命长短，听凭造化，最后归结于消灭。古人说：“死生毕竟是件大事啊。”怎么能不让人悲痛呢？每当看到前人所发感慨的原因，其缘由像一张符契那样相和，总难免要在读前人文章时叹息哀伤，不能明白于心。本来知道把生死等同的说法是不真实的，把长寿和短命等同起来的说法是妄造的。后人看待今人，也就像今人看待前人，可悲呀。所以一个一个记下当时与会的人，录下他们所作的诗篇。纵使时代变了，事情不同了，但触发人们情怀的原因，他们的思想情趣是一样的。后世的读者，也将对这次集会的诗文有所感慨。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>分布式散列表</title>
    <url>/2020/09/22/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<ol>
<li>hashtable</li>
<li>distributed hash table</li>
<li>一致性哈希</li>
<li>kademila算法</li>
</ol>
<p><a href="https://www.8btc.com/article/399577">https://www.8btc.com/article/399577</a><br><a href="https://www.8btc.com/article/404686">https://www.8btc.com/article/404686</a><br><a href="https://colobu.com/2018/03/26/distributed-hash-table/">https://colobu.com/2018/03/26/distributed-hash-table/</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>前赤壁赋</title>
    <url>/2018/04/09/%E5%89%8D%E8%B5%A4%E5%A3%81%E8%B5%8B/</url>
    <content><![CDATA[<h1 id="前赤壁赋"><a href="#前赤壁赋" class="headerlink" title="前赤壁赋"></a>前赤壁赋</h1><p>作者：<a href="https://www.baidu.com/s?wd=%E8%8B%8F%E8%BD%BC&amp;usm=2&amp;ie=utf-8&amp;rsv_cq=%E8%B5%A4%E5%A3%81%E8%B5%8B&amp;rsv_dl=0_left_exactqa_detail_28239">苏轼</a></p>
<div class="op_exactqa_detail_s_answer">
<div class="op_exactqa_detail_s_answer_scroll">
<div class="op_exactqa_detail_s_answer_scroll_content c-gap-right opui-scroll-ctrl-content opui-scroll-onwheel">
<div>壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间。白露横江，水光接天。纵一苇之所如，凌万顷之茫然。浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。

<p>于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光。渺渺兮予怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉，余音袅袅，不绝如缕。舞幽壑之潜蛟，泣孤舟之嫠妇。</p>
<p>苏子愀然，正襟危坐而问客曰：“何为其然也？”客曰：“月明星稀，乌鹊南飞，此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”</p>
<p>苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎！且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭，是造物者之无尽藏也，而吾与子之所共适。”</p>
<p>客喜而笑，洗盏更酌。肴核既尽，杯盘狼藉。相与枕藉乎舟中，不知东方之既白。</div></p>
</div>
</div>
</div>]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>如何获取视频的缓存进度</title>
    <url>/2022/07/11/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E7%9A%84%E7%BC%93%E5%AD%98%E8%BF%9B%E5%BA%A6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>将进酒</title>
    <url>/2020/11/24/%E5%B0%86%E8%BF%9B%E9%85%92/</url>
    <content><![CDATA[<p>李白</p>
<p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，君莫停。<br>与君歌一曲，请君为我侧耳听。<br>钟鼓馔玉不足贵，但愿长醉不愿醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑。<br>主人何为言少钱，径须沽取对君酌。<br>五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>常用css</title>
    <url>/2020/08/13/%E5%B8%B8%E7%94%A8css/</url>
    <content><![CDATA[<h3 id="超出部分显示省略号"><a href="#超出部分显示省略号" class="headerlink" title="超出部分显示省略号"></a>超出部分显示省略号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/zhumengzj/article/details/80801556">https://blog.csdn.net/zhumengzj/article/details/80801556</a></p>
<h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><p><img src="https://img.jbzj.com/file_images/article/201310/201310290941121.jpg?201392994443" alt="Triangle Up"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#triangle-up &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img.jbzj.com/file_images/article/201310/201310290942025.jpg?201392994926" alt="Triangle Top Left"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#triangle-topleft &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 100px solid red;</span><br><span class="line">    border-right: 100px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>广厦万间夜眠不足五尺,粮田千顷日食不过三餐</title>
    <url>/2020/05/22/%E5%B9%BF%E5%8E%A6%E4%B8%87%E9%97%B4%E5%A4%9C%E7%9C%A0%E4%B8%8D%E8%B6%B3%E4%BA%94%E5%B0%BA-%E7%B2%AE%E7%94%B0%E5%8D%83%E9%A1%B7%E6%97%A5%E9%A3%9F%E4%B8%8D%E8%BF%87%E4%B8%89%E9%A4%90/</url>
    <content><![CDATA[<p>广厦万间，夜眠不足五尺。<br>粮田千顷，日食不过三餐。</p>
<p>搜索这段文字可以搜到一篇搜狐博客，看博主也是一个感性的人。想要给她留个言，无奈搜狐博客的留言功能已经不能用了，在此把留言内容写在这里</p>
<p>博主博客地址：<a href="http://flyingyinyi.blog.sohu.com/">http://flyingyinyi.blog.sohu.com/</a></p>
<p>搜索 “广厦万间夜眠不足五尺,粮田千顷日食不过三餐”，无意间来到你的博客。<br>在博客的字里行间里能构看出你是一个感性的人。<br>既然如此的缘分让我们在这里相遇，那就祝远方的你幸福安康。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>晨兴理荒秽，带月荷锄归。</title>
    <url>/2020/03/23/%E5%BD%92%E5%9B%AD%E7%94%B0%E5%B1%85%E5%85%B6%E4%B8%89/</url>
    <content><![CDATA[<p>归园田居·其三</p>
<p>陶渊明</p>
<p>种豆南山下，草盛豆苗稀。<br>晨兴理荒秽，带月荷锄归。<br>道狭草木长，夕露沾我衣。<br>衣沾不足惜，但使愿无违。</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>微前端是什么</title>
    <url>/2022/06/25/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>简单说，微前端就是把一个大的前端项目分解为多个小的前端项目。</p>
<p>前端项目主要是网站开发，所以微前端就是把一个大网站项目分解为多个小网站项目。</p>
<p>至于如何分解，一般有三种方案</p>
<ol>
<li>iframe </li>
<li>web component</li>
<li>自研框架</li>
</ol>
<p>各种方案优劣对比</p>
<p><a href="https://coding.imooc.com/lesson/520.html#mid=45514">从0打造微前端框架，实战汽车资讯平台</a><br><a href="https://www.ruanyifeng.com/blog/2022/04/microservice.html">微服务是什么</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>念奴娇赤壁怀古</title>
    <url>/2020/11/24/%E5%BF%B5%E5%A5%B4%E5%A8%87%E8%B5%A4%E5%A3%81%E6%80%80%E5%8F%A4/</url>
    <content><![CDATA[<p>苏轼</p>
<p>大江东去，浪淘尽，千古风流人物。<br>故垒西边，人道是，三国周郎赤壁。<br>乱石穿空，惊涛拍岸，卷起千堆雪。(穿空 一作：崩云)<br>江山如画，一时多少豪杰。</p>
<p>遥想公瑾当年，小乔初嫁了，雄姿英发。<br>羽扇纶巾，谈笑间，樯橹灰飞烟灭。(樯橹 一作：强虏)<br>故国神游，多情应笑我，早生华发。<br>人生如梦，一尊还酹江月。(人生 一作：人间；尊 同：樽)</p>
<p>译文</p>
<p>大江之水滚滚不断向东流去，滔滔巨浪淘尽千古英雄人物。<br>那旧营垒的西边，人们说那就是三国时周郎大破曹兵的赤壁。<br>岸边乱石林立，像要刺破天空，惊人的巨浪拍击着江岸，激起的浪花好似千万堆白雪。<br>雄壮的江山奇丽如图画，一时间涌现出多少英雄豪杰。</p>
<p>遥想当年的周瑜春风得意，小乔刚刚嫁给了他做妻子，英姿雄健风度翩翩神采照人。<br>手摇羽扇头戴纶巾，谈笑之间，就把强敌的战船烧得灰飞烟灭。<br>如今我身临古战场神游往昔，可笑我有如此多的怀古柔情，竟如同未老先衰般鬓发斑白。<br>人生犹如一场梦，且洒一杯酒祭奠江上的明月。</p>
<p>转自：<a href="https://so.gushiwen.org/mingju/juv_2f2012ed6c86.aspx">https://so.gushiwen.org/mingju/juv_2f2012ed6c86.aspx</a></p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>手动创建SWAP分区（转载）</title>
    <url>/2018/05/10/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BASWAP%E5%88%86%E5%8C%BA%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    <content><![CDATA[<p>大纲</p>
<p>1、swap分区是什么？</p>
<p>2、为什么需要swap分区？</p>
<p>3、关于swap分区大小</p>
<p>4、手动创建swap分区</p>
<p>1、swap分区是什么？</p>
<p>swap，即交换分区，除了安装Linux的时候，有多少人关心过它呢？其实，Swap的调整对Linux服务器，特别是Web服务器以及数据库服务器,如Oracle的性能至关重要。</p>
<p>众所周知，现代操作系统都实现了“虚拟内存”这一技术，不但在功能上突破了物理内存的限制，使程序可以操纵大于实际物理内存的空间，更重要的是，“虚拟内存”是隔离每个进程的安全保护网，使每个进程都不受其它程序的干扰。</p>
<p>Swap 空间的作用可简单描述为：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换，这就是所谓的“换页”。</p>
<p>2、为什么需要swap分区？</p>
<p>如果系统的物理内存用光了，系统就会跑得很慢，但仍能运行；如果Swap空间用光了，那么系统就会发生错误。例如，Web服务器能根据不同的请求数量衍生出多个服务进程（或线程），如果Swap空间用完，则服务进程无法启动，通常会出现“application is out of memory”的错误，严重时会造成服务进程的死锁。因此Swap空间的分配是很重要的。通常情况下，服务器应用场景中，为安全起见，都会使用swap，防止内存溢出。</p>
<p>3、关于swap分区大小</p>
<p>几乎所有Linux 系统管理的书上或者很多资料上都推荐设置swap交换分区大小为物理内存的2倍。这些建议到了现在就不是那么适用了，现在的服务器动不动就是 16GB/32GB 内存，难道相应的交换分区也要扩大到 32GB/64GB？根据 OpenBSD 的安装建议：</p>
<p>Many people follow an old rule of thumb that your swap partition should be twice the size of your main system RAM. This rule is nonsense. On a modern system, that’s a LOT of swap, most people prefer that their systems never swap. You don’t want your system to ever run out of RAM+swap, but you usually would rather have enough RAM in the system so it doesn’t need to swap. If you are using a flash device for disk, you probably want no swap partition at all. Use what is appropriate for your needs.</p>
<p>再看看 RHEL 5 推荐的 swap 分区大小：</p>
<p>Swap should equal 2x physical RAM for up to 2 GB of physical RAM, and then an additional 1x physical RAM for any amount above 2 GB, but never less than 32 MB. For systems with really large amounts of RAM (more than 32 GB) you can likely get away with a smaller swap partition (around 1x, or less, of physical RAM).</p>
<p>上面说的是一般情况，在安装系统的时候很难决定多大的交换空间，往往需要根据服务器实际负载、运行情况、以及未来可能应用来综合考虑 swap 分区的大小，所以这里参考推荐最小 swap 大小更实际一些：</p>
<pre class="crayon-plain-tag">4GB&nbsp;或&nbsp;4GB&nbsp;以下内存的系统，最小需要&nbsp;2GB&nbsp;交换空间；
大于&nbsp;4GB&nbsp;而小于&nbsp;16GB&nbsp;内存的系统，最小需要&nbsp;4GB&nbsp;交换空间；
大于&nbsp;16GB&nbsp;而小于&nbsp;64GB&nbsp;内存的系统，最小需要&nbsp;8GB&nbsp;交换空间；
大于&nbsp;64GB&nbsp;而小于&nbsp;256GB&nbsp;内存的系统，最小需要&nbsp;16GB&nbsp;交换空间。</pre>

<p>但是不建议超过32G，这样操作系统误认为有很多物理内存，反而导致性能下降。</p>
<p>4、手动创建swap分区</p>
<p>想想以下情况：</p>
<ul>
<li>系统安装时，没有创建swap分区</li>
<li>服务器无法添加物理内存，而且swap分区不够用</li>
</ul>
<p>此时，我们就需要手动的创建或者增大swap分区了。注意，虚拟内存必须是独立的文件系统，那么我们也必须为其提供单独的分区。</p>
<p><strong>1、创建一个单独的分区，并调整分区类型为Linux swap</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;fdisk&nbsp;/dev/sdb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;打印分区表

Disk&nbsp;/dev/sdb:&nbsp;5368&nbsp;MB,&nbsp;5368709120&nbsp;bytes
255&nbsp;heads,&nbsp;63&nbsp;sectors/track,&nbsp;652&nbsp;cylinders
Units&nbsp;=&nbsp;cylinders&nbsp;of&nbsp;16065&nbsp;*&nbsp;512&nbsp;=&nbsp;8225280&nbsp;bytes

&nbsp;&nbsp;&nbsp;Device&nbsp;Boot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Blocks&nbsp;&nbsp;&nbsp;Id&nbsp;&nbsp;System
/dev/sdb1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;987966&nbsp;&nbsp;&nbsp;83&nbsp;&nbsp;Linux

Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;创建新分区
Command&nbsp;action
&nbsp;&nbsp;&nbsp;e&nbsp;&nbsp;&nbsp;extended
&nbsp;&nbsp;&nbsp;p&nbsp;&nbsp;&nbsp;primary&nbsp;partition&nbsp;(1-4)
p
Partition&nbsp;number&nbsp;(1-4):&nbsp;2
First&nbsp;cylinder&nbsp;(124-652,&nbsp;default&nbsp;124):&nbsp;
Using&nbsp;default&nbsp;value&nbsp;124
Last&nbsp;cylinder&nbsp;or&nbsp;+size&nbsp;or&nbsp;+sizeM&nbsp;or&nbsp;+sizeK&nbsp;(124-652,&nbsp;default&nbsp;652):&nbsp;+512M

Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;p

Disk&nbsp;/dev/sdb:&nbsp;5368&nbsp;MB,&nbsp;5368709120&nbsp;bytes
255&nbsp;heads,&nbsp;63&nbsp;sectors/track,&nbsp;652&nbsp;cylinders
Units&nbsp;=&nbsp;cylinders&nbsp;of&nbsp;16065&nbsp;*&nbsp;512&nbsp;=&nbsp;8225280&nbsp;bytes

&nbsp;&nbsp;&nbsp;Device&nbsp;Boot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Blocks&nbsp;&nbsp;&nbsp;Id&nbsp;&nbsp;System
/dev/sdb1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;987966&nbsp;&nbsp;&nbsp;83&nbsp;&nbsp;Linux
/dev/sdb2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;186&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;506047+&nbsp;&nbsp;83&nbsp;&nbsp;Linux

Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;调整分区类型
Partition&nbsp;number&nbsp;(1-4):&nbsp;2
Hex&nbsp;code&nbsp;(type&nbsp;L&nbsp;to&nbsp;list&nbsp;codes):&nbsp;82
Changed&nbsp;system&nbsp;type&nbsp;of&nbsp;partition&nbsp;2&nbsp;to&nbsp;82&nbsp;(Linux&nbsp;swap&nbsp;/&nbsp;Solaris)

Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;p

Disk&nbsp;/dev/sdb:&nbsp;5368&nbsp;MB,&nbsp;5368709120&nbsp;bytes
255&nbsp;heads,&nbsp;63&nbsp;sectors/track,&nbsp;652&nbsp;cylinders
Units&nbsp;=&nbsp;cylinders&nbsp;of&nbsp;16065&nbsp;*&nbsp;512&nbsp;=&nbsp;8225280&nbsp;bytes

&nbsp;&nbsp;&nbsp;Device&nbsp;Boot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Blocks&nbsp;&nbsp;&nbsp;Id&nbsp;&nbsp;System
/dev/sdb1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;987966&nbsp;&nbsp;&nbsp;83&nbsp;&nbsp;Linux
/dev/sdb2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;186&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;506047+&nbsp;&nbsp;82&nbsp;&nbsp;Linux&nbsp;swap&nbsp;/&nbsp;Solaris

Command&nbsp;(m&nbsp;for&nbsp;help):&nbsp;w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;写入到磁盘
The&nbsp;partition&nbsp;table&nbsp;has&nbsp;been&nbsp;altered!

Calling&nbsp;ioctl()&nbsp;to&nbsp;re-read&nbsp;partition&nbsp;table.
Syncing&nbsp;disks.
[root@localhost&nbsp;~]#&nbsp;partprobe&nbsp;/dev/sdb</pre>

<p>OK，/dev/sdb2就是我们新创建的分区。</p>
<p><strong>2、使用mkswap命令创建swap文件系统</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;mkswap&nbsp;/dev/sdb2
Setting&nbsp;up&nbsp;swapspace&nbsp;version&nbsp;1,&nbsp;size&nbsp;=&nbsp;518184&nbsp;kB</pre>

<p><strong>3、使用swapon命令激活swap分区</strong></p>
<h1 id="swapon-device"><a href="#swapon-device" class="headerlink" title="swapon [device]"></a>swapon [device]</h1><h1 id="swapon-a-开启所有标识为swap的分区"><a href="#swapon-a-开启所有标识为swap的分区" class="headerlink" title="swapon -a        # 开启所有标识为swap的分区"></a>swapon -a        # 开启所有标识为swap的分区</h1><pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;free&nbsp;-m
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shared&nbsp;&nbsp;&nbsp;&nbsp;buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cached
Mem:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;33
-/+&nbsp;buffers/cache:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;53
Swap:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1027&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;957
[root@localhost&nbsp;~]#&nbsp;swapon&nbsp;/dev/sdb2
[root@localhost&nbsp;~]#&nbsp;free&nbsp;-m
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shared&nbsp;&nbsp;&nbsp;&nbsp;buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cached
Mem:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;33
-/+&nbsp;buffers/cache:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;53
Swap:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1521&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1451</pre>

<p><strong>4、使用swapoff命令关闭swap分区</strong></p>
<h1 id="swapoff-device"><a href="#swapoff-device" class="headerlink" title="swapoff [device]"></a>swapoff [device]</h1><h1 id="swapoff-a"><a href="#swapoff-a" class="headerlink" title="swapoff -a"></a>swapoff -a</h1><pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;swapoff&nbsp;/dev/sdb2</pre>

<p><strong>5、设置开机自动挂载swap分区</strong></p>
<p>我们可以编辑/etc/fstab配置文件，在文件末尾增加：</p>
<pre class="crayon-plain-tag">/dev/sda5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap&nbsp;&nbsp;&nbsp;&nbsp;defaults&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0</pre>

<hr>
<p>当前系统上，没有任何磁盘空间可以创建分区了，但是又必须要扩展swap时，该如何是好呢？</p>
<p>在类Unix系统中，/dev/loop（或称vnd (vnode disk)、lofi（循环文件接口））是一种伪设备，这种设备使得文件可以如同块设备一般被访问。在使用之前，循环设备必须与现存文件系统上的文件相关联。这种关联将提供给用户一个应用程序接口，接口将允许文件视为块特殊文件（参见设备文件系统）使用。因此，如果文件中包含一个完整的文件系统，那么这个文件就能如同磁盘设备一般被挂载。</p>
<p>那么意味着我们可以通过创建本地回环设备，来模拟磁盘分区使用。那么下面就来看看如何使用文件来模拟swap分区。</p>
<p><strong>1、查看系统swap分区</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;cat&nbsp;/proc/swaps&nbsp;
Filename                Type        Size    Used    Priority
/dev/sda2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition    1052248    71776    -1</pre>

<p><strong>2、使用dd命令创建大文件</strong></p>
<p>使用下面这条命令，就可以创建一个512M大小的文件，名为swapfile</p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;dd&nbsp;if=/dev/zero&nbsp;of=swapfile&nbsp;bs=1M&nbsp;count=512
512+0&nbsp;records&nbsp;in
512+0&nbsp;records&nbsp;out
536870912&nbsp;bytes&nbsp;(537&nbsp;MB)&nbsp;copied,&nbsp;15.0813&nbsp;seconds,&nbsp;35.6&nbsp;MB/s</pre>

<p><strong>3、使用mkswap命令创建swap文件系统</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;mkswap&nbsp;swapfile
Setting&nbsp;up&nbsp;swapspace&nbsp;version&nbsp;1,&nbsp;size&nbsp;=&nbsp;536866&nbsp;kB</pre>

<p><strong>4、使用swapon命令启用swap分区</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;cat&nbsp;/proc/swaps
Filename                Type        Size    Used    Priority
/dev/sda2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition    1052248    71792    -1
[root@localhost&nbsp;~]#&nbsp;free&nbsp;-m
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shared&nbsp;&nbsp;&nbsp;&nbsp;buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cached
Mem:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;50
-/+&nbsp;buffers/cache:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;54
Swap:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1027&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;957
[root@localhost&nbsp;~]#&nbsp;swapon&nbsp;swapfile
[root@localhost&nbsp;~]#&nbsp;cat&nbsp;/proc/swaps
Filename                Type        Size    Used    Priority
/dev/sda2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition    1052248    71792    -1
/root/swapfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file        524280    0    -6
[root@localhost&nbsp;~]#&nbsp;free&nbsp;-m
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shared&nbsp;&nbsp;&nbsp;&nbsp;buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cached
Mem:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;50
-/+&nbsp;buffers/cache:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;53
Swap:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1539&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1469</pre>

<p><strong>5、使用swapoff关闭swap分区</strong></p>
<pre class="crayon-plain-tag">[root@localhost&nbsp;~]#&nbsp;swapoff&nbsp;swapfile</pre>

<p><strong>6、设置开机自动挂载swap分区</strong></p>
<p>编辑/etc/fstab文件，写入下面这一行</p>
<pre class="crayon-plain-tag">echo&nbsp;&quot;/root/swapfile&nbsp;swap&nbsp;swap&nbsp;defaults&nbsp;0&nbsp;0&quot;&nbsp;&amp;gt;&amp;gt;&nbsp;/etc/fstab</pre>

<p>总结：</p>
<p>1. dd if=/dev/zero of=/path/swapfile bs=1k count=2048000</p>
<p>2. mkswap /path/swapfile</p>
<p>3. swapon /path/swapfile</p>
<p>4. 修改/etc/fstab使其启动时自动mount：</p>
<p>在/etc/fstab中增加如下语句：</p>
<p>/path/swapfile  swap  swap    defaults 0 0</p>
<p>&nbsp;</p>
<p>转载自：<a href="http://blog.51cto.com/skypegnu1/1429558">http://blog.51cto.com/skypegnu1/1429558</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>技术博客网站</title>
    <url>/2019/02/16/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>CSDN<br>csdn.net</p>
<p>博客园<br>cnblogs.com</p>
<p>简书<br>jianshu.com</p>
<p>思否<br>segmentfault.com<br>sifou.com</p>
<p>开源中国<br>oschina.net</p>
<p>扣钉<br>coding.net</p>
<p>51cto.com</p>
]]></content>
  </entry>
  <entry>
    <title>技能树</title>
    <url>/2019/07/11/%E6%8A%80%E8%83%BD%E6%A0%91/</url>
    <content><![CDATA[<ol>
<li>canvas</li>
<li>indexDB</li>
<li>HLS直播</li>
<li>小程序</li>
<li>GIS地图</li>
<li>echart</li>
<li>vue</li>
</ol>
]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器插件修改请求返回数据的原理</title>
    <url>/2022/07/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="重写-fetch-和-XHR"><a href="#重写-fetch-和-XHR" class="headerlink" title="重写 fetch 和 XHR"></a>重写 fetch 和 XHR</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>重写 fetch 和 XHR，返回自定义数据。<br>把重写 fetch 和 XHR 的代码通过 <code>&lt;script&gt;&lt;/script&gt;</code> 标签 插入到 html 里</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当你插入 <code>&lt;script&gt;&lt;/script&gt;</code> 标签的时候，请求可能已经发出了，所以此种方法不能保障拦截所有请求</p>
<h1 id="tweak"><a href="#tweak" class="headerlink" title="tweak"></a>tweak</h1>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>清华保安哥贾作胜自学考入高校的励志故事</title>
    <url>/2018/05/10/%E6%B8%85%E5%8D%8E%E4%BF%9D%E5%AE%89%E5%93%A5%E8%B4%BE%E4%BD%9C%E8%83%9C%E8%87%AA%E5%AD%A6%E8%80%83%E5%85%A5%E9%AB%98%E6%A0%A1%E7%9A%84%E5%8A%B1%E5%BF%97%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<p>2011年8月24日，一则&#8221;清华图书馆保安“蹭课”自学，考取山东师范大学&#8221;的消息引爆网络，农家子弟贾作胜一下为人所熟知。</p>
<p>&#8220;清华保安哥&#8221;贾作胜今年27岁，是山东菏泽鄄城县吉山镇贾庄村人。贾作胜从小就爱学习，奖状贴满了家里的整整一面墙。2004年，贾作胜第一次参加高考，因为发挥失常，只考上一所高职院校，学费高，并且还不是他喜欢的专业。贾作胜在综合考虑了自己的情况和家庭经济条件之后，毅然决定先去打工挣钱，然后再东山再起、重回考场，再圆大学梦。</p>
<p>从此，贾作胜开始了颠沛流离、四处奔波的打工生涯。先是在潍坊，每天钻进下水道，进行管道疏通，不管多苦多累，他都一声不吭。当青岛的一些建筑工程开工，他又随工程队一起来到了青岛，一天12小时以上，干得热火朝天&#8230;&#8230;一晃五年时间过去了，一天晚上躺在床上，贾作胜想起了自己的大学梦，现在该是向梦想航行的时候了！</p>
<p>第二天，贾作胜毅然辞掉了当时干的薪酬很不错的销售工作，只身一人，来到北京。当得知在高校当保安有良好的学习条件后，他来到了北京市保安总公司文安分公司。贾作胜将自己的情况告诉负责人张总，张总很为这个心怀梦想的年轻人感动，特意安排他到清华大学图书馆当了一名保安。</p>
<p>清华图书馆藏书甚多，一本本好书，就像一个个人生导师一样，引导着贾作胜的心灵。阅读中，有这样一则小故事深深打动了贾作胜。有一个年轻人向一位得道高僧请教怎么样才能离自己的梦想更近一步。高僧微笑着轻语：&#8221;很简单！六个字：此时，此地，此身。&#8221;</p>
<p>此时就是今天，就是当下；此身就是自己；此地就是清华大学。梦想不灭，希望无限，贾作胜白天兢兢业业地上班执勤，晚上在自己的小房子里看书复习，经常学到晚上12点多。他特意在自己的小书桌前贴了一张字条，上面是自己喜欢的小说《人生》扉页上的一段话：人生的道路虽然漫长，但紧要处常常只有几步，特别是年轻的时候。贾作胜通过这个小小的暗示来提醒自己珍惜时间、实现自我。</p>
<p>贾作胜常利用空闲时间，到教室旁听各种课程和名家讲座，以提高自己的人文修养和综合素质，来充实和丰盈心灵。此外，淳朴善良的贾作胜还尽自己所能去帮助身边需要帮助的人，为清华一名患有白血病的学子捐款，经常带着物品到敬老院看望孤寡老人&#8230;&#8230;</p>
<p>苦心人，天不负，积极的心态，辛勤的汗水，2011年8月中旬，贾作胜被山东师范大学数学应用专业录取，贾作胜成为寒门学子乐观向上、自强不息的楷模。&#8221;清华保安哥&#8221;考取山东师范大学的消息传出，贾作胜顿时成了众多媒体追寻的对象，低调的他却淡定地坐在培训班的课堂上，准备在9月到山东师范大学报到前，再抓紧时间充一下&#8221;电&#8221;，因为他的梦想还在路上。贾作胜的下一个目标是考取名校研究生，然后做一名为&#8221;国家培养人才的教师&#8221;。</p>
<p>&#8220;不要自怨自艾，不能犹豫不决，那样将很可能失去改变命运的机遇。你可以放慢脚步，但不能回头，更不能放弃。人生之路处处风雨阻，但当穿越风雨，七色的彩虹将更美丽！&#8221;接受采访，贾作胜语音不高，却一字一板、铿锵有力。清华保安哥，好样的！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>东方欲晓，莫道君行早。踏遍青山人未老，风景这边独好。</title>
    <url>/2020/03/23/%E6%B8%85%E5%B9%B3%E4%B9%90%E4%BC%9A%E6%98%8C/</url>
    <content><![CDATA[<p>  清平乐·会昌<br>  ——   毛泽东<br>　东方欲晓，莫道君行早。踏遍青山人未老，风景这边独好。<br>　会昌城外高峰，颠连直接东溟（ming）。战士指看南粤，更加郁郁葱葱。</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>状态码</title>
    <url>/2020/08/18/%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h4 id="200"><a href="#200" class="headerlink" title="200"></a>200</h4><p>200 OK 请求成功<br>201 Created 已创建新资源<br>202 Accepted 已接受但未完成（异步处理）</p>
<h4 id="300"><a href="#300" class="headerlink" title="300"></a>300</h4><p>301 Moved Permanently 资源（网页等）被永久转移到其它URL<br>302 Temporarily Moved / Found<br>303 See Other</p>
<h4 id="400"><a href="#400" class="headerlink" title="400"></a>400</h4><p>400 Bad Request<br>401 Unauthorized 请求要求用户的身份认证<br>403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求<br>404 Not Found 请求的资源（网页等）不存在<br>406 Not Acceptable<br>409 Conflict<br>412 Precondition Failed<br>415 Unsupported Media Type</p>
<h4 id="500"><a href="#500" class="headerlink" title="500"></a>500</h4><p>500 Internal Server Error 内部服务器错误<br>503 Service Unavailable</p>
<p>参考：<br><a href="https://www.runoob.com/http/http-status-codes.html">https://www.runoob.com/http/http-status-codes.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 &quot;continue&quot;</span><br><span class="line">101 &quot;switching protocols&quot;</span><br><span class="line">102 &quot;processing&quot;</span><br><span class="line">200 &quot;ok&quot;</span><br><span class="line">201 &quot;created&quot;</span><br><span class="line">202 &quot;accepted&quot;</span><br><span class="line">203 &quot;non-authoritative information&quot;</span><br><span class="line">204 &quot;no content&quot;</span><br><span class="line">205 &quot;reset content&quot;</span><br><span class="line">206 &quot;partial content&quot;</span><br><span class="line">207 &quot;multi-status&quot;</span><br><span class="line">208 &quot;already reported&quot;</span><br><span class="line">226 &quot;im used&quot;</span><br><span class="line">300 &quot;multiple choices&quot;</span><br><span class="line">301 &quot;moved permanently&quot;</span><br><span class="line">302 &quot;found&quot;</span><br><span class="line">303 &quot;see other&quot;</span><br><span class="line">304 &quot;not modified&quot;</span><br><span class="line">305 &quot;use proxy&quot;</span><br><span class="line">307 &quot;temporary redirect&quot;</span><br><span class="line">308 &quot;permanent redirect&quot;</span><br><span class="line">400 &quot;bad request&quot;</span><br><span class="line">401 &quot;unauthorized&quot;</span><br><span class="line">402 &quot;payment required&quot;</span><br><span class="line">403 &quot;forbidden&quot;</span><br><span class="line">404 &quot;not found&quot;</span><br><span class="line">405 &quot;method not allowed&quot;</span><br><span class="line">406 &quot;not acceptable&quot;</span><br><span class="line">407 &quot;proxy authentication required&quot;</span><br><span class="line">408 &quot;request timeout&quot;</span><br><span class="line">409 &quot;conflict&quot;</span><br><span class="line">410 &quot;gone&quot;</span><br><span class="line">411 &quot;length required&quot;</span><br><span class="line">412 &quot;precondition failed&quot;</span><br><span class="line">413 &quot;payload too large&quot;</span><br><span class="line">414 &quot;uri too long&quot;</span><br><span class="line">415 &quot;unsupported media type&quot;</span><br><span class="line">416 &quot;range not satisfiable&quot;</span><br><span class="line">417 &quot;expectation failed&quot;</span><br><span class="line">418 &quot;I&#x27;m a teapot&quot;</span><br><span class="line">422 &quot;unprocessable entity&quot;</span><br><span class="line">423 &quot;locked&quot;</span><br><span class="line">424 &quot;failed dependency&quot;</span><br><span class="line">426 &quot;upgrade required&quot;</span><br><span class="line">428 &quot;precondition required&quot;</span><br><span class="line">429 &quot;too many requests&quot;</span><br><span class="line">431 &quot;request header fields too large&quot;</span><br><span class="line">500 &quot;internal server error&quot;</span><br><span class="line">501 &quot;not implemented&quot;</span><br><span class="line">502 &quot;bad gateway&quot;</span><br><span class="line">503 &quot;service unavailable&quot;</span><br><span class="line">504 &quot;gateway timeout&quot;</span><br><span class="line">505 &quot;http version not supported&quot;</span><br><span class="line">506 &quot;variant also negotiates&quot;</span><br><span class="line">507 &quot;insufficient storage&quot;</span><br><span class="line">508 &quot;loop detected&quot;</span><br><span class="line">510 &quot;not extended&quot;</span><br><span class="line">511 &quot;network authentication required&quot;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://koa.bootcss.com/#response">https://koa.bootcss.com/#response</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>算法学习笔记</title>
    <url>/2020/06/05/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="数据结构-线性结构-树形结构-图结构"><a href="#数据结构-线性结构-树形结构-图结构" class="headerlink" title="数据结构(线性结构/树形结构/图结构)"></a>数据结构(线性结构/树形结构/图结构)</h3><ol>
<li>数组 array</li>
<li>链表（动态数据结构）</li>
<li>散列表 hashtable</li>
<li>栈 stack(后进先出)(系统栈-子函数)</li>
<li>队列 queue（先进先出）(循环队列，对普通队列进行优化)</li>
<li>堆 heap</li>
<li>树 tree</li>
<li>二叉树 binary tree（动态数据结构）</li>
<li>二分搜索树 binary search tree（每个节点的值大于其左子树所有节点的值，小于其右子树说有节点的值）（存储的元素必须有可比较性）</li>
<li>集合 set (每个元素只能存在一次) （去重）（使用二分搜索树实现）</li>
<li>映射 map （key value)</li>
<li>优先队列 Priority Queue (使用堆可以高效实现)</li>
<li>二叉堆 binary heap （使用树实现的堆，是一棵完全二叉树）（最大堆父节点的值大于子节点的值）（最小堆）（用数组可以实现）</li>
<li>满二叉树</li>
<li>完全二叉树</li>
<li>图</li>
</ol>
<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><ol>
<li>简单查找</li>
<li>二分查找</li>
</ol>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ol>
<li>选择排序(selection sort)</li>
<li>插入排序(insertion sort)</li>
<li>希尔排序(shell sort)</li>
<li>快速排序(Quick sort) 平均时间复杂度 O(nlogn)，最坏时间复杂度 O(n*n)</li>
<li>归并排序(merge sort) 平均时间复杂度 O(nlogn)，采用二分法，空间复杂度 O(n)</li>
<li>堆排序(heap sort)</li>
<li>冒泡排序(bubble sort)</li>
<li>计数排序(counting sort)</li>
</ol>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>红黑榜</title>
    <url>/2019/02/18/%E7%BA%A2%E9%BB%91%E6%A6%9C/</url>
    <content><![CDATA[<p>红榜<br>中关村在线 图片弹幕<br>饿了么 离开原区域订餐有提示<br>口香糖瓶子设计，方便拿取<br>支付宝个人所得税注册（使用人脸识别）<br>个税管家个人所得税查询（）<br>京东购物袋<br>小蓝单车（变速版）<br>坚果云微信验证码<br>网易公开课账号合并</p>
<p>黑榜</p>
<ol>
<li>iPhone的通知声音不知是谁</li>
<li>win10的通知</li>
<li>高德车机版</li>
<li>滴滴客户端（无搜索记录，定位不及时）</li>
<li>纯净水桶</li>
<li>微信的钱包以及无搜索历史</li>
<li>面膜</li>
<li>微信桌面版的</li>
<li>12306验证码</li>
<li>微博的分组</li>
<li>网易公开课留言功能</li>
<li>搜狐网拉到底部，延时跳转</li>
<li>miui 下拉菜单中的wifi开关</li>
<li>iphone 短信缓存</li>
<li>慕课网的问答没能和课程关联</li>
<li>QQ的举报认定</li>
<li>纯甄酸牛奶</li>
<li>chrome浏览器下载不提示选择文件夹</li>
<li>支付宝还款</li>
<li>windows防火墙联网提示</li>
<li>airpods耳机不方便拿取</li>
<li>衣服标签，穿着时不方便查看，瘙痒</li>
<li>各网站用户系统合并<br>如优酷土豆，爱奇艺小米，流利说，蜻蜓fm</li>
<li>手表调时间的按钮</li>
<li>搜狗手机输入法输入英文</li>
<li>下次自动登陆，豆瓣，csdn</li>
<li>京东和商家聊天发送的链接点击之后没有返回按钮</li>
<li>百度首页</li>
<li>搜狗输入法下选择键跳转到搜狗搜索</li>
<li>VPN下访问京东，默认进入企业站</li>
<li>通过file transfer给自己的发消息没提醒</li>
<li>牛奶吸管一个洞不好吸</li>
</ol>
]]></content>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯大王卡、阿里宝卡、百度圣卡、滴滴橙卡、京东U信卡、微博微卡、小米米粉卡对比</title>
    <url>/2018/05/17/%E8%85%BE%E8%AE%AF%E5%A4%A7%E7%8E%8B%E5%8D%A1%E3%80%81%E9%98%BF%E9%87%8C%E5%AE%9D%E5%8D%A1%E3%80%81%E7%99%BE%E5%BA%A6%E5%9C%A3%E5%8D%A1%E3%80%81%E6%BB%B4%E6%BB%B4%E6%A9%99%E5%8D%A1%E3%80%81%E4%BA%AC%E4%B8%9CU%E4%BF%A1%E5%8D%A1%E3%80%81%E5%BE%AE%E5%8D%9A%E5%BE%AE%E5%8D%A1%E3%80%81%E5%B0%8F%E7%B1%B3%E7%B1%B3%E7%B2%89%E5%8D%A1%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>百度圣卡</p>
<p>9元 专属流量免费</p>
<p>19元 专属流量免费 1G全国 100分钟国内</p>
<p>49元 专属流量免费 4G全国 200分钟国内</p>
<p>滴滴橙卡</p>
<p>&nbsp;</p>
<p>京东U信卡</p>
<p>39元 10G省内 60分钟国内</p>
<p>69元 20G省内 60分钟国内 一年京东PLUs</p>
<p>微博微卡</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>茅屋为秋风所破歌</title>
    <url>/2020/11/24/%E8%8C%85%E5%B1%8B%E4%B8%BA%E7%A7%8B%E9%A3%8E%E6%89%80%E7%A0%B4%E6%AD%8C/</url>
    <content><![CDATA[<p>杜甫</p>
<p>八月秋高风怒号⑴，卷我屋上三重茅⑵。茅飞渡江洒江郊，高者挂罥长林梢⑶，下者飘转沉塘坳⑷。</p>
<p>南村群童欺我老无力，忍能对面为盗贼⑸。公然抱茅入竹去⑹，唇焦口燥呼不得⑺，归来倚杖自叹息。</p>
<p>俄顷风定云墨色⑻，秋天漠漠向昏黑⑼。布衾多年冷似铁⑽，娇儿恶卧踏里裂⑾。床头屋漏无干处⑿，雨脚如麻未断绝⒀。自经丧乱少睡眠⒁，长夜沾湿何由彻⒂！</p>
<p>安得广厦千万间⒃，大庇天下寒士俱欢颜⒄，风雨不动安如山。呜呼⒅！何时眼前突兀见此屋⒆，吾庐独破受冻死亦足⒇！</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>茶</title>
    <url>/2018/07/10/%E8%8C%B6/</url>
    <content><![CDATA[<p>茶</p>
<p>&nbsp;</p>
<p>有一位老友，比较爱喝茶。一年前，去他家做客，他拿出从附近市场上买的茶招待我们，就是最简单的红茶、绿茶。我对茶也没有什么研究，但是那天的茶却特别好喝。</p>
<p>我记得，那天下午，云淡风轻，我们也没什么要紧的事，喝着茶，闲叙家常。</p>
<p>&nbsp;</p>
<p>后来，自己也从网上买过几次茶，但再也没有喝过那天的味道。我想，会不会是茶的原因。</p>
<p>我那位朋友经常买茶，已经和卖茶的商贩非常熟络，他总是以最优惠的价格买到最好品质的茶。</p>
<p>&nbsp;</p>
<p>后来我想，也许并不主要是茶的原因，主要是没有了当时的环境和心境。</p>
<p>&nbsp;</p>
<p>于北京</p>
<p>07/10/2018</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>literature</category>
      </categories>
  </entry>
  <entry>
    <title>计算机如何表示小数</title>
    <url>/2022/03/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E5%B0%8F%E6%95%B0/</url>
    <content><![CDATA[<p>小数的表示分为「定点法」和「浮点法」</p>
<h3 id="定点法"><a href="#定点法" class="headerlink" title="定点法"></a>定点法</h3><p>其实，整数和小数的主要区别，我们可以不规范地理解为是否存在小数点，对吧？（其实整数也是有小数点的，我们这里暂且这么理解）那么要表示小数，只需要在整数表示的基础上，加一个小数点，不就可以了吗？没错，这就是定点数的思路。</p>
<p>​定点数使用二进制，小数点的位置是事先约定好的，在使用的过程中不能改变，这也是定点数的名称的由来。有的同学可能会问了，那么，小数如何从十进制换成定点数呢？不着急，且看下面的例子：</p>
<p>其实很简单，和整数部分的完全相反。连续将小数部分的值乘以2，对于每一次得到的数，若整数为0，则顺序记下一个0，若整数突破了1，则记下1，然后整数部分重置为0，小数部分继续重复上述操作，直到小数部分为0为止。就像下面这样：</p>
<p>十进制的0.125</p>
<p>0.125*2=0.25 （记下0）</p>
<p>0.25*2=0.5 （记下0，则目前为00）</p>
<p>0.5*2=1.0 （整数部分为1，记下1，则目前为001）</p>
<p>小数部分为0，转换结束（这里是刚好结束，若整数位进一后小数部分还有剩余，则把整数部分变成0再继续重复上面的算法）</p>
<p>则十进制0.125的二进制形式为0.001</p>
<h4 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h4><p>二进制 101.011 转化为十进制</p>
<p><img src="https://math.jianshu.com/math?formula=101.011_%7B(2)%7D" alt=""><br><img src="https://math.jianshu.com/math?formula=%3D1*2%5E2%2B0*2%5E1%2B1*2%5E0%2B0*2%5E%7B-1%7D%2B1*2%5E%7B-2%7D%2B1*2%5E%7B-3%7D" alt=""><br><img src="https://math.jianshu.com/math?formula=%3D5%5Cfrac%7B3%7D%7B8%7D" alt=""></p>
<p>一般在现在计算机的应用中，定点数一般只有两种情况，第一种是小数点在符号位之后，也就是表示纯小数，第二种是在最后，也就是表示整数。这种表示方法的范围并不大，如果需要表示类似于这样的数值的话，那么用定点数的话就会占很大的空间。（毕竟你要很多很多个0才行，对吧）于是乎，我们的先人又开始秀智商了。</p>
<h3 id="浮点法"><a href="#浮点法" class="headerlink" title="浮点法"></a>浮点法</h3><p>表示一组数，0.123，1.23，12.3，123</p>
<p>如果此时你用定点数来表示的话，你会发现，这四组数字的表示方法完全不同。但是，我们的数学经验却又告诉我们，这几个数字其实是可以用一种通式来表示的，你应该已经想到了，就是科学计数法。如果使用科学计数法，那么这几组数字的通式可以表示为。貌似比什么定点数方便多了。  </p>
<p>但是，我们知道，计算机是用来处理二进制的，那么，我们在二进制里面，可不可以打造一套类似于科学计数法的思路来表示小数呢——这就是浮点数的基本思路。浮点数的表示方法有点类似科学计数法，但是又比科学计数法要复杂。</p>
<p>参考：<br><a href="https://blog.csdn.net/jarvan5/article/details/115012434">https://blog.csdn.net/jarvan5/article/details/115012434</a><br><a href="https://www.jianshu.com/p/104f53c663c9">https://www.jianshu.com/p/104f53c663c9</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>设计模式</p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p><img src="C:%5CUsers%5CYvan%5CDesktop%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210223211650.png" alt="微信图片_20210223211650"></p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210223212534159.png" alt="image-20210223212534159"></p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>jquery</p>
<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>vue / react / express</p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3>]]></content>
      <categories>
        <category>technology</category>
      </categories>
  </entry>
  <entry>
    <title>调用天地图api跨域的问题</title>
    <url>/2019/07/22/%E8%B0%83%E7%94%A8%E5%A4%A9%E5%9C%B0%E5%9B%BEapi%E8%B7%A8%E5%9F%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="调用天地图api跨域的问题"><a href="#调用天地图api跨域的问题" class="headerlink" title="调用天地图api跨域的问题"></a>调用天地图api跨域的问题</h4><p>自2019年1月1日，访问天地图api需要使用token，一个token只能在一个域名下使用，开发时最好每人申请一个token，自己用自己的token就不会有跨域问题了</p>
<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>使用token调用天地图api获取地图瓦片时出现跨域问题</p>
<h5 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h5><p>多个域名使用同一个token调用天地图api</p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>每个域名申请一个token</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2019/07/22/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h3 id="为什么会出现跨域"><a href="#为什么会出现跨域" class="headerlink" title="为什么会出现跨域"></a>为什么会出现跨域</h3><p>安全<br>浏览器同源策略<br>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。<br>cookie<br>CSRF攻击<br>XSS攻击</p>
<h3 id="跨域在chrome浏览器下的表现"><a href="#跨域在chrome浏览器下的表现" class="headerlink" title="跨域在chrome浏览器下的表现"></a>跨域在chrome浏览器下的表现</h3><h3 id="服务器跨域设置"><a href="#服务器跨域设置" class="headerlink" title="服务器跨域设置"></a>服务器跨域设置</h3><p>服务器可以设置只允许某个域名下的程序访问<br>Cross Origin Resource Share (CORS)<br>CORS是一个跨域资源共享方案，为了解决跨域问题，通过增加一系列请求头和响应头，规范安全地进行跨站数据传输<br>请求头主要包括<br>Origin Origin头在跨域请求或预先请求中，标明发起跨域请求的源域名。<br>响应头主要包括<br>Access-Control-Allow-Origin Access-Control-Allow-Origin头中携带了服务器端验证后的允许的跨域请求域名，可以是一个具体的域名或是一个*（表示任意域名）。</p>
<h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><ol>
<li>JSONP</li>
<li>空iframe加form</li>
<li>CORS跨域资源共享（Cross-origin resource sharing）</li>
<li>nginx代理<h3 id="fetch-和-xhr"><a href="#fetch-和-xhr" class="headerlink" title="fetch 和 xhr"></a>fetch 和 xhr</h3><h3 id="withCredentials"><a href="#withCredentials" class="headerlink" title="withCredentials"></a>withCredentials</h3>HTTP 请求方式有许多种，有些请求会触发 CORS 预检请求。“需预检的请求”会使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。<br>对于跨域请求浏览器一般不会发送身份凭证信息。如果要发送凭证信息，需要设置 XMLHttpRequest 的 withCredentials 属性为 true：withCredentials: true。此时要求服务器的响应信息中携带 Access-Control-Allow-Credentials: true，否则响应内容将不会返回。<br>对于携带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为“*”。因为请求头携带了 Cookie 信息。要将 Access-Control-Allow-Origin 的值设置为<origin>域名。<br>另外，响应头中也携带了 Set-Cookie 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常。<br>————————————————<br>版权声明：本文为CSDN博主「__Amy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sansan_7957/article/details/79714486">https://blog.csdn.net/sansan_7957/article/details/79714486</a></li>
</ol>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials</a></p>
<h3 id="webpack-代理设置"><a href="#webpack-代理设置" class="headerlink" title="webpack 代理设置"></a>webpack 代理设置</h3><p>参考：<br><a href="https://segmentfault.com/a/1190000017867312">https://segmentfault.com/a/1190000017867312</a><br><a href="https://segmentfault.com/a/1190000015597029">https://segmentfault.com/a/1190000015597029</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>项目升级es6</title>
    <url>/2022/07/30/%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7es6/</url>
    <content><![CDATA[<p>本文主要记录 require 升级为 import 遇到的问题</p>
<h2 id="dirname-is-not-defined-in-ES-module-scope"><a href="#dirname-is-not-defined-in-ES-module-scope" class="headerlink" title="__dirname is not defined in ES module scope"></a>__dirname is not defined in ES module scope</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fileURLToPath&#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👇️ &quot;/home/john/Desktop/javascript&quot;</span></span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;directory-name 👉️&#x27;</span>, __dirname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👇️ &quot;/home/borislav/Desktop/javascript/dist/index.html&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="import-json-file"><a href="#import-json-file" class="headerlink" title="import json file"></a>import json file</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&quot;./foo.json&quot;</span> assert &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">import</span>(<span class="string">&quot;foo.json&quot;</span>, &#123; <span class="attr">assert</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="import-条件导入"><a href="#import-条件导入" class="headerlink" title="import 条件导入"></a>import 条件导入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123; <span class="comment">// 报错</span></span><br><span class="line">  <span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./moduleA&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="import-函数"><a href="#import-函数" class="headerlink" title="import 函数"></a>import 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;./moduleA .js&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">moduleA</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(moduleA);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"> <span class="title function_">import</span>(<span class="string">&#x27;moduleA&#x27;</span>).<span class="title function_">then</span>(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>JS 对象</title>
    <url>/2021/03/10/javascript/Object/</url>
    <content><![CDATA[<h3 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h3><p>属性分两种：数据属性和访问器属性。</p>
<h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><ol>
<li>configurable</li>
<li>enumerable</li>
<li>writable</li>
<li>value</li>
</ol>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><ol>
<li>configurable</li>
<li>enumerable</li>
<li>get</li>
<li>set</li>
</ol>
<p>访问器属性是不能直接定义的，必须使用 Object.defineProperty() 。</p>
]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>js 数据类型</title>
    <url>/2021/01/11/javascript/js%208%20%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="js-8-种数据类型"><a href="#js-8-种数据类型" class="headerlink" title="js 8 种数据类型"></a>js 8 种数据类型</h2><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111181230568.png" alt="image-20210111181230568"></p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111180636320.png" alt="image-20210111180636320"></p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111180709997.png" alt="image-20210111180709997"></p>
<h3 id="myInstanceof"><a href="#myInstanceof" class="headerlink" title="myInstanceof"></a>myInstanceof</h3><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111180815057.png" alt="image-20210111180815057"></p>
<h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111181005227.png" alt="image-20210111181005227"></p>
<h2 id="通用的数据类型判断方法"><a href="#通用的数据类型判断方法" class="headerlink" title="通用的数据类型判断方法"></a>通用的数据类型判断方法</h2><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111181129536.png" alt="image-20210111181129536"></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 类</title>
    <url>/2021/03/10/javascript/js%20class/</url>
    <content><![CDATA[<h3 id="es5-与-es6-类的区别"><a href="#es5-与-es6-类的区别" class="headerlink" title="es5 与 es6 类的区别"></a>es5 与 es6 类的区别</h3><ol>
<li>es5 类定义的方法是可枚举的，es6 类定义的方法不可枚举</li>
<li>es5 构造函数可以作为函数单独执行，es6 类不可以单独执行，必须使用 new 关键字</li>
<li>es6 类不存在变量提升（hoist），这一点与 ES5 完全不同。</li>
</ol>
<p>类的 get 和 set </p>
<p>存值函数和取值函数是设置在属性(访问器属性)的 Descriptor 对象上的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomHTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">html</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">html</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(</span><br><span class="line">  <span class="title class_">CustomHTMLElement</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;html&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;get&quot;</span> <span class="keyword">in</span> descriptor  <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;set&quot;</span> <span class="keyword">in</span> descriptor  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>js 代码注释规范</title>
    <url>/2020/06/02/javascript/js%20%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!</span><br><span class="line"> * jRaiser 2 Javascript Library</span><br><span class="line"> * waterfall - v1.0.0 (2013-03-15T14:55:51+0800)</span><br><span class="line"> * http://jraiser.org/ | Released under MIT license</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h2 id="普通注释"><a href="#普通注释" class="headerlink" title="普通注释"></a>普通注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>总是在单行注释符后留一个空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// this is comment</span><br></pre></td></tr></table></figure>
<p>如果某段代码有功能未实现，或者有待完善，必须添加“TODO”标记，“TODO”前后应留一个空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// TODO 未处理IE6-8的兼容性</span><br><span class="line">function setOpacity(node, val) &#123;</span><br><span class="line">    node.style.opacity = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>总是在多行注释的结束符前留一个空格（使星号对齐）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  this is comment</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><h3 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 模块说明</span><br><span class="line"> * @module 模块名</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h3 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 类说明</span><br><span class="line"> * @class 类名</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 方法说明</span><br><span class="line"> * @method 方法名</span><br><span class="line"> * @for 所属类名</span><br><span class="line"> * @param &#123;参数类型&#125; 参数名 参数说明</span><br><span class="line"> * @return &#123;返回值类型&#125; 返回值说明</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/chris-oil/p/4067415.html">https://www.cnblogs.com/chris-oil/p/4067415.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 深浅拷贝</title>
    <url>/2021/01/13/javascript/js%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><h3 id="object-assign"><a href="#object-assign" class="headerlink" title="object.assign"></a>object.assign</h3><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><h3 id="concat-数组"><a href="#concat-数组" class="headerlink" title="concat (数组)"></a>concat (数组)</h3><h3 id="sblice-数组"><a href="#sblice-数组" class="headerlink" title="sblice (数组)"></a>sblice (数组)</h3><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="JSON-stringfy"><a href="#JSON-stringfy" class="headerlink" title="JSON.stringfy()"></a>JSON.stringfy()</h3><h3 id="手写递归实现"><a href="#手写递归实现" class="headerlink" title="手写递归实现"></a>手写递归实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function deepClone(obj) &#123;</span><br><span class="line">  let cloneObj = Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  for (let key in obj) &#123;</span><br><span class="line">    //遍历</span><br><span class="line"></span><br><span class="line">    if (typeof obj[key] === &quot;object&quot;) &#123;</span><br><span class="line">      cloneObj[key] = deepClone(obj[key]); //是对象就再次调用该函数递归</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      cloneObj[key] = obj[key]; //基本类型的话直接复制值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj2 = deepClone(obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = 2;</span><br><span class="line"></span><br><span class="line">console.log(obj2); //  &#123;a:&#123;b:1&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="改进后递归实现"><a href="#改进后递归实现" class="headerlink" title="改进后递归实现"></a>改进后递归实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const isComplexDataType = (obj) =&gt;</span><br><span class="line">  (typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot;) &amp;&amp; obj !== null;</span><br><span class="line"></span><br><span class="line">const deepClone = function (obj, hash = new WeakMap()) &#123;</span><br><span class="line">  if (obj.constructor === Date) return new Date(obj); // 日期对象直接返回一个新的日期对象</span><br><span class="line"></span><br><span class="line">  if (obj.constructor === RegExp) return new RegExp(obj); //正则对象直接返回一个新的正则对象</span><br><span class="line"></span><br><span class="line">  //如果循环引用了就用 weakMap 来解决</span><br><span class="line"></span><br><span class="line">  if (hash.has(obj)) return hash.get(obj);</span><br><span class="line"></span><br><span class="line">  let allDesc = Object.getOwnPropertyDescriptors(obj);</span><br><span class="line"></span><br><span class="line">  //遍历传入参数所有键的特性</span><br><span class="line"></span><br><span class="line">  let cloneObj = Object.create(Object.getPrototypeOf(obj), allDesc);</span><br><span class="line"></span><br><span class="line">  //继承原型链</span><br><span class="line"></span><br><span class="line">  hash.set(obj, cloneObj);</span><br><span class="line"></span><br><span class="line">  for (let key of Reflect.ownKeys(obj)) &#123;</span><br><span class="line">    cloneObj[key] =</span><br><span class="line">      isComplexDataType(obj[key]) &amp;&amp; typeof obj[key] !== &quot;function&quot;</span><br><span class="line">        ? deepClone(obj[key], hash)</span><br><span class="line">        : obj[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return cloneObj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 下面是验证代码</span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">  num: 0,</span><br><span class="line"></span><br><span class="line">  str: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">  boolean: true,</span><br><span class="line"></span><br><span class="line">  unf: undefined,</span><br><span class="line"></span><br><span class="line">  nul: null,</span><br><span class="line"></span><br><span class="line">  obj: &#123; name: &quot;我是一个对象&quot;, id: 1 &#125;,</span><br><span class="line"></span><br><span class="line">  arr: [0, 1, 2],</span><br><span class="line"></span><br><span class="line">  func: function () &#123;</span><br><span class="line">    console.log(&quot;我是一个函数&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  date: new Date(0),</span><br><span class="line"></span><br><span class="line">  reg: new RegExp(&quot;/我是一个正则/ig&quot;),</span><br><span class="line"></span><br><span class="line">  [Symbol(&quot;1&quot;)]: 1,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &quot;innumerable&quot;, &#123;</span><br><span class="line">  enumerable: false,</span><br><span class="line">  value: &quot;不可枚举属性&quot;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj = Object.create(obj, Object.getOwnPropertyDescriptors(obj));</span><br><span class="line"></span><br><span class="line">obj.loop = obj; // 设置loop成循环引用的属性</span><br><span class="line"></span><br><span class="line">let cloneObj = deepClone(obj);</span><br><span class="line"></span><br><span class="line">cloneObj.arr.push(4);</span><br><span class="line"></span><br><span class="line">console.log(&quot;obj&quot;, obj);</span><br><span class="line"></span><br><span class="line">console.log(&quot;cloneObj&quot;, cloneObj);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>promise如何解决回调地狱</title>
    <url>/2021/02/24/javascript/promise/</url>
    <content><![CDATA[<h3 id="promise如何解决回调地狱"><a href="#promise如何解决回调地狱" class="headerlink" title="promise如何解决回调地狱"></a>promise如何解决回调地狱</h3><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210224154744243.png" alt="image-20210224154744243"></p>
<h3 id="promise-的状态"><a href="#promise-的状态" class="headerlink" title="promise 的状态"></a>promise 的状态</h3><p>一般 Promise 在执行过程中，必然会处于以下几种状态之一。</p>
<ol>
<li><p>待定（pending）：初始状态，既没有被完成，也没有被拒绝。</p>
</li>
<li><p>已完成（fulfilled）：操作成功完成。</p>
</li>
<li><p>已拒绝（rejected）：操作失败。</p>
</li>
</ol>
<h3 id="promise-的方法"><a href="#promise-的方法" class="headerlink" title="promise 的方法"></a>promise 的方法</h3><h4 id="all"><a href="#all" class="headerlink" title="all"></a>all</h4><p><strong>语法：</strong> Promise.all（iterable）</p>
<p><strong>参数：</strong> 一个可迭代对象，如 Array。</p>
<p><strong>描述：</strong> 此方法对于汇总多个 promise 的结果很有用，在 ES6 中可以将多个 Promise.all 异步请求并行操作，返回结果一般有下面两种情况。</p>
<ol>
<li>当所有结果成功返回时按照请求顺序返回成功。</li>
<li>当其中有一个失败方法时，则进入失败方法。</li>
</ol>
<h4 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled"></a>allSettled</h4><p>Promise.allSettled 的语法及参数跟 Promise.all 类似，其参数接受一个 Promise 的数组，返回一个新的 Promise。唯一的不同在于，执行完之后不会失败，也就是说当 Promise.allSettled 全部处理完成后，我们可以拿到每个 Promise 的状态，而不管其是否处理成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allSettledPromise = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 2 &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="anny"><a href="#anny" class="headerlink" title="anny"></a>anny</h4><p><strong>语法：</strong> Promise.any（iterable）</p>
<p><strong>参数：</strong> iterable 可迭代的对象，例如 Array。</p>
<p><strong>描述：</strong> any 方法返回一个 Promise，只要参数 Promise 实例有一个变成 fulfilled 状态，最后 any 返回的实例就会变成 fulfilled 状态；如果所有参数 Promise 实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allSettledPromise = <span class="title class_">Promise</span>.<span class="title function_">any</span>([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="race"><a href="#race" class="headerlink" title="race"></a>race</h4><p><strong>语法：</strong> Promise.race（iterable）</p>
<p><strong>参数：</strong> iterable 可迭代的对象，例如 Array。</p>
<p><strong>描述：</strong> race 方法返回一个 Promise，只要参数的 Promise 之中有一个实例率先改变状态，则 race 方法的返回状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 race 方法的回调函数。</p>
<p>我们来看一下这个业务场景，对于图片的加载，特别适合用 race 方法来解决，将图片请求和超时判断放到一起，用 race 来实现图片的超时判断。请看代码片段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求某个图片资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line"></span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">resolve</span>(img); &#125;</span><br><span class="line"></span><br><span class="line">    img.<span class="property">src</span> = <span class="string">&#x27;http://www.baidu.com/img/flexible/logo/pc/result.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">reject</span>(<span class="string">&#x27;图片请求超时&#x27;</span>); &#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line"></span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line"></span><br><span class="line">&#125;);	</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2021/03/09/javascript/typescript/</url>
    <content><![CDATA[<h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><h3 id="Tuple类型"><a href="#Tuple类型" class="headerlink" title="Tuple类型"></a>Tuple类型</h3><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>限定数据类型的数组</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>修饰符</p>
<p>public (default类内、字类和类外都可以访问)</p>
<p>private（类内可以访问）</p>
<p>protected（类内及子类可以访问）</p>
<p>readonly</p>
<p>static （静态属性和方法，可以直接用类名访问）</p>
<p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210311190715485.png" alt="image-20210311190715485"></p>
<p>单例模式 412-2-14</p>
<p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210311192652334.png" alt="image-20210311192652334"></p>
<h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h3><p>把对象、方法等共性的东西抽象出来</p>
<p>和 type 的区别</p>
<p>readonly</p>
<p>?可选</p>
<p>强校验 412-2-11</p>
<p>class implements interface</p>
<p>接口互相继承 extends</p>
<p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210309210842572.png" alt="image-20210309210842572"></p>
<p>定义函数</p>
<p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210309210744555.png" alt="image-20210309210744555"></p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>把多个类共性的东西抽象出来</p>
<p>只能被继承不能被实例化</p>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="约束泛型-（鸭子类型）428-2-14"><a href="#约束泛型-（鸭子类型）428-2-14" class="headerlink" title="约束泛型 （鸭子类型）428-2-14"></a>约束泛型 （鸭子类型）428-2-14</h4><p><img src="C:%5CUsers%5CYvan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210309195529784.png" alt="image-20210309195529784"></p>
<h4 id="类的泛型"><a href="#类的泛型" class="headerlink" title="类的泛型"></a>类的泛型</h4><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3>]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
  </entry>
  <entry>
    <title>Vue2源码学习</title>
    <url>/2021/04/20/javascript/vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="new-Vue-都发生了什么"><a href="#new-Vue-都发生了什么" class="headerlink" title="new Vue 都发生了什么"></a>new Vue 都发生了什么</h3><p>new vue =&gt; init =&gt; $mount =&gt; compile =&gt; render =&gt; vnode =&gt; patch =&gt; DOM</p>
<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><h4 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h4><h4 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h4><h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h4><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.defineProperty()</span><br></pre></td></tr></table></figure>

<h3 id="Virtural-Dom"><a href="#Virtural-Dom" class="headerlink" title="Virtural Dom"></a>Virtural Dom</h3><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3>]]></content>
      <categories>
        <category>technology</category>
        <category>front-end</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
